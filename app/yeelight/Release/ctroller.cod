; Listing generated by Microsoft (R) Optimizing Compiler Version 19.13.26128.0 

	TITLE	C:\HelloX\personal\HelloX_OS\app\yeelight\src\ctroller.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG5024	DB	'c:\hellox\personal\hellox_os\app\yeelight\src\ctroller.c'
	DB	00H
	ORG $+3
$SG5026	DB	'c:\hellox\personal\hellox_os\app\yeelight\src\ctroller.c'
	DB	00H
	ORG $+3
$SG5028	DB	'c:\hellox\personal\hellox_os\app\yeelight\src\ctroller.c'
	DB	00H
	ORG $+3
$SG5029	DB	'{"id":"%s","method":"toggle","params":[]}', 0dH, 0aH, 00H
$SG5031	DB	'{"id":"%s","method":"toggle","params":[]}', 0dH, 0aH, 00H
$SG5051	DB	'c:\hellox\personal\hellox_os\app\yeelight\src\ctroller.c'
	DB	00H
	ORG $+3
$SG5054	DB	'Can not create socket object[sock = %d].', 0dH, 0aH, 00H
	ORG $+1
$SG5056	DB	'ToggleYlight', 00H
	ORG $+3
$SG5057	DB	'%s:failed to set sock''s recv timeout[ret = %d].', 0dH, 0aH
	DB	00H
	ORG $+2
$SG5059	DB	'Can not connect to light object[ret = %d].', 0dH, 0aH, 00H
	ORG $+3
$SG5060	DB	'Connect to light object OK.', 0dH, 0aH, 00H
	ORG $+2
$SG5064	DB	'Failed to send toggle command.', 0dH, 0aH, 00H
	ORG $+3
$SG5066	DB	'Failed to recv resp[ret = %d].', 0dH, 0aH, 00H
	ORG $+3
$SG5069	DB	'Received status update message[size = %d].', 0dH, 0aH, 00H
	ORG $+3
$SG5070	DB	'Status update:%s', 0dH, 0aH, 00H
	ORG $+1
$SG5088	DB	'ylight_controller', 00H
	ORG $+2
$SG5089	DB	'%s:toggle command received.', 0dH, 0aH, 00H
	ORG $+2
$SG5094	DB	'Bulb controller exit.', 0dH, 0aH, 00H
_DATA	ENDS
PUBLIC	_ylight_controller
PUBLIC	_ToggleYlight
EXTRN	_GetMessage:PROC
EXTRN	___BUG:PROC
EXTRN	_LogHeader:PROC
EXTRN	__hx_printf:PROC
EXTRN	__hx_sprintf:PROC
EXTRN	__hx_malloc:PROC
EXTRN	__hx_free:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_setsockopt:PROC
EXTRN	_close:PROC
EXTRN	_connect:PROC
EXTRN	_recv:PROC
EXTRN	_send:PROC
EXTRN	_socket:PROC
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\src\ctroller.c
;	COMDAT _ToggleYlight
_TEXT	SEGMENT
_sa$ = -36						; size = 16
_timeout$1 = -20					; size = 4
_bResult$ = -16						; size = 4
_sock$ = -12						; size = 4
_cmd$ = -8						; size = 4
_ret$ = -4						; size = 4
_light$ = 8						; size = 4
_ToggleYlight PROC					; COMDAT

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 36   : 	int sock = -1;

  00006	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _sock$[ebp], -1

; 37   : 	BOOL bResult = FALSE;

  0000d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bResult$[ebp], 0

; 38   : 	char* cmd = NULL;

  00014	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cmd$[ebp], 0

; 39   : 	int ret = -1;

  0001b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 40   : 	struct sockaddr_in sa;
; 41   : 
; 42   : 	BUG_ON(NULL == light);

  00022	83 7d 08 00	 cmp	 DWORD PTR _light$[ebp], 0
  00026	75 0f		 jne	 SHORT $LN2@ToggleYlig
  00028	6a 2a		 push	 42			; 0000002aH
  0002a	68 00 00 00 00	 push	 OFFSET $SG5051
  0002f	e8 00 00 00 00	 call	 ___BUG
  00034	83 c4 08	 add	 esp, 8
$LN2@ToggleYlig:
  00037	33 c0		 xor	 eax, eax
  00039	74 02		 je	 SHORT $LN3@ToggleYlig
  0003b	eb fa		 jmp	 SHORT $LN2@ToggleYlig
$LN3@ToggleYlig:

; 43   : 	if (light->sock < 0)

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _light$[ebp]
  00040	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00044	0f 8d 0b 01 00
	00		 jge	 $LN5@ToggleYlig

; 44   : 	{
; 45   : 		/* No socket created yet,create a new one. */
; 46   : 		sock = socket(AF_INET, SOCK_STREAM, 0);

  0004a	6a 00		 push	 0
  0004c	6a 01		 push	 1
  0004e	6a 02		 push	 2
  00050	e8 00 00 00 00	 call	 _socket
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	89 45 f4	 mov	 DWORD PTR _sock$[ebp], eax

; 47   : 		if (sock < 0)

  0005b	83 7d f4 00	 cmp	 DWORD PTR _sock$[ebp], 0
  0005f	7d 20		 jge	 SHORT $LN6@ToggleYlig

; 48   : 		{
; 49   : 			__LOG("Can not create socket object[sock = %d].\r\n",

  00061	6a 00		 push	 0
  00063	e8 00 00 00 00	 call	 _LogHeader
  00068	83 c4 04	 add	 esp, 4
  0006b	8b 55 f4	 mov	 edx, DWORD PTR _sock$[ebp]
  0006e	52		 push	 edx
  0006f	68 00 00 00 00	 push	 OFFSET $SG5054
  00074	e8 00 00 00 00	 call	 __hx_printf
  00079	83 c4 08	 add	 esp, 8

; 50   : 				sock);
; 51   : 			goto __TERMINAL;

  0007c	e9 be 01 00 00	 jmp	 $__TERMINAL$19
$LN6@ToggleYlig:

; 52   : 		}
; 53   : 
; 54   : 		/* Set the sending and receiving timeout value. */
; 55   : 		int timeout = YLIGHT_WAIT_TIMEOUT;

  00081	c7 45 ec 88 13
	00 00		 mov	 DWORD PTR _timeout$1[ebp], 5000 ; 00001388H

; 56   : 		ret = setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof(timeout));

  00088	6a 04		 push	 4
  0008a	8d 45 ec	 lea	 eax, DWORD PTR _timeout$1[ebp]
  0008d	50		 push	 eax
  0008e	68 06 10 00 00	 push	 4102			; 00001006H
  00093	68 ff 0f 00 00	 push	 4095			; 00000fffH
  00098	8b 4d f4	 mov	 ecx, DWORD PTR _sock$[ebp]
  0009b	51		 push	 ecx
  0009c	e8 00 00 00 00	 call	 _setsockopt
  000a1	83 c4 14	 add	 esp, 20			; 00000014H
  000a4	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 57   : 		if (ret < 0)

  000a7	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  000ab	7d 25		 jge	 SHORT $LN7@ToggleYlig

; 58   : 		{
; 59   : 			__LOG("%s:failed to set sock's recv timeout[ret = %d].\r\n",

  000ad	6a 00		 push	 0
  000af	e8 00 00 00 00	 call	 _LogHeader
  000b4	83 c4 04	 add	 esp, 4
  000b7	8b 55 fc	 mov	 edx, DWORD PTR _ret$[ebp]
  000ba	52		 push	 edx
  000bb	68 00 00 00 00	 push	 OFFSET $SG5056
  000c0	68 00 00 00 00	 push	 OFFSET $SG5057
  000c5	e8 00 00 00 00	 call	 __hx_printf
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH

; 60   : 				__FUNCTION__,
; 61   : 				ret);
; 62   : 			goto __TERMINAL;

  000cd	e9 6d 01 00 00	 jmp	 $__TERMINAL$19
$LN7@ToggleYlig:

; 63   : 		}
; 64   : 		/*
; 65   : 		ret = setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, &timeout, sizeof(timeout));
; 66   : 		if (ret < 0)
; 67   : 		{
; 68   : 		__LOG("%s:failed to set sock's snd timeout[ret = %d].\r\n",
; 69   : 		__FUNCTION__,
; 70   : 		ret);
; 71   : 		goto __TERMINAL;
; 72   : 		}*/
; 73   : 
; 74   : 		/* Connect to yeelight object. */
; 75   : 		sa.sin_family = AF_INET;

  000d2	c6 45 dd 02	 mov	 BYTE PTR _sa$[ebp+1], 2

; 76   : 		sa.sin_addr = light->socket.sin_addr;

  000d6	8b 45 08	 mov	 eax, DWORD PTR _light$[ebp]
  000d9	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000dc	89 4d e0	 mov	 DWORD PTR _sa$[ebp+4], ecx

; 77   : 		sa.sin_port = light->socket.sin_port;

  000df	8b 55 08	 mov	 edx, DWORD PTR _light$[ebp]
  000e2	66 8b 42 1a	 mov	 ax, WORD PTR [edx+26]
  000e6	66 89 45 de	 mov	 WORD PTR _sa$[ebp+2], ax

; 78   : 		memset(sa.sin_zero, 0, sizeof(sa.sin_zero));

  000ea	6a 08		 push	 8
  000ec	6a 00		 push	 0
  000ee	8d 4d e4	 lea	 ecx, DWORD PTR _sa$[ebp+8]
  000f1	51		 push	 ecx
  000f2	e8 00 00 00 00	 call	 _memset
  000f7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 79   : 		ret = connect(sock, (struct sockaddr*)&sa, sizeof(sa));

  000fa	6a 10		 push	 16			; 00000010H
  000fc	8d 55 dc	 lea	 edx, DWORD PTR _sa$[ebp]
  000ff	52		 push	 edx
  00100	8b 45 f4	 mov	 eax, DWORD PTR _sock$[ebp]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _connect
  00109	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010c	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 80   : 		if (ret < 0)

  0010f	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00113	7d 20		 jge	 SHORT $LN8@ToggleYlig

; 81   : 		{
; 82   : 			__LOG("Can not connect to light object[ret = %d].\r\n", ret);

  00115	6a 00		 push	 0
  00117	e8 00 00 00 00	 call	 _LogHeader
  0011c	83 c4 04	 add	 esp, 4
  0011f	8b 4d fc	 mov	 ecx, DWORD PTR _ret$[ebp]
  00122	51		 push	 ecx
  00123	68 00 00 00 00	 push	 OFFSET $SG5059
  00128	e8 00 00 00 00	 call	 __hx_printf
  0012d	83 c4 08	 add	 esp, 8

; 83   : 			goto __TERMINAL;

  00130	e9 0a 01 00 00	 jmp	 $__TERMINAL$19
$LN8@ToggleYlig:

; 84   : 		}
; 85   : 
; 86   : 		__LOG("Connect to light object OK.\r\n");

  00135	6a 00		 push	 0
  00137	e8 00 00 00 00	 call	 _LogHeader
  0013c	83 c4 04	 add	 esp, 4
  0013f	68 00 00 00 00	 push	 OFFSET $SG5060
  00144	e8 00 00 00 00	 call	 __hx_printf
  00149	83 c4 04	 add	 esp, 4

; 87   : 		/* Save to use next time,the connection is keeping open. */
; 88   : 		light->sock = sock;

  0014c	8b 55 08	 mov	 edx, DWORD PTR _light$[ebp]
  0014f	8b 45 f4	 mov	 eax, DWORD PTR _sock$[ebp]
  00152	89 42 2c	 mov	 DWORD PTR [edx+44], eax
$LN5@ToggleYlig:

; 89   : 	}
; 90   : 
; 91   : 	cmd = (char*)_hx_malloc(1500);

  00155	68 dc 05 00 00	 push	 1500			; 000005dcH
  0015a	e8 00 00 00 00	 call	 __hx_malloc
  0015f	83 c4 04	 add	 esp, 4
  00162	89 45 f8	 mov	 DWORD PTR _cmd$[ebp], eax

; 92   : 	if (NULL == cmd)

  00165	83 7d f8 00	 cmp	 DWORD PTR _cmd$[ebp], 0
  00169	75 05		 jne	 SHORT $LN9@ToggleYlig

; 93   : 	{
; 94   : 		goto __TERMINAL;

  0016b	e9 cf 00 00 00	 jmp	 $__TERMINAL$19
$LN9@ToggleYlig:

; 95   : 	}
; 96   : 	/* Construct toggle command. */
; 97   : 	if (!ConstructToggleCmd(light, cmd, 1500))

  00170	68 dc 05 00 00	 push	 1500			; 000005dcH
  00175	8b 4d f8	 mov	 ecx, DWORD PTR _cmd$[ebp]
  00178	51		 push	 ecx
  00179	8b 55 08	 mov	 edx, DWORD PTR _light$[ebp]
  0017c	52		 push	 edx
  0017d	e8 00 00 00 00	 call	 _ConstructToggleCmd
  00182	83 c4 0c	 add	 esp, 12			; 0000000cH
  00185	85 c0		 test	 eax, eax
  00187	75 05		 jne	 SHORT $LN10@ToggleYlig

; 98   : 	{
; 99   : 		goto __TERMINAL;

  00189	e9 b1 00 00 00	 jmp	 $__TERMINAL$19
$LN10@ToggleYlig:

; 100  : 	}
; 101  : 	ret = send(sock, cmd, strlen(cmd), 0);

  0018e	6a 00		 push	 0
  00190	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  00193	50		 push	 eax
  00194	e8 00 00 00 00	 call	 _strlen
  00199	83 c4 04	 add	 esp, 4
  0019c	50		 push	 eax
  0019d	8b 4d f8	 mov	 ecx, DWORD PTR _cmd$[ebp]
  001a0	51		 push	 ecx
  001a1	8b 55 f4	 mov	 edx, DWORD PTR _sock$[ebp]
  001a4	52		 push	 edx
  001a5	e8 00 00 00 00	 call	 _send
  001aa	83 c4 10	 add	 esp, 16			; 00000010H
  001ad	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 102  : 	if (ret < 0)

  001b0	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  001b4	7d 0f		 jge	 SHORT $LN11@ToggleYlig

; 103  : 	{
; 104  : 		_hx_printf("Failed to send toggle command.\r\n");

  001b6	68 00 00 00 00	 push	 OFFSET $SG5064
  001bb	e8 00 00 00 00	 call	 __hx_printf
  001c0	83 c4 04	 add	 esp, 4

; 105  : 		goto __TERMINAL;

  001c3	eb 7a		 jmp	 SHORT $__TERMINAL$19
$LN11@ToggleYlig:

; 106  : 	}
; 107  : 	ret = recv(sock, cmd, 1500, 0);

  001c5	6a 00		 push	 0
  001c7	68 dc 05 00 00	 push	 1500			; 000005dcH
  001cc	8b 45 f8	 mov	 eax, DWORD PTR _cmd$[ebp]
  001cf	50		 push	 eax
  001d0	8b 4d f4	 mov	 ecx, DWORD PTR _sock$[ebp]
  001d3	51		 push	 ecx
  001d4	e8 00 00 00 00	 call	 _recv
  001d9	83 c4 10	 add	 esp, 16			; 00000010H
  001dc	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 108  : 	if (ret < 0)

  001df	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  001e3	7d 1d		 jge	 SHORT $LN12@ToggleYlig

; 109  : 	{
; 110  : 		__LOG("Failed to recv resp[ret = %d].\r\n", ret);

  001e5	6a 00		 push	 0
  001e7	e8 00 00 00 00	 call	 _LogHeader
  001ec	83 c4 04	 add	 esp, 4
  001ef	8b 55 fc	 mov	 edx, DWORD PTR _ret$[ebp]
  001f2	52		 push	 edx
  001f3	68 00 00 00 00	 push	 OFFSET $SG5066
  001f8	e8 00 00 00 00	 call	 __hx_printf
  001fd	83 c4 08	 add	 esp, 8

; 111  : 		goto __TERMINAL;

  00200	eb 3d		 jmp	 SHORT $__TERMINAL$19
$LN12@ToggleYlig:

; 112  : 	}
; 113  : 	/* Show out the status info received. */
; 114  : 	if (ret > 128)

  00202	81 7d fc 80 00
	00 00		 cmp	 DWORD PTR _ret$[ebp], 128 ; 00000080H
  00209	7e 13		 jle	 SHORT $LN13@ToggleYlig

; 115  : 	{
; 116  : 		_hx_printf("Received status update message[size = %d].\r\n", ret);

  0020b	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  0020e	50		 push	 eax
  0020f	68 00 00 00 00	 push	 OFFSET $SG5069
  00214	e8 00 00 00 00	 call	 __hx_printf
  00219	83 c4 08	 add	 esp, 8

; 117  : 	}

  0021c	eb 1a		 jmp	 SHORT $LN14@ToggleYlig
$LN13@ToggleYlig:

; 118  : 	else
; 119  : 	{
; 120  : 		cmd[ret] = 0;

  0021e	8b 4d f8	 mov	 ecx, DWORD PTR _cmd$[ebp]
  00221	03 4d fc	 add	 ecx, DWORD PTR _ret$[ebp]
  00224	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 121  : 		_hx_printf("Status update:%s\r\n", cmd);

  00227	8b 55 f8	 mov	 edx, DWORD PTR _cmd$[ebp]
  0022a	52		 push	 edx
  0022b	68 00 00 00 00	 push	 OFFSET $SG5070
  00230	e8 00 00 00 00	 call	 __hx_printf
  00235	83 c4 08	 add	 esp, 8
$LN14@ToggleYlig:

; 122  : 	}
; 123  : 
; 124  : 	bResult = TRUE;

  00238	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _bResult$[ebp], -1
$__TERMINAL$19:

; 125  : __TERMINAL:
; 126  : 	if (!bResult)

  0023f	83 7d f0 00	 cmp	 DWORD PTR _bResult$[ebp], 0
  00243	75 22		 jne	 SHORT $LN15@ToggleYlig

; 127  : 	{
; 128  : 		if (light->sock >= 0)

  00245	8b 45 08	 mov	 eax, DWORD PTR _light$[ebp]
  00248	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0024c	7c 19		 jl	 SHORT $LN15@ToggleYlig

; 129  : 		{
; 130  : 			close(light->sock);

  0024e	8b 4d 08	 mov	 ecx, DWORD PTR _light$[ebp]
  00251	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00254	52		 push	 edx
  00255	e8 00 00 00 00	 call	 _close
  0025a	83 c4 04	 add	 esp, 4

; 131  : 			light->sock = -1;

  0025d	8b 45 08	 mov	 eax, DWORD PTR _light$[ebp]
  00260	c7 40 2c ff ff
	ff ff		 mov	 DWORD PTR [eax+44], -1
$LN15@ToggleYlig:

; 132  : 		}
; 133  : 	}
; 134  : 	if (cmd)

  00267	83 7d f8 00	 cmp	 DWORD PTR _cmd$[ebp], 0
  0026b	74 0c		 je	 SHORT $LN17@ToggleYlig

; 135  : 	{
; 136  : 		_hx_free(cmd);

  0026d	8b 4d f8	 mov	 ecx, DWORD PTR _cmd$[ebp]
  00270	51		 push	 ecx
  00271	e8 00 00 00 00	 call	 __hx_free
  00276	83 c4 04	 add	 esp, 4
$LN17@ToggleYlig:

; 137  : 	}
; 138  : 	return bResult;

  00279	8b 45 f0	 mov	 eax, DWORD PTR _bResult$[ebp]

; 139  : }

  0027c	8b e5		 mov	 esp, ebp
  0027e	5d		 pop	 ebp
  0027f	c3		 ret	 0
_ToggleYlight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\src\ctroller.c
;	COMDAT _ConstructToggleCmd
_TEXT	SEGMENT
_cmd_len$ = -4						; size = 4
_pLight$ = 8						; size = 4
_pCmdBuff$ = 12						; size = 4
_length$ = 16						; size = 4
_ConstructToggleCmd PROC				; COMDAT

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 19   : 	int cmd_len = 0;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _cmd_len$[ebp], 0

; 20   : 	BUG_ON(NULL == pCmdBuff);

  0000b	83 7d 0c 00	 cmp	 DWORD PTR _pCmdBuff$[ebp], 0
  0000f	75 0f		 jne	 SHORT $LN2@ConstructT
  00011	6a 14		 push	 20			; 00000014H
  00013	68 00 00 00 00	 push	 OFFSET $SG5024
  00018	e8 00 00 00 00	 call	 ___BUG
  0001d	83 c4 08	 add	 esp, 8
$LN2@ConstructT:
  00020	33 c0		 xor	 eax, eax
  00022	74 02		 je	 SHORT $LN3@ConstructT
  00024	eb fa		 jmp	 SHORT $LN2@ConstructT
$LN3@ConstructT:

; 21   : 	BUG_ON(0 == length);

  00026	83 7d 10 00	 cmp	 DWORD PTR _length$[ebp], 0
  0002a	75 0f		 jne	 SHORT $LN4@ConstructT
  0002c	6a 15		 push	 21			; 00000015H
  0002e	68 00 00 00 00	 push	 OFFSET $SG5026
  00033	e8 00 00 00 00	 call	 ___BUG
  00038	83 c4 08	 add	 esp, 8
$LN4@ConstructT:
  0003b	33 c9		 xor	 ecx, ecx
  0003d	74 02		 je	 SHORT $LN5@ConstructT
  0003f	eb fa		 jmp	 SHORT $LN4@ConstructT
$LN5@ConstructT:

; 22   : 	BUG_ON(NULL == pLight);

  00041	83 7d 08 00	 cmp	 DWORD PTR _pLight$[ebp], 0
  00045	75 0f		 jne	 SHORT $LN6@ConstructT
  00047	6a 16		 push	 22			; 00000016H
  00049	68 00 00 00 00	 push	 OFFSET $SG5028
  0004e	e8 00 00 00 00	 call	 ___BUG
  00053	83 c4 08	 add	 esp, 8
$LN6@ConstructT:
  00056	33 d2		 xor	 edx, edx
  00058	74 02		 je	 SHORT $LN7@ConstructT
  0005a	eb fa		 jmp	 SHORT $LN6@ConstructT
$LN7@ConstructT:

; 23   : 	cmd_len = strlen(YLIGHT_TOGGLE_CMD + strlen(pLight->id));

  0005c	8b 45 08	 mov	 eax, DWORD PTR _pLight$[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _strlen
  00065	83 c4 04	 add	 esp, 4
  00068	05 00 00 00 00	 add	 eax, OFFSET $SG5029
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 _strlen
  00073	83 c4 04	 add	 esp, 4
  00076	89 45 fc	 mov	 DWORD PTR _cmd_len$[ebp], eax

; 24   : 	if (cmd_len > length) /* Command buffer too short. */

  00079	8b 4d fc	 mov	 ecx, DWORD PTR _cmd_len$[ebp]
  0007c	3b 4d 10	 cmp	 ecx, DWORD PTR _length$[ebp]
  0007f	7e 04		 jle	 SHORT $LN11@ConstructT

; 25   : 	{
; 26   : 		return FALSE;

  00081	33 c0		 xor	 eax, eax
  00083	eb 24		 jmp	 SHORT $LN1@ConstructT
$LN11@ConstructT:

; 27   : 	}
; 28   : 	_hx_sprintf(pCmdBuff, YLIGHT_TOGGLE_CMD, pLight->id);

  00085	8b 55 08	 mov	 edx, DWORD PTR _pLight$[ebp]
  00088	52		 push	 edx
  00089	68 00 00 00 00	 push	 OFFSET $SG5031
  0008e	8b 45 0c	 mov	 eax, DWORD PTR _pCmdBuff$[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 __hx_sprintf
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH

; 29   : 	_hx_printf(pCmdBuff); //Debugging.

  0009a	8b 4d 0c	 mov	 ecx, DWORD PTR _pCmdBuff$[ebp]
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 __hx_printf
  000a3	83 c4 04	 add	 esp, 4

; 30   : 	return TRUE;

  000a6	83 c8 ff	 or	 eax, -1
$LN1@ConstructT:

; 31   : }

  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
_ConstructToggleCmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\src\ctroller.c
;	COMDAT _ylight_controller
_TEXT	SEGMENT
_msg$ = -16						; size = 8
tv69 = -8						; size = 4
_pLight$ = -4						; size = 4
_pData$ = 8						; size = 4
_ylight_controller PROC					; COMDAT

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 144  : 	MSG msg;
; 145  : 	struct yeelight_object* pLight = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pLight$[ebp], 0
$LN2@ylight_con:

; 146  : 
; 147  : 	while (TRUE)

  0000d	83 c8 ff	 or	 eax, -1
  00010	74 64		 je	 SHORT $__TERMINAL$13

; 148  : 	{
; 149  : 		if (GetMessage(&msg))

  00012	8d 4d f0	 lea	 ecx, DWORD PTR _msg$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 _GetMessage
  0001b	83 c4 04	 add	 esp, 4
  0001e	85 c0		 test	 eax, eax
  00020	74 52		 je	 SHORT $LN6@ylight_con

; 150  : 		{
; 151  : 			switch (msg.wCommand)

  00022	0f b7 55 f0	 movzx	 edx, WORD PTR _msg$[ebp]
  00026	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00029	83 7d f8 05	 cmp	 DWORD PTR tv69[ebp], 5
  0002d	74 43		 je	 SHORT $LN10@ylight_con
  0002f	81 7d f8 01 04
	00 00		 cmp	 DWORD PTR tv69[ebp], 1025 ; 00000401H
  00036	74 02		 je	 SHORT $LN7@ylight_con
  00038	eb 3a		 jmp	 SHORT $LN6@ylight_con
$LN7@ylight_con:

; 152  : 			{
; 153  : 			case YLIGHT_MSG_TOGGLE:
; 154  : 				__LOG("%s:toggle command received.\r\n", __func__);

  0003a	6a 00		 push	 0
  0003c	e8 00 00 00 00	 call	 _LogHeader
  00041	83 c4 04	 add	 esp, 4
  00044	68 00 00 00 00	 push	 OFFSET $SG5088
  00049	68 00 00 00 00	 push	 OFFSET $SG5089
  0004e	e8 00 00 00 00	 call	 __hx_printf
  00053	83 c4 08	 add	 esp, 8

; 155  : 				pLight = (struct yeelight_object*)msg.dwParam;

  00056	8b 45 f4	 mov	 eax, DWORD PTR _msg$[ebp+4]
  00059	89 45 fc	 mov	 DWORD PTR _pLight$[ebp], eax

; 156  : 				if (pLight)

  0005c	83 7d fc 00	 cmp	 DWORD PTR _pLight$[ebp], 0
  00060	74 0c		 je	 SHORT $LN8@ylight_con

; 157  : 				{
; 158  : 					ToggleYlight(pLight); /* Toggle the light. */

  00062	8b 4d fc	 mov	 ecx, DWORD PTR _pLight$[ebp]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 _ToggleYlight
  0006b	83 c4 04	 add	 esp, 4
$LN8@ylight_con:

; 159  : 				}
; 160  : 				break;

  0006e	eb 04		 jmp	 SHORT $LN6@ylight_con

; 161  : 			case YLIGHT_MSG_SETRGB:
; 162  : 				break;

  00070	eb 02		 jmp	 SHORT $LN6@ylight_con
$LN10@ylight_con:

; 163  : 			case KERNEL_MESSAGE_TERMINAL:
; 164  : 				goto __TERMINAL;

  00072	eb 02		 jmp	 SHORT $__TERMINAL$13
$LN6@ylight_con:

; 165  : 			default:
; 166  : 				break;
; 167  : 			}
; 168  : 		}
; 169  : 	}

  00074	eb 97		 jmp	 SHORT $LN2@ylight_con
$__TERMINAL$13:

; 170  : 
; 171  : __TERMINAL:
; 172  : 	__LOG("Bulb controller exit.\r\n");

  00076	6a 00		 push	 0
  00078	e8 00 00 00 00	 call	 _LogHeader
  0007d	83 c4 04	 add	 esp, 4
  00080	68 00 00 00 00	 push	 OFFSET $SG5094
  00085	e8 00 00 00 00	 call	 __hx_printf
  0008a	83 c4 04	 add	 esp, 4

; 173  : 	return 0;

  0008d	33 c0		 xor	 eax, eax

; 174  : }

  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
_ylight_controller ENDP
_TEXT	ENDS
END
