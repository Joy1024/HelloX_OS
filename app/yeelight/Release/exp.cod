; Listing generated by Microsoft (R) Optimizing Compiler Version 19.13.26128.0 

	TITLE	C:\HelloX\personal\HelloX_OS\app\yeelight\hxlib\exp.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_halF	DQ	03fe0000000000000r		; 0.5
	DQ	0bfe0000000000000r		; -0.5
_ln2HI	DQ	03fe62e42fee00000r		; 0.693147
	DQ	0bfe62e42fee00000r		; -0.693147
_ln2LO	DQ	03dea39ef35793c76r		; 1.90821e-10
	DQ	0bdea39ef35793c76r		; -1.90821e-10
CONST	ENDS
PUBLIC	_exp
PUBLIC	__real@0000000000000000
PUBLIC	__real@0170000000000000
PUBLIC	__real@3e66376972bea4d0
PUBLIC	__real@3f11566aaf25de2c
PUBLIC	__real@3fc555555555553e
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff71547652b82fe
PUBLIC	__real@4000000000000000
PUBLIC	__real@40862e42fefa39ef
PUBLIC	__real@7e37e43c8800759c
PUBLIC	__real@7ff0000000000000
PUBLIC	__real@bebbbd41c5d26bf1
PUBLIC	__real@bf66c16c16bebd93
PUBLIC	__real@c0874910d52d3051
EXTRN	__ftol2_sse:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@c0874910d52d3051
CONST	SEGMENT
__real@c0874910d52d3051 DQ 0c0874910d52d3051r	; -745.133
CONST	ENDS
;	COMDAT __real@bf66c16c16bebd93
CONST	SEGMENT
__real@bf66c16c16bebd93 DQ 0bf66c16c16bebd93r	; -0.00277778
CONST	ENDS
;	COMDAT __real@bebbbd41c5d26bf1
CONST	SEGMENT
__real@bebbbd41c5d26bf1 DQ 0bebbbd41c5d26bf1r	; -1.65339e-06
CONST	ENDS
;	COMDAT __real@7ff0000000000000
CONST	SEGMENT
__real@7ff0000000000000 DQ 07ff0000000000000r	; inf
CONST	ENDS
;	COMDAT __real@7e37e43c8800759c
CONST	SEGMENT
__real@7e37e43c8800759c DQ 07e37e43c8800759cr	; 1e+300
CONST	ENDS
;	COMDAT __real@40862e42fefa39ef
CONST	SEGMENT
__real@40862e42fefa39ef DQ 040862e42fefa39efr	; 709.783
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff71547652b82fe
CONST	SEGMENT
__real@3ff71547652b82fe DQ 03ff71547652b82fer	; 1.4427
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fc555555555553e
CONST	SEGMENT
__real@3fc555555555553e DQ 03fc555555555553er	; 0.166667
CONST	ENDS
;	COMDAT __real@3f11566aaf25de2c
CONST	SEGMENT
__real@3f11566aaf25de2c DQ 03f11566aaf25de2cr	; 6.61376e-05
CONST	ENDS
;	COMDAT __real@3e66376972bea4d0
CONST	SEGMENT
__real@3e66376972bea4d0 DQ 03e66376972bea4d0r	; 4.13814e-08
CONST	ENDS
;	COMDAT __real@0170000000000000
CONST	SEGMENT
__real@0170000000000000 DQ 00170000000000000r	; 9.33264e-302
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\exp.c
;	COMDAT _exp
_TEXT	SEGMENT
tv75 = -60						; size = 8
_hi$ = -52						; size = 8
_lo$ = -44						; size = 8
_c$ = -36						; size = 8
_y$ = -28						; size = 8
_t$ = -20						; size = 8
_xsb$ = -12						; size = 4
_k$ = -8						; size = 4
_hx$ = -4						; size = 4
_x$ = 8							; size = 8
_exp	PROC						; COMDAT

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH

; 124  :   double y, hi, lo, c, t;
; 125  :   int k = 0, xsb;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _k$[ebp], 0

; 126  :   unsigned hx;
; 127  : 
; 128  :   hx = __HI (x); /* high word of x */

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  00010	89 45 fc	 mov	 DWORD PTR _hx$[ebp], eax

; 129  :   xsb = (hx >> 31) & 1; /* sign bit of x */

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _hx$[ebp]
  00016	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00019	83 e1 01	 and	 ecx, 1
  0001c	89 4d f4	 mov	 DWORD PTR _xsb$[ebp], ecx

; 130  :   hx &= 0x7fffffff; /* high word of |x| */

  0001f	8b 55 fc	 mov	 edx, DWORD PTR _hx$[ebp]
  00022	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  00028	89 55 fc	 mov	 DWORD PTR _hx$[ebp], edx

; 131  : 
; 132  :   /* filter out non-finite argument */
; 133  :   if (hx >= 0x40862E42) /* if |x| >= 709.78... */

  0002b	81 7d fc 42 2e
	86 40		 cmp	 DWORD PTR _hx$[ebp], 1082535490 ; 40862e42H
  00032	72 70		 jb	 SHORT $LN7@exp

; 134  :   {
; 135  :     if (hx >= 0x7ff00000)

  00034	81 7d fc 00 00
	f0 7f		 cmp	 DWORD PTR _hx$[ebp], 2146435072 ; 7ff00000H
  0003b	72 35		 jb	 SHORT $LN5@exp

; 136  :     {
; 137  :       if (((hx & 0xfffff) | __LO (x)) != 0) /* NaN */

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _hx$[ebp]
  00040	25 ff ff 0f 00	 and	 eax, 1048575		; 000fffffH
  00045	0b 45 08	 or	 eax, DWORD PTR _x$[ebp]
  00048	74 0d		 je	 SHORT $LN4@exp

; 138  :       {
; 139  :         return x + x;

  0004a	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0004d	dc 45 08	 fadd	 QWORD PTR _x$[ebp]
  00050	e9 ce 01 00 00	 jmp	 $LN18@exp

; 140  :       }

  00055	eb 1b		 jmp	 SHORT $LN5@exp
$LN4@exp:

; 141  :       else /* exp(+-inf) = {inf,0} */
; 142  :       {
; 143  :         return (xsb == 0) ? x : 0.0;

  00057	83 7d f4 00	 cmp	 DWORD PTR _xsb$[ebp], 0
  0005b	75 08		 jne	 SHORT $LN20@exp
  0005d	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00060	dd 5d c4	 fstp	 QWORD PTR tv75[ebp]
  00063	eb 05		 jmp	 SHORT $LN21@exp
$LN20@exp:
  00065	d9 ee		 fldz
  00067	dd 5d c4	 fstp	 QWORD PTR tv75[ebp]
$LN21@exp:
  0006a	dd 45 c4	 fld	 QWORD PTR tv75[ebp]
  0006d	e9 b1 01 00 00	 jmp	 $LN18@exp
$LN5@exp:

; 144  :       }
; 145  :     }
; 146  :     if (x > o_threshold) /* overflow */

  00072	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@40862e42fefa39ef
  00078	dc 5d 08	 fcomp	 QWORD PTR _x$[ebp]
  0007b	df e0		 fnstsw	 ax
  0007d	f6 c4 05	 test	 ah, 5
  00080	7a 0b		 jp	 SHORT $LN6@exp

; 147  :     {
; 148  :       return huge * huge;

  00082	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@7ff0000000000000
  00088	e9 96 01 00 00	 jmp	 $LN18@exp
$LN6@exp:

; 149  :     }
; 150  :     if (x < u_threshold) /* underflow */

  0008d	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@c0874910d52d3051
  00093	dc 5d 08	 fcomp	 QWORD PTR _x$[ebp]
  00096	df e0		 fnstsw	 ax
  00098	f6 c4 41	 test	 ah, 65			; 00000041H
  0009b	75 07		 jne	 SHORT $LN7@exp

; 151  :     {
; 152  :       return twom1000 * twom1000;

  0009d	d9 ee		 fldz
  0009f	e9 7f 01 00 00	 jmp	 $LN18@exp
$LN7@exp:

; 153  :     }
; 154  :   }
; 155  : 
; 156  :   /* argument reduction */
; 157  :   if (hx > 0x3fd62e42) /* if  |x| > 0.5 ln2 */

  000a4	81 7d fc 42 2e
	d6 3f		 cmp	 DWORD PTR _hx$[ebp], 1071001154 ; 3fd62e42H
  000ab	0f 86 8d 00 00
	00		 jbe	 $LN8@exp

; 158  :   {
; 159  :     if (hx < 0x3FF0A2B2) /* and |x| < 1.5 ln2 */

  000b1	81 7d fc b2 a2
	f0 3f		 cmp	 DWORD PTR _hx$[ebp], 1072734898 ; 3ff0a2b2H
  000b8	73 2d		 jae	 SHORT $LN10@exp

; 160  :     {
; 161  :       hi = x - ln2HI[xsb];

  000ba	8b 4d f4	 mov	 ecx, DWORD PTR _xsb$[ebp]
  000bd	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  000c0	dc 24 cd 00 00
	00 00		 fsub	 QWORD PTR _ln2HI[ecx*8]
  000c7	dd 5d cc	 fstp	 QWORD PTR _hi$[ebp]

; 162  :       lo = ln2LO[xsb];

  000ca	8b 55 f4	 mov	 edx, DWORD PTR _xsb$[ebp]
  000cd	dd 04 d5 00 00
	00 00		 fld	 QWORD PTR _ln2LO[edx*8]
  000d4	dd 5d d4	 fstp	 QWORD PTR _lo$[ebp]

; 163  :       k = 1 - xsb - xsb;

  000d7	b8 01 00 00 00	 mov	 eax, 1
  000dc	2b 45 f4	 sub	 eax, DWORD PTR _xsb$[ebp]
  000df	2b 45 f4	 sub	 eax, DWORD PTR _xsb$[ebp]
  000e2	89 45 f8	 mov	 DWORD PTR _k$[ebp], eax

; 164  :     }

  000e5	eb 4c		 jmp	 SHORT $LN11@exp
$LN10@exp:

; 165  :     else
; 166  :     {
; 167  :       k = (int) (invln2 * x + halF[xsb]);

  000e7	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3ff71547652b82fe
  000ed	dc 4d 08	 fmul	 QWORD PTR _x$[ebp]
  000f0	8b 4d f4	 mov	 ecx, DWORD PTR _xsb$[ebp]
  000f3	dc 04 cd 00 00
	00 00		 fadd	 QWORD PTR _halF[ecx*8]
  000fa	e8 00 00 00 00	 call	 __ftol2_sse
  000ff	89 45 f8	 mov	 DWORD PTR _k$[ebp], eax

; 168  :       t = k;

  00102	db 45 f8	 fild	 DWORD PTR _k$[ebp]
  00105	dd 5d ec	 fstp	 QWORD PTR _t$[ebp]

; 169  :       hi = x - t * ln2HI[0]; /* t * ln2HI is exact here */

  00108	ba 08 00 00 00	 mov	 edx, 8
  0010d	6b c2 00	 imul	 eax, edx, 0
  00110	dd 45 ec	 fld	 QWORD PTR _t$[ebp]
  00113	dc 88 00 00 00
	00		 fmul	 QWORD PTR _ln2HI[eax]
  00119	dc 6d 08	 fsubr	 QWORD PTR _x$[ebp]
  0011c	dd 5d cc	 fstp	 QWORD PTR _hi$[ebp]

; 170  :       lo = t * ln2LO[0];

  0011f	b9 08 00 00 00	 mov	 ecx, 8
  00124	6b d1 00	 imul	 edx, ecx, 0
  00127	dd 45 ec	 fld	 QWORD PTR _t$[ebp]
  0012a	dc 8a 00 00 00
	00		 fmul	 QWORD PTR _ln2LO[edx]
  00130	dd 5d d4	 fstp	 QWORD PTR _lo$[ebp]
$LN11@exp:

; 171  :     }
; 172  :     x = hi - lo;

  00133	dd 45 cc	 fld	 QWORD PTR _hi$[ebp]
  00136	dc 65 d4	 fsub	 QWORD PTR _lo$[ebp]
  00139	dd 5d 08	 fstp	 QWORD PTR _x$[ebp]

; 173  :   }

  0013c	eb 32		 jmp	 SHORT $LN13@exp
$LN8@exp:

; 174  :   else if (hx < 0x3e300000) /* when |x| < 2**-28 */

  0013e	81 7d fc 00 00
	30 3e		 cmp	 DWORD PTR _hx$[ebp], 1043333120 ; 3e300000H
  00145	73 22		 jae	 SHORT $LN12@exp

; 175  :   {
; 176  :     if (huge + x > one) /* trigger inexact */

  00147	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@7e37e43c8800759c
  0014d	dc 45 08	 fadd	 QWORD PTR _x$[ebp]
  00150	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3ff0000000000000
  00156	df e0		 fnstsw	 ax
  00158	f6 c4 41	 test	 ah, 65			; 00000041H
  0015b	75 0a		 jne	 SHORT $LN14@exp

; 177  :     {
; 178  :       return one + x;

  0015d	d9 e8		 fld1
  0015f	dc 45 08	 fadd	 QWORD PTR _x$[ebp]
  00162	e9 bc 00 00 00	 jmp	 $LN18@exp
$LN14@exp:

; 179  :     }
; 180  :   }

  00167	eb 07		 jmp	 SHORT $LN13@exp
$LN12@exp:

; 181  :   else
; 182  :   {
; 183  :     k = 0;

  00169	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _k$[ebp], 0
$LN13@exp:

; 184  :   }
; 185  : 
; 186  :   /* x is now in primary range */
; 187  :   t = x * x;

  00170	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00173	dc 4d 08	 fmul	 QWORD PTR _x$[ebp]
  00176	dd 5d ec	 fstp	 QWORD PTR _t$[ebp]

; 188  :   c = x - t * (P1 + t * (P2 + t * (P3 + t * (P4 + t * P5))));

  00179	dd 45 ec	 fld	 QWORD PTR _t$[ebp]
  0017c	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3e66376972bea4d0
  00182	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@bebbbd41c5d26bf1
  00188	dc 4d ec	 fmul	 QWORD PTR _t$[ebp]
  0018b	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3f11566aaf25de2c
  00191	dc 4d ec	 fmul	 QWORD PTR _t$[ebp]
  00194	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@bf66c16c16bebd93
  0019a	dc 4d ec	 fmul	 QWORD PTR _t$[ebp]
  0019d	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fc555555555553e
  001a3	dc 4d ec	 fmul	 QWORD PTR _t$[ebp]
  001a6	dc 6d 08	 fsubr	 QWORD PTR _x$[ebp]
  001a9	dd 5d dc	 fstp	 QWORD PTR _c$[ebp]

; 189  :   if (k == 0)

  001ac	83 7d f8 00	 cmp	 DWORD PTR _k$[ebp], 0
  001b0	75 1c		 jne	 SHORT $LN15@exp

; 190  :   {
; 191  :     return one - ((x * c) / (c - 2.0) - x);

  001b2	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  001b5	dc 4d dc	 fmul	 QWORD PTR _c$[ebp]
  001b8	dd 45 dc	 fld	 QWORD PTR _c$[ebp]
  001bb	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@4000000000000000
  001c1	de f9		 fdivp	 ST(1), ST(0)
  001c3	dc 65 08	 fsub	 QWORD PTR _x$[ebp]
  001c6	d9 e8		 fld1
  001c8	de e1		 fsubrp	 ST(1), ST(0)
  001ca	eb 57		 jmp	 SHORT $LN18@exp

; 192  :   }

  001cc	eb 1e		 jmp	 SHORT $LN16@exp
$LN15@exp:

; 193  :   else
; 194  :   {
; 195  :     y = one - ((lo - (x * c) / (2.0 - c)) - hi);

  001ce	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  001d1	dc 4d dc	 fmul	 QWORD PTR _c$[ebp]
  001d4	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4000000000000000
  001da	dc 65 dc	 fsub	 QWORD PTR _c$[ebp]
  001dd	de f9		 fdivp	 ST(1), ST(0)
  001df	dc 6d d4	 fsubr	 QWORD PTR _lo$[ebp]
  001e2	dc 65 cc	 fsub	 QWORD PTR _hi$[ebp]
  001e5	d9 e8		 fld1
  001e7	de e1		 fsubrp	 ST(1), ST(0)
  001e9	dd 5d e4	 fstp	 QWORD PTR _y$[ebp]
$LN16@exp:

; 196  :   }
; 197  :   if (k >= -1021)

  001ec	81 7d f8 03 fc
	ff ff		 cmp	 DWORD PTR _k$[ebp], -1021 ; fffffc03H
  001f3	7c 13		 jl	 SHORT $LN17@exp

; 198  :   {
; 199  :     __HI (y) += (k << 20); /* add k to y's exponent */

  001f5	8b 45 f8	 mov	 eax, DWORD PTR _k$[ebp]
  001f8	c1 e0 14	 shl	 eax, 20			; 00000014H
  001fb	03 45 e8	 add	 eax, DWORD PTR _y$[ebp+4]
  001fe	89 45 e8	 mov	 DWORD PTR _y$[ebp+4], eax

; 200  :     return y;

  00201	dd 45 e4	 fld	 QWORD PTR _y$[ebp]
  00204	eb 1d		 jmp	 SHORT $LN18@exp

; 201  :   }

  00206	eb 1b		 jmp	 SHORT $LN18@exp
$LN17@exp:

; 202  :   else
; 203  :   {
; 204  :     __HI (y) += ((k + 1000) << 20); /* add k to y's exponent */

  00208	8b 4d f8	 mov	 ecx, DWORD PTR _k$[ebp]
  0020b	81 c1 e8 03 00
	00		 add	 ecx, 1000		; 000003e8H
  00211	c1 e1 14	 shl	 ecx, 20			; 00000014H
  00214	03 4d e8	 add	 ecx, DWORD PTR _y$[ebp+4]
  00217	89 4d e8	 mov	 DWORD PTR _y$[ebp+4], ecx

; 205  :     return y * twom1000;

  0021a	dd 45 e4	 fld	 QWORD PTR _y$[ebp]
  0021d	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@0170000000000000
$LN18@exp:

; 206  :   }
; 207  : } /* exp */

  00223	8b e5		 mov	 esp, ebp
  00225	5d		 pop	 ebp
  00226	c3		 ret	 0
_exp	ENDP
_TEXT	ENDS
END
