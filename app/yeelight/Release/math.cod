; Listing generated by Microsoft (R) Optimizing Compiler Version 19.13.26128.0 

	TITLE	C:\HelloX\personal\HelloX_OS\app\yeelight\hxlib\math.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_Zero	DQ	00000000000000000r		; 0
	DQ	08000000000000000r		; -0
CONST	ENDS
PUBLIC	_floor
PUBLIC	_fmod
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@7e37e43c8800759c
EXTRN	__fltused:DWORD
;	COMDAT __real@7e37e43c8800759c
CONST	SEGMENT
__real@7e37e43c8800759c DQ 07e37e43c8800759cr	; 1e+300
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\math.c
;	COMDAT _fmod
_TEXT	SEGMENT
tv170 = -48						; size = 4
_lz$ = -44						; size = 4
_sx$ = -40						; size = 4
_ix$ = -36						; size = 4
_hz$ = -32						; size = 4
_iy$ = -28						; size = 4
_ly$ = -24						; size = 4
_i$ = -20						; size = 4
_hy$ = -16						; size = 4
_n$ = -12						; size = 4
_lx$ = -8						; size = 4
_hx$ = -4						; size = 4
_x$ = 8							; size = 8
_y$ = 16						; size = 8
_fmod	PROC						; COMDAT

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H

; 18   : 	int n, hx, hy, hz, ix, iy, sx, i;
; 19   : 	unsigned lx, ly, lz;
; 20   : 
; 21   : 	hx = __HI(x); /* high word of x */

  00006	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  00009	89 45 fc	 mov	 DWORD PTR _hx$[ebp], eax

; 22   : 	lx = __LO(x); /* low  word of x */

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000f	89 4d f8	 mov	 DWORD PTR _lx$[ebp], ecx

; 23   : 	hy = __HI(y); /* high word of y */

  00012	8b 55 14	 mov	 edx, DWORD PTR _y$[ebp+4]
  00015	89 55 f0	 mov	 DWORD PTR _hy$[ebp], edx

; 24   : 	ly = __LO(y); /* low  word of y */

  00018	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0001b	89 45 e8	 mov	 DWORD PTR _ly$[ebp], eax

; 25   : 	sx = hx & 0x80000000; /* sign of x */

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _hx$[ebp]
  00021	81 e1 00 00 00
	80		 and	 ecx, -2147483648	; 80000000H
  00027	89 4d d8	 mov	 DWORD PTR _sx$[ebp], ecx

; 26   : 	hx ^= sx; /* |x| */

  0002a	8b 55 fc	 mov	 edx, DWORD PTR _hx$[ebp]
  0002d	33 55 d8	 xor	 edx, DWORD PTR _sx$[ebp]
  00030	89 55 fc	 mov	 DWORD PTR _hx$[ebp], edx

; 27   : 	hy &= 0x7fffffff; /* |y| */

  00033	8b 45 f0	 mov	 eax, DWORD PTR _hy$[ebp]
  00036	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  0003b	89 45 f0	 mov	 DWORD PTR _hy$[ebp], eax

; 28   : 
; 29   : 	/* purge off exception values */
; 30   : 	if ((hy | ly) == 0 || (hx >= 0x7ff00000) || /* y = 0, or x not finite */

  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _hy$[ebp]
  00041	0b 4d e8	 or	 ecx, DWORD PTR _ly$[ebp]
  00044	74 1f		 je	 SHORT $LN19@fmod
  00046	81 7d fc 00 00
	f0 7f		 cmp	 DWORD PTR _hx$[ebp], 2146435072 ; 7ff00000H
  0004d	7d 16		 jge	 SHORT $LN19@fmod
  0004f	8b 55 e8	 mov	 edx, DWORD PTR _ly$[ebp]
  00052	f7 da		 neg	 edx
  00054	0b 55 e8	 or	 edx, DWORD PTR _ly$[ebp]
  00057	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  0005a	0b 55 f0	 or	 edx, DWORD PTR _hy$[ebp]
  0005d	81 fa 00 00 f0
	7f		 cmp	 edx, 2146435072		; 7ff00000H
  00063	76 13		 jbe	 SHORT $LN18@fmod
$LN19@fmod:

; 31   : 		((hy | ((ly | -ly) >> 31)) > 0x7ff00000)) /* or y is NaN */
; 32   : 	{
; 33   : 		return (x * y) / (x * y);

  00065	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00068	dc 4d 10	 fmul	 QWORD PTR _y$[ebp]
  0006b	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0006e	dc 4d 10	 fmul	 QWORD PTR _y$[ebp]
  00071	de f9		 fdivp	 ST(1), ST(0)
  00073	e9 d7 03 00 00	 jmp	 $LN1@fmod
$LN18@fmod:

; 34   : 	}
; 35   : 	if (hx <= hy)

  00078	8b 45 fc	 mov	 eax, DWORD PTR _hx$[ebp]
  0007b	3b 45 f0	 cmp	 eax, DWORD PTR _hy$[ebp]
  0007e	7f 32		 jg	 SHORT $LN23@fmod

; 36   : 	{
; 37   : 		if ((hx < hy) || (lx < ly)) /* |x| < |y| return x */

  00080	8b 4d fc	 mov	 ecx, DWORD PTR _hx$[ebp]
  00083	3b 4d f0	 cmp	 ecx, DWORD PTR _hy$[ebp]
  00086	7c 08		 jl	 SHORT $LN22@fmod
  00088	8b 55 f8	 mov	 edx, DWORD PTR _lx$[ebp]
  0008b	3b 55 e8	 cmp	 edx, DWORD PTR _ly$[ebp]
  0008e	73 08		 jae	 SHORT $LN21@fmod
$LN22@fmod:

; 38   : 		{
; 39   : 			return x;

  00090	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00093	e9 b7 03 00 00	 jmp	 $LN1@fmod
$LN21@fmod:

; 40   : 		}
; 41   : 		if (lx == ly) /* |x| = |y| return x * 0 */

  00098	8b 45 f8	 mov	 eax, DWORD PTR _lx$[ebp]
  0009b	3b 45 e8	 cmp	 eax, DWORD PTR _ly$[ebp]
  0009e	75 12		 jne	 SHORT $LN23@fmod

; 42   : 		{
; 43   : 			return Zero[(unsigned)sx >> 31];

  000a0	8b 4d d8	 mov	 ecx, DWORD PTR _sx$[ebp]
  000a3	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000a6	dd 04 cd 00 00
	00 00		 fld	 QWORD PTR _Zero[ecx*8]
  000ad	e9 9d 03 00 00	 jmp	 $LN1@fmod
$LN23@fmod:

; 44   : 		}
; 45   : 	}
; 46   : 
; 47   : 	/* determine ix = ilogb(x) */
; 48   : 	if (hx < 0x00100000) /* subnormal x */

  000b2	81 7d fc 00 00
	10 00		 cmp	 DWORD PTR _hx$[ebp], 1048576 ; 00100000H
  000b9	7d 5d		 jge	 SHORT $LN24@fmod

; 49   : 	{
; 50   : 		if (hx == 0)

  000bb	83 7d fc 00	 cmp	 DWORD PTR _hx$[ebp], 0
  000bf	75 2a		 jne	 SHORT $LN26@fmod

; 51   : 		{
; 52   : 			for (ix = -1043, i = lx; i > 0; i <<= 1)

  000c1	c7 45 dc ed fb
	ff ff		 mov	 DWORD PTR _ix$[ebp], -1043 ; fffffbedH
  000c8	8b 55 f8	 mov	 edx, DWORD PTR _lx$[ebp]
  000cb	89 55 ec	 mov	 DWORD PTR _i$[ebp], edx
  000ce	eb 08		 jmp	 SHORT $LN4@fmod
$LN2@fmod:
  000d0	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  000d3	d1 e0		 shl	 eax, 1
  000d5	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN4@fmod:
  000d8	83 7d ec 00	 cmp	 DWORD PTR _i$[ebp], 0
  000dc	7e 0b		 jle	 SHORT $LN3@fmod

; 53   : 			{
; 54   : 				ix -= 1;

  000de	8b 4d dc	 mov	 ecx, DWORD PTR _ix$[ebp]
  000e1	83 e9 01	 sub	 ecx, 1
  000e4	89 4d dc	 mov	 DWORD PTR _ix$[ebp], ecx

; 55   : 			}

  000e7	eb e7		 jmp	 SHORT $LN2@fmod
$LN3@fmod:

; 56   : 		}

  000e9	eb 2b		 jmp	 SHORT $LN6@fmod
$LN26@fmod:

; 57   : 		else
; 58   : 		{
; 59   : 			for (ix = -1022, i = (hx << 11); i > 0; i <<= 1)

  000eb	c7 45 dc 02 fc
	ff ff		 mov	 DWORD PTR _ix$[ebp], -1022 ; fffffc02H
  000f2	8b 55 fc	 mov	 edx, DWORD PTR _hx$[ebp]
  000f5	c1 e2 0b	 shl	 edx, 11			; 0000000bH
  000f8	89 55 ec	 mov	 DWORD PTR _i$[ebp], edx
  000fb	eb 08		 jmp	 SHORT $LN7@fmod
$LN5@fmod:
  000fd	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00100	d1 e0		 shl	 eax, 1
  00102	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN7@fmod:
  00105	83 7d ec 00	 cmp	 DWORD PTR _i$[ebp], 0
  00109	7e 0b		 jle	 SHORT $LN6@fmod

; 60   : 			{
; 61   : 				ix -= 1;

  0010b	8b 4d dc	 mov	 ecx, DWORD PTR _ix$[ebp]
  0010e	83 e9 01	 sub	 ecx, 1
  00111	89 4d dc	 mov	 DWORD PTR _ix$[ebp], ecx

; 62   : 			}

  00114	eb e7		 jmp	 SHORT $LN5@fmod
$LN6@fmod:

; 63   : 		}
; 64   : 	}

  00116	eb 0f		 jmp	 SHORT $LN25@fmod
$LN24@fmod:

; 65   : 	else
; 66   : 	{
; 67   : 		ix = (hx >> 20) - 1023;

  00118	8b 55 fc	 mov	 edx, DWORD PTR _hx$[ebp]
  0011b	c1 fa 14	 sar	 edx, 20			; 00000014H
  0011e	81 ea ff 03 00
	00		 sub	 edx, 1023		; 000003ffH
  00124	89 55 dc	 mov	 DWORD PTR _ix$[ebp], edx
$LN25@fmod:

; 68   : 	}
; 69   : 
; 70   : 	/* determine iy = ilogb(y) */
; 71   : 	if (hy < 0x00100000) /* subnormal y */

  00127	81 7d f0 00 00
	10 00		 cmp	 DWORD PTR _hy$[ebp], 1048576 ; 00100000H
  0012e	7d 5d		 jge	 SHORT $LN28@fmod

; 72   : 	{
; 73   : 		if (hy == 0)

  00130	83 7d f0 00	 cmp	 DWORD PTR _hy$[ebp], 0
  00134	75 2a		 jne	 SHORT $LN30@fmod

; 74   : 		{
; 75   : 			for (iy = -1043, i = ly; i > 0; i <<= 1)

  00136	c7 45 e4 ed fb
	ff ff		 mov	 DWORD PTR _iy$[ebp], -1043 ; fffffbedH
  0013d	8b 45 e8	 mov	 eax, DWORD PTR _ly$[ebp]
  00140	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
  00143	eb 08		 jmp	 SHORT $LN10@fmod
$LN8@fmod:
  00145	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00148	d1 e1		 shl	 ecx, 1
  0014a	89 4d ec	 mov	 DWORD PTR _i$[ebp], ecx
$LN10@fmod:
  0014d	83 7d ec 00	 cmp	 DWORD PTR _i$[ebp], 0
  00151	7e 0b		 jle	 SHORT $LN9@fmod

; 76   : 			{
; 77   : 				iy -= 1;

  00153	8b 55 e4	 mov	 edx, DWORD PTR _iy$[ebp]
  00156	83 ea 01	 sub	 edx, 1
  00159	89 55 e4	 mov	 DWORD PTR _iy$[ebp], edx

; 78   : 			}

  0015c	eb e7		 jmp	 SHORT $LN8@fmod
$LN9@fmod:

; 79   : 		}

  0015e	eb 2b		 jmp	 SHORT $LN12@fmod
$LN30@fmod:

; 80   : 		else
; 81   : 		{
; 82   : 			for (iy = -1022, i = (hy << 11); i > 0; i <<= 1)

  00160	c7 45 e4 02 fc
	ff ff		 mov	 DWORD PTR _iy$[ebp], -1022 ; fffffc02H
  00167	8b 45 f0	 mov	 eax, DWORD PTR _hy$[ebp]
  0016a	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  0016d	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
  00170	eb 08		 jmp	 SHORT $LN13@fmod
$LN11@fmod:
  00172	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00175	d1 e1		 shl	 ecx, 1
  00177	89 4d ec	 mov	 DWORD PTR _i$[ebp], ecx
$LN13@fmod:
  0017a	83 7d ec 00	 cmp	 DWORD PTR _i$[ebp], 0
  0017e	7e 0b		 jle	 SHORT $LN12@fmod

; 83   : 			{
; 84   : 				iy -= 1;

  00180	8b 55 e4	 mov	 edx, DWORD PTR _iy$[ebp]
  00183	83 ea 01	 sub	 edx, 1
  00186	89 55 e4	 mov	 DWORD PTR _iy$[ebp], edx

; 85   : 			}

  00189	eb e7		 jmp	 SHORT $LN11@fmod
$LN12@fmod:

; 86   : 		}
; 87   : 	}

  0018b	eb 0e		 jmp	 SHORT $LN29@fmod
$LN28@fmod:

; 88   : 	else
; 89   : 	{
; 90   : 		iy = (hy >> 20) - 1023;

  0018d	8b 45 f0	 mov	 eax, DWORD PTR _hy$[ebp]
  00190	c1 f8 14	 sar	 eax, 20			; 00000014H
  00193	2d ff 03 00 00	 sub	 eax, 1023		; 000003ffH
  00198	89 45 e4	 mov	 DWORD PTR _iy$[ebp], eax
$LN29@fmod:

; 91   : 	}
; 92   : 
; 93   : 	/* set up {hx,lx}, {hy,ly} and align y to x */
; 94   : 	if (ix >= -1022)

  0019b	81 7d dc 02 fc
	ff ff		 cmp	 DWORD PTR _ix$[ebp], -1022 ; fffffc02H
  001a2	7c 14		 jl	 SHORT $LN32@fmod

; 95   : 	{
; 96   : 		hx = 0x00100000 | (0x000fffff & hx);

  001a4	8b 4d fc	 mov	 ecx, DWORD PTR _hx$[ebp]
  001a7	81 e1 ff ff 0f
	00		 and	 ecx, 1048575		; 000fffffH
  001ad	81 c9 00 00 10
	00		 or	 ecx, 1048576		; 00100000H
  001b3	89 4d fc	 mov	 DWORD PTR _hx$[ebp], ecx

; 97   : 	}

  001b6	eb 4d		 jmp	 SHORT $LN35@fmod
$LN32@fmod:

; 98   : 	else /* subnormal x, shift x to normal */
; 99   : 	{
; 100  : 		n = -1022 - ix;

  001b8	ba 02 fc ff ff	 mov	 edx, -1022		; fffffc02H
  001bd	2b 55 dc	 sub	 edx, DWORD PTR _ix$[ebp]
  001c0	89 55 f4	 mov	 DWORD PTR _n$[ebp], edx

; 101  : 		if (n <= 31)

  001c3	83 7d f4 1f	 cmp	 DWORD PTR _n$[ebp], 31	; 0000001fH
  001c7	7f 27		 jg	 SHORT $LN34@fmod

; 102  : 		{
; 103  : 			hx = (hx << n) | (lx >> (32 - n));

  001c9	8b 45 fc	 mov	 eax, DWORD PTR _hx$[ebp]
  001cc	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  001cf	d3 e0		 shl	 eax, cl
  001d1	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  001d6	2b 4d f4	 sub	 ecx, DWORD PTR _n$[ebp]
  001d9	8b 55 f8	 mov	 edx, DWORD PTR _lx$[ebp]
  001dc	d3 ea		 shr	 edx, cl
  001de	0b c2		 or	 eax, edx
  001e0	89 45 fc	 mov	 DWORD PTR _hx$[ebp], eax

; 104  : 			lx <<= n;

  001e3	8b 45 f8	 mov	 eax, DWORD PTR _lx$[ebp]
  001e6	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  001e9	d3 e0		 shl	 eax, cl
  001eb	89 45 f8	 mov	 DWORD PTR _lx$[ebp], eax

; 105  : 		}

  001ee	eb 15		 jmp	 SHORT $LN35@fmod
$LN34@fmod:

; 106  : 		else
; 107  : 		{
; 108  : 			hx = lx << (n - 32);

  001f0	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  001f3	83 e9 20	 sub	 ecx, 32			; 00000020H
  001f6	8b 55 f8	 mov	 edx, DWORD PTR _lx$[ebp]
  001f9	d3 e2		 shl	 edx, cl
  001fb	89 55 fc	 mov	 DWORD PTR _hx$[ebp], edx

; 109  : 			lx = 0;

  001fe	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _lx$[ebp], 0
$LN35@fmod:

; 110  : 		}
; 111  : 	}
; 112  : 	if (iy >= -1022)

  00205	81 7d e4 02 fc
	ff ff		 cmp	 DWORD PTR _iy$[ebp], -1022 ; fffffc02H
  0020c	7c 12		 jl	 SHORT $LN36@fmod

; 113  : 	{
; 114  : 		hy = 0x00100000 | (0x000fffff & hy);

  0020e	8b 45 f0	 mov	 eax, DWORD PTR _hy$[ebp]
  00211	25 ff ff 0f 00	 and	 eax, 1048575		; 000fffffH
  00216	0d 00 00 10 00	 or	 eax, 1048576		; 00100000H
  0021b	89 45 f0	 mov	 DWORD PTR _hy$[ebp], eax

; 115  : 	}

  0021e	eb 4d		 jmp	 SHORT $LN39@fmod
$LN36@fmod:

; 116  : 	else /* subnormal y, shift y to normal */
; 117  : 	{
; 118  : 		n = -1022 - iy;

  00220	b9 02 fc ff ff	 mov	 ecx, -1022		; fffffc02H
  00225	2b 4d e4	 sub	 ecx, DWORD PTR _iy$[ebp]
  00228	89 4d f4	 mov	 DWORD PTR _n$[ebp], ecx

; 119  : 		if (n <= 31)

  0022b	83 7d f4 1f	 cmp	 DWORD PTR _n$[ebp], 31	; 0000001fH
  0022f	7f 27		 jg	 SHORT $LN38@fmod

; 120  : 		{
; 121  : 			hy = (hy << n) | (ly >> (32 - n));

  00231	8b 55 f0	 mov	 edx, DWORD PTR _hy$[ebp]
  00234	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00237	d3 e2		 shl	 edx, cl
  00239	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0023e	2b 4d f4	 sub	 ecx, DWORD PTR _n$[ebp]
  00241	8b 45 e8	 mov	 eax, DWORD PTR _ly$[ebp]
  00244	d3 e8		 shr	 eax, cl
  00246	0b d0		 or	 edx, eax
  00248	89 55 f0	 mov	 DWORD PTR _hy$[ebp], edx

; 122  : 			ly <<= n;

  0024b	8b 55 e8	 mov	 edx, DWORD PTR _ly$[ebp]
  0024e	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00251	d3 e2		 shl	 edx, cl
  00253	89 55 e8	 mov	 DWORD PTR _ly$[ebp], edx

; 123  : 		}

  00256	eb 15		 jmp	 SHORT $LN39@fmod
$LN38@fmod:

; 124  : 		else
; 125  : 		{
; 126  : 			hy = ly << (n - 32);

  00258	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  0025b	83 e9 20	 sub	 ecx, 32			; 00000020H
  0025e	8b 45 e8	 mov	 eax, DWORD PTR _ly$[ebp]
  00261	d3 e0		 shl	 eax, cl
  00263	89 45 f0	 mov	 DWORD PTR _hy$[ebp], eax

; 127  : 			ly = 0;

  00266	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _ly$[ebp], 0
$LN39@fmod:

; 128  : 		}
; 129  : 	}
; 130  : 
; 131  : 	/* fix point fmod */
; 132  : 	n = ix - iy;

  0026d	8b 4d dc	 mov	 ecx, DWORD PTR _ix$[ebp]
  00270	2b 4d e4	 sub	 ecx, DWORD PTR _iy$[ebp]
  00273	89 4d f4	 mov	 DWORD PTR _n$[ebp], ecx
$LN14@fmod:

; 133  : 	while (n--)

  00276	8b 55 f4	 mov	 edx, DWORD PTR _n$[ebp]
  00279	89 55 d0	 mov	 DWORD PTR tv170[ebp], edx
  0027c	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0027f	83 e8 01	 sub	 eax, 1
  00282	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax
  00285	83 7d d0 00	 cmp	 DWORD PTR tv170[ebp], 0
  00289	74 7e		 je	 SHORT $LN15@fmod

; 134  : 	{
; 135  : 		hz = hx - hy;

  0028b	8b 4d fc	 mov	 ecx, DWORD PTR _hx$[ebp]
  0028e	2b 4d f0	 sub	 ecx, DWORD PTR _hy$[ebp]
  00291	89 4d e0	 mov	 DWORD PTR _hz$[ebp], ecx

; 136  : 		lz = lx - ly;

  00294	8b 55 f8	 mov	 edx, DWORD PTR _lx$[ebp]
  00297	2b 55 e8	 sub	 edx, DWORD PTR _ly$[ebp]
  0029a	89 55 d4	 mov	 DWORD PTR _lz$[ebp], edx

; 137  : 		if (lx < ly)

  0029d	8b 45 f8	 mov	 eax, DWORD PTR _lx$[ebp]
  002a0	3b 45 e8	 cmp	 eax, DWORD PTR _ly$[ebp]
  002a3	73 09		 jae	 SHORT $LN40@fmod

; 138  : 		{
; 139  : 			hz -= 1;

  002a5	8b 4d e0	 mov	 ecx, DWORD PTR _hz$[ebp]
  002a8	83 e9 01	 sub	 ecx, 1
  002ab	89 4d e0	 mov	 DWORD PTR _hz$[ebp], ecx
$LN40@fmod:

; 140  : 		}
; 141  : 		if (hz < 0)

  002ae	83 7d e0 00	 cmp	 DWORD PTR _hz$[ebp], 0
  002b2	7d 1c		 jge	 SHORT $LN41@fmod

; 142  : 		{
; 143  : 			hx = hx + hx + (lx >> 31);

  002b4	8b 55 fc	 mov	 edx, DWORD PTR _hx$[ebp]
  002b7	03 55 fc	 add	 edx, DWORD PTR _hx$[ebp]
  002ba	8b 45 f8	 mov	 eax, DWORD PTR _lx$[ebp]
  002bd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002c0	03 d0		 add	 edx, eax
  002c2	89 55 fc	 mov	 DWORD PTR _hx$[ebp], edx

; 144  : 			lx = lx + lx;

  002c5	8b 4d f8	 mov	 ecx, DWORD PTR _lx$[ebp]
  002c8	03 4d f8	 add	 ecx, DWORD PTR _lx$[ebp]
  002cb	89 4d f8	 mov	 DWORD PTR _lx$[ebp], ecx

; 145  : 		}

  002ce	eb 34		 jmp	 SHORT $LN42@fmod
$LN41@fmod:

; 146  : 		else
; 147  : 		{
; 148  : 			if ((hz | lz) == 0) /* return sign(x) * 0 */

  002d0	8b 55 e0	 mov	 edx, DWORD PTR _hz$[ebp]
  002d3	0b 55 d4	 or	 edx, DWORD PTR _lz$[ebp]
  002d6	75 12		 jne	 SHORT $LN43@fmod

; 149  : 			{
; 150  : 				return Zero[(unsigned)sx >> 31];

  002d8	8b 45 d8	 mov	 eax, DWORD PTR _sx$[ebp]
  002db	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002de	dd 04 c5 00 00
	00 00		 fld	 QWORD PTR _Zero[eax*8]
  002e5	e9 65 01 00 00	 jmp	 $LN1@fmod
$LN43@fmod:

; 151  : 			}
; 152  : 			hx = hz + hz + (lz >> 31);

  002ea	8b 4d e0	 mov	 ecx, DWORD PTR _hz$[ebp]
  002ed	03 4d e0	 add	 ecx, DWORD PTR _hz$[ebp]
  002f0	8b 55 d4	 mov	 edx, DWORD PTR _lz$[ebp]
  002f3	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  002f6	03 ca		 add	 ecx, edx
  002f8	89 4d fc	 mov	 DWORD PTR _hx$[ebp], ecx

; 153  : 			lx = lz + lz;

  002fb	8b 45 d4	 mov	 eax, DWORD PTR _lz$[ebp]
  002fe	03 45 d4	 add	 eax, DWORD PTR _lz$[ebp]
  00301	89 45 f8	 mov	 DWORD PTR _lx$[ebp], eax
$LN42@fmod:

; 154  : 		}
; 155  : 	}

  00304	e9 6d ff ff ff	 jmp	 $LN14@fmod
$LN15@fmod:

; 156  : 	hz = hx - hy;

  00309	8b 4d fc	 mov	 ecx, DWORD PTR _hx$[ebp]
  0030c	2b 4d f0	 sub	 ecx, DWORD PTR _hy$[ebp]
  0030f	89 4d e0	 mov	 DWORD PTR _hz$[ebp], ecx

; 157  : 	lz = lx - ly;

  00312	8b 55 f8	 mov	 edx, DWORD PTR _lx$[ebp]
  00315	2b 55 e8	 sub	 edx, DWORD PTR _ly$[ebp]
  00318	89 55 d4	 mov	 DWORD PTR _lz$[ebp], edx

; 158  : 	if (lx < ly)

  0031b	8b 45 f8	 mov	 eax, DWORD PTR _lx$[ebp]
  0031e	3b 45 e8	 cmp	 eax, DWORD PTR _ly$[ebp]
  00321	73 09		 jae	 SHORT $LN44@fmod

; 159  : 	{
; 160  : 		hz -= 1;

  00323	8b 4d e0	 mov	 ecx, DWORD PTR _hz$[ebp]
  00326	83 e9 01	 sub	 ecx, 1
  00329	89 4d e0	 mov	 DWORD PTR _hz$[ebp], ecx
$LN44@fmod:

; 161  : 	}
; 162  : 	if (hz >= 0)

  0032c	83 7d e0 00	 cmp	 DWORD PTR _hz$[ebp], 0
  00330	7c 0c		 jl	 SHORT $LN45@fmod

; 163  : 	{
; 164  : 		hx = hz;

  00332	8b 55 e0	 mov	 edx, DWORD PTR _hz$[ebp]
  00335	89 55 fc	 mov	 DWORD PTR _hx$[ebp], edx

; 165  : 		lx = lz;

  00338	8b 45 d4	 mov	 eax, DWORD PTR _lz$[ebp]
  0033b	89 45 f8	 mov	 DWORD PTR _lx$[ebp], eax
$LN45@fmod:

; 166  : 	}
; 167  : 
; 168  : 	/* convert back to floating value and restore the sign */
; 169  : 	if ((hx | lx) == 0) /* return sign(x) * 0 */

  0033e	8b 4d fc	 mov	 ecx, DWORD PTR _hx$[ebp]
  00341	0b 4d f8	 or	 ecx, DWORD PTR _lx$[ebp]
  00344	75 12		 jne	 SHORT $LN46@fmod

; 170  : 	{
; 171  : 		return Zero[(unsigned)sx >> 31];

  00346	8b 55 d8	 mov	 edx, DWORD PTR _sx$[ebp]
  00349	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  0034c	dd 04 d5 00 00
	00 00		 fld	 QWORD PTR _Zero[edx*8]
  00353	e9 f7 00 00 00	 jmp	 $LN1@fmod
$LN46@fmod:

; 172  : 	}
; 173  : 	while (hx < 0x00100000) /* normalize x */

  00358	81 7d fc 00 00
	10 00		 cmp	 DWORD PTR _hx$[ebp], 1048576 ; 00100000H
  0035f	7d 25		 jge	 SHORT $LN17@fmod

; 174  : 	{
; 175  : 		hx = hx + hx + (lx >> 31);

  00361	8b 45 fc	 mov	 eax, DWORD PTR _hx$[ebp]
  00364	03 45 fc	 add	 eax, DWORD PTR _hx$[ebp]
  00367	8b 4d f8	 mov	 ecx, DWORD PTR _lx$[ebp]
  0036a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0036d	03 c1		 add	 eax, ecx
  0036f	89 45 fc	 mov	 DWORD PTR _hx$[ebp], eax

; 176  : 		lx = lx + lx;

  00372	8b 55 f8	 mov	 edx, DWORD PTR _lx$[ebp]
  00375	03 55 f8	 add	 edx, DWORD PTR _lx$[ebp]
  00378	89 55 f8	 mov	 DWORD PTR _lx$[ebp], edx

; 177  : 		iy -= 1;

  0037b	8b 45 e4	 mov	 eax, DWORD PTR _iy$[ebp]
  0037e	83 e8 01	 sub	 eax, 1
  00381	89 45 e4	 mov	 DWORD PTR _iy$[ebp], eax

; 178  : 	}

  00384	eb d2		 jmp	 SHORT $LN46@fmod
$LN17@fmod:

; 179  : 	if (iy >= -1022) /* normalize output */

  00386	81 7d e4 02 fc
	ff ff		 cmp	 DWORD PTR _iy$[ebp], -1022 ; fffffc02H
  0038d	7c 2e		 jl	 SHORT $LN47@fmod

; 180  : 	{
; 181  : 		hx = ((hx - 0x00100000) | ((iy + 1023) << 20));

  0038f	8b 4d fc	 mov	 ecx, DWORD PTR _hx$[ebp]
  00392	81 e9 00 00 10
	00		 sub	 ecx, 1048576		; 00100000H
  00398	8b 55 e4	 mov	 edx, DWORD PTR _iy$[ebp]
  0039b	81 c2 ff 03 00
	00		 add	 edx, 1023		; 000003ffH
  003a1	c1 e2 14	 shl	 edx, 20			; 00000014H
  003a4	0b ca		 or	 ecx, edx
  003a6	89 4d fc	 mov	 DWORD PTR _hx$[ebp], ecx

; 182  : 		__HI(x) = hx | sx;

  003a9	8b 45 fc	 mov	 eax, DWORD PTR _hx$[ebp]
  003ac	0b 45 d8	 or	 eax, DWORD PTR _sx$[ebp]
  003af	89 45 0c	 mov	 DWORD PTR _x$[ebp+4], eax

; 183  : 		__LO(x) = lx;

  003b2	8b 4d f8	 mov	 ecx, DWORD PTR _lx$[ebp]
  003b5	89 4d 08	 mov	 DWORD PTR _x$[ebp], ecx

; 184  : 	}

  003b8	e9 8f 00 00 00	 jmp	 $LN48@fmod
$LN47@fmod:

; 185  : 	else /* subnormal output */
; 186  : 	{
; 187  : 		n = -1022 - iy;

  003bd	ba 02 fc ff ff	 mov	 edx, -1022		; fffffc02H
  003c2	2b 55 e4	 sub	 edx, DWORD PTR _iy$[ebp]
  003c5	89 55 f4	 mov	 DWORD PTR _n$[ebp], edx

; 188  : 		if (n <= 20)

  003c8	83 7d f4 14	 cmp	 DWORD PTR _n$[ebp], 20	; 00000014H
  003cc	7f 27		 jg	 SHORT $LN49@fmod

; 189  : 		{
; 190  : 			lx = (lx >> n) | ((unsigned)hx << (32 - n));

  003ce	8b 45 f8	 mov	 eax, DWORD PTR _lx$[ebp]
  003d1	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  003d4	d3 e8		 shr	 eax, cl
  003d6	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  003db	2b 4d f4	 sub	 ecx, DWORD PTR _n$[ebp]
  003de	8b 55 fc	 mov	 edx, DWORD PTR _hx$[ebp]
  003e1	d3 e2		 shl	 edx, cl
  003e3	0b c2		 or	 eax, edx
  003e5	89 45 f8	 mov	 DWORD PTR _lx$[ebp], eax

; 191  : 			hx >>= n;

  003e8	8b 45 fc	 mov	 eax, DWORD PTR _hx$[ebp]
  003eb	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  003ee	d3 f8		 sar	 eax, cl
  003f0	89 45 fc	 mov	 DWORD PTR _hx$[ebp], eax

; 192  : 		}

  003f3	eb 3c		 jmp	 SHORT $LN52@fmod
$LN49@fmod:

; 193  : 		else if (n <= 31)

  003f5	83 7d f4 1f	 cmp	 DWORD PTR _n$[ebp], 31	; 0000001fH
  003f9	7f 22		 jg	 SHORT $LN51@fmod

; 194  : 		{
; 195  : 			lx = (hx << (32 - n)) | (lx >> n);

  003fb	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00400	2b 4d f4	 sub	 ecx, DWORD PTR _n$[ebp]
  00403	8b 55 fc	 mov	 edx, DWORD PTR _hx$[ebp]
  00406	d3 e2		 shl	 edx, cl
  00408	8b 45 f8	 mov	 eax, DWORD PTR _lx$[ebp]
  0040b	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  0040e	d3 e8		 shr	 eax, cl
  00410	0b d0		 or	 edx, eax
  00412	89 55 f8	 mov	 DWORD PTR _lx$[ebp], edx

; 196  : 			hx = sx;

  00415	8b 4d d8	 mov	 ecx, DWORD PTR _sx$[ebp]
  00418	89 4d fc	 mov	 DWORD PTR _hx$[ebp], ecx

; 197  : 		}

  0041b	eb 14		 jmp	 SHORT $LN52@fmod
$LN51@fmod:

; 198  : 		else
; 199  : 		{
; 200  : 			lx = hx >> (n - 32);

  0041d	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00420	83 e9 20	 sub	 ecx, 32			; 00000020H
  00423	8b 55 fc	 mov	 edx, DWORD PTR _hx$[ebp]
  00426	d3 fa		 sar	 edx, cl
  00428	89 55 f8	 mov	 DWORD PTR _lx$[ebp], edx

; 201  : 			hx = sx;

  0042b	8b 45 d8	 mov	 eax, DWORD PTR _sx$[ebp]
  0042e	89 45 fc	 mov	 DWORD PTR _hx$[ebp], eax
$LN52@fmod:

; 202  : 		}
; 203  : 		__HI(x) = hx | sx;

  00431	8b 4d fc	 mov	 ecx, DWORD PTR _hx$[ebp]
  00434	0b 4d d8	 or	 ecx, DWORD PTR _sx$[ebp]
  00437	89 4d 0c	 mov	 DWORD PTR _x$[ebp+4], ecx

; 204  : 		__LO(x) = lx;

  0043a	8b 55 f8	 mov	 edx, DWORD PTR _lx$[ebp]
  0043d	89 55 08	 mov	 DWORD PTR _x$[ebp], edx

; 205  : 		x *= one; /* create necessary signal */

  00440	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00443	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3ff0000000000000
  00449	dd 5d 08	 fstp	 QWORD PTR _x$[ebp]
$LN48@fmod:

; 206  : 	}
; 207  : 	return x; /* exact output */

  0044c	dd 45 08	 fld	 QWORD PTR _x$[ebp]
$LN1@fmod:

; 208  : } /* fmod */

  0044f	8b e5		 mov	 esp, ebp
  00451	5d		 pop	 ebp
  00452	c3		 ret	 0
_fmod	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\math.c
;	COMDAT _floor
_TEXT	SEGMENT
_j$ = -20						; size = 4
_i$ = -16						; size = 4
_j0$ = -12						; size = 4
_i1$ = -8						; size = 4
_i0$ = -4						; size = 4
_x$ = 8							; size = 8
_floor	PROC						; COMDAT

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 226  : 	int i0, i1, j0;
; 227  : 	unsigned i, j;
; 228  : 
; 229  : 	i0 = __HI(x);

  00006	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  00009	89 45 fc	 mov	 DWORD PTR _i0$[ebp], eax

; 230  : 	i1 = __LO(x);

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000f	89 4d f8	 mov	 DWORD PTR _i1$[ebp], ecx

; 231  : 	j0 = ((i0 >> 20) & 0x7ff) - 0x3ff;

  00012	8b 55 fc	 mov	 edx, DWORD PTR _i0$[ebp]
  00015	c1 fa 14	 sar	 edx, 20			; 00000014H
  00018	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  0001e	81 ea ff 03 00
	00		 sub	 edx, 1023		; 000003ffH
  00024	89 55 f4	 mov	 DWORD PTR _j0$[ebp], edx

; 232  : 	if (j0 < 20)

  00027	83 7d f4 14	 cmp	 DWORD PTR _j0$[ebp], 20	; 00000014H
  0002b	0f 8d b2 00 00
	00		 jge	 $LN2@floor

; 233  : 	{
; 234  : 		if (j0 < 0) /* raise inexact if x != 0 */

  00031	83 7d f4 00	 cmp	 DWORD PTR _j0$[ebp], 0
  00035	7d 49		 jge	 SHORT $LN4@floor

; 235  : 		{
; 236  : 			if (huge + x > 0.0) /* return 0 * sign(x) if |x| < 1 */

  00037	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@7e37e43c8800759c
  0003d	dc 45 08	 fadd	 QWORD PTR _x$[ebp]
  00040	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00046	df e0		 fnstsw	 ax
  00048	f6 c4 41	 test	 ah, 65			; 00000041H
  0004b	75 31		 jne	 SHORT $LN9@floor

; 237  : 			{
; 238  : 				if (i0 >= 0)

  0004d	83 7d fc 00	 cmp	 DWORD PTR _i0$[ebp], 0
  00051	7c 0f		 jl	 SHORT $LN7@floor

; 239  : 				{
; 240  : 					i0 = i1 = 0;

  00053	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i1$[ebp], 0
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _i1$[ebp]
  0005d	89 45 fc	 mov	 DWORD PTR _i0$[ebp], eax

; 241  : 				}

  00060	eb 1c		 jmp	 SHORT $LN9@floor
$LN7@floor:

; 242  : 				else if (((i0 & 0x7fffffff) | i1) != 0)

  00062	8b 4d fc	 mov	 ecx, DWORD PTR _i0$[ebp]
  00065	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  0006b	0b 4d f8	 or	 ecx, DWORD PTR _i1$[ebp]
  0006e	74 0e		 je	 SHORT $LN9@floor

; 243  : 				{
; 244  : 					i0 = 0xbff00000;

  00070	c7 45 fc 00 00
	f0 bf		 mov	 DWORD PTR _i0$[ebp], -1074790400 ; bff00000H

; 245  : 					i1 = 0;

  00077	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i1$[ebp], 0
$LN9@floor:

; 246  : 				}
; 247  : 			}
; 248  : 		}

  0007e	eb 5e		 jmp	 SHORT $LN11@floor
$LN4@floor:

; 249  : 		else
; 250  : 		{
; 251  : 			i = (0x000fffff) >> j0;

  00080	ba ff ff 0f 00	 mov	 edx, 1048575		; 000fffffH
  00085	8b 4d f4	 mov	 ecx, DWORD PTR _j0$[ebp]
  00088	d3 fa		 sar	 edx, cl
  0008a	89 55 f0	 mov	 DWORD PTR _i$[ebp], edx

; 252  : 			if (((i0 & i) | i1) == 0) /* x is integral */

  0008d	8b 45 fc	 mov	 eax, DWORD PTR _i0$[ebp]
  00090	23 45 f0	 and	 eax, DWORD PTR _i$[ebp]
  00093	0b 45 f8	 or	 eax, DWORD PTR _i1$[ebp]
  00096	75 08		 jne	 SHORT $LN10@floor

; 253  : 			{
; 254  : 				return x;

  00098	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0009b	e9 f7 00 00 00	 jmp	 $LN1@floor
$LN10@floor:

; 255  : 			}
; 256  : 			if (huge + x > 0.0) /* raise inexact flag */

  000a0	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@7e37e43c8800759c
  000a6	dc 45 08	 fadd	 QWORD PTR _x$[ebp]
  000a9	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  000af	df e0		 fnstsw	 ax
  000b1	f6 c4 41	 test	 ah, 65			; 00000041H
  000b4	75 28		 jne	 SHORT $LN11@floor

; 257  : 			{
; 258  : 				if (i0 < 0)

  000b6	83 7d fc 00	 cmp	 DWORD PTR _i0$[ebp], 0
  000ba	7d 10		 jge	 SHORT $LN12@floor

; 259  : 				{
; 260  : 					i0 += (0x00100000) >> j0;

  000bc	ba 00 00 10 00	 mov	 edx, 1048576		; 00100000H
  000c1	8b 4d f4	 mov	 ecx, DWORD PTR _j0$[ebp]
  000c4	d3 fa		 sar	 edx, cl
  000c6	03 55 fc	 add	 edx, DWORD PTR _i0$[ebp]
  000c9	89 55 fc	 mov	 DWORD PTR _i0$[ebp], edx
$LN12@floor:

; 261  : 				}
; 262  : 				i0 &= (~i);

  000cc	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000cf	f7 d0		 not	 eax
  000d1	23 45 fc	 and	 eax, DWORD PTR _i0$[ebp]
  000d4	89 45 fc	 mov	 DWORD PTR _i0$[ebp], eax

; 263  : 				i1 = 0;

  000d7	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i1$[ebp], 0
$LN11@floor:

; 264  : 			}
; 265  : 		}
; 266  : 	}

  000de	e9 a5 00 00 00	 jmp	 $LN18@floor
$LN2@floor:

; 267  : 	else if (j0 > 51)

  000e3	83 7d f4 33	 cmp	 DWORD PTR _j0$[ebp], 51	; 00000033H
  000e7	7e 20		 jle	 SHORT $LN13@floor

; 268  : 	{
; 269  : 		if (j0 == 0x400) /* inf or NaN */

  000e9	81 7d f4 00 04
	00 00		 cmp	 DWORD PTR _j0$[ebp], 1024 ; 00000400H
  000f0	75 0d		 jne	 SHORT $LN15@floor

; 270  : 		{
; 271  : 			return x + x;

  000f2	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  000f5	dc 45 08	 fadd	 QWORD PTR _x$[ebp]
  000f8	e9 9a 00 00 00	 jmp	 $LN1@floor

; 272  : 		}

  000fd	eb 08		 jmp	 SHORT $LN16@floor
$LN15@floor:

; 273  : 		else /* x is integral */
; 274  : 		{
; 275  : 			return x;

  000ff	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00102	e9 90 00 00 00	 jmp	 $LN1@floor
$LN16@floor:

; 276  : 		}
; 277  : 	}

  00107	eb 7f		 jmp	 SHORT $LN18@floor
$LN13@floor:

; 278  : 	else
; 279  : 	{
; 280  : 		i = ((unsigned)(0xffffffff)) >> (j0 - 20);

  00109	8b 4d f4	 mov	 ecx, DWORD PTR _j0$[ebp]
  0010c	83 e9 14	 sub	 ecx, 20			; 00000014H
  0010f	83 ca ff	 or	 edx, -1
  00112	d3 ea		 shr	 edx, cl
  00114	89 55 f0	 mov	 DWORD PTR _i$[ebp], edx

; 281  : 		if ((i1 & i) == 0) /* x is integral */

  00117	8b 45 f8	 mov	 eax, DWORD PTR _i1$[ebp]
  0011a	23 45 f0	 and	 eax, DWORD PTR _i$[ebp]
  0011d	75 05		 jne	 SHORT $LN17@floor

; 282  : 		{
; 283  : 			return x;

  0011f	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00122	eb 73		 jmp	 SHORT $LN1@floor
$LN17@floor:

; 284  : 		}
; 285  : 		if (huge + x > 0.0) /* raise inexact flag */

  00124	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@7e37e43c8800759c
  0012a	dc 45 08	 fadd	 QWORD PTR _x$[ebp]
  0012d	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00133	df e0		 fnstsw	 ax
  00135	f6 c4 41	 test	 ah, 65			; 00000041H
  00138	75 4e		 jne	 SHORT $LN18@floor

; 286  : 		{
; 287  : 			if (i0 < 0)

  0013a	83 7d fc 00	 cmp	 DWORD PTR _i0$[ebp], 0
  0013e	7d 3d		 jge	 SHORT $LN21@floor

; 288  : 			{
; 289  : 				if (j0 == 20)

  00140	83 7d f4 14	 cmp	 DWORD PTR _j0$[ebp], 20	; 00000014H
  00144	75 0b		 jne	 SHORT $LN20@floor

; 290  : 				{
; 291  : 					i0 += 1;

  00146	8b 4d fc	 mov	 ecx, DWORD PTR _i0$[ebp]
  00149	83 c1 01	 add	 ecx, 1
  0014c	89 4d fc	 mov	 DWORD PTR _i0$[ebp], ecx

; 292  : 				}

  0014f	eb 2c		 jmp	 SHORT $LN21@floor
$LN20@floor:

; 293  : 				else
; 294  : 				{
; 295  : 					j = i1 + (1 << (52 - j0));

  00151	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00156	2b 4d f4	 sub	 ecx, DWORD PTR _j0$[ebp]
  00159	ba 01 00 00 00	 mov	 edx, 1
  0015e	d3 e2		 shl	 edx, cl
  00160	03 55 f8	 add	 edx, DWORD PTR _i1$[ebp]
  00163	89 55 ec	 mov	 DWORD PTR _j$[ebp], edx

; 296  : 					if (j < i1) /* got a carry */

  00166	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  00169	3b 45 f8	 cmp	 eax, DWORD PTR _i1$[ebp]
  0016c	73 09		 jae	 SHORT $LN22@floor

; 297  : 					{
; 298  : 						i0 += 1;

  0016e	8b 4d fc	 mov	 ecx, DWORD PTR _i0$[ebp]
  00171	83 c1 01	 add	 ecx, 1
  00174	89 4d fc	 mov	 DWORD PTR _i0$[ebp], ecx
$LN22@floor:

; 299  : 					}
; 300  : 					i1 = j;

  00177	8b 55 ec	 mov	 edx, DWORD PTR _j$[ebp]
  0017a	89 55 f8	 mov	 DWORD PTR _i1$[ebp], edx
$LN21@floor:

; 301  : 				}
; 302  : 			}
; 303  : 			i1 &= (~i);

  0017d	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00180	f7 d0		 not	 eax
  00182	23 45 f8	 and	 eax, DWORD PTR _i1$[ebp]
  00185	89 45 f8	 mov	 DWORD PTR _i1$[ebp], eax
$LN18@floor:

; 304  : 		}
; 305  : 	}
; 306  : 	__HI(x) = i0;

  00188	8b 4d fc	 mov	 ecx, DWORD PTR _i0$[ebp]
  0018b	89 4d 0c	 mov	 DWORD PTR _x$[ebp+4], ecx

; 307  : 	__LO(x) = i1;

  0018e	8b 55 f8	 mov	 edx, DWORD PTR _i1$[ebp]
  00191	89 55 08	 mov	 DWORD PTR _x$[ebp], edx

; 308  : 	return x;

  00194	dd 45 08	 fld	 QWORD PTR _x$[ebp]
$LN1@floor:

; 309  : } /* floor */

  00197	8b e5		 mov	 esp, ebp
  00199	5d		 pop	 ebp
  0019a	c3		 ret	 0
_floor	ENDP
_TEXT	ENDS
END
