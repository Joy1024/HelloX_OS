; Listing generated by Microsoft (R) Optimizing Compiler Version 19.13.26128.0 

	TITLE	C:\HelloX\personal\HelloX_OS\app\yeelight\hxlib\nextafter.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_nextafter
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\nextafter.c
;	COMDAT _nextafter
_TEXT	SEGMENT
_iy$ = -24						; size = 4
_ly$ = -20						; size = 4
_ix$ = -16						; size = 4
_hy$ = -12						; size = 4
_hx$ = -8						; size = 4
_lx$ = -4						; size = 4
_x$ = 8							; size = 8
_y$ = 16						; size = 8
_nextafter PROC						; COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 35   :   int hx, hy, ix, iy;
; 36   :   unsigned lx, ly;
; 37   : 
; 38   :   hx = __HI (x); /* high word of x */

  00006	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  00009	89 45 f8	 mov	 DWORD PTR _hx$[ebp], eax

; 39   :   lx = __LO (x); /* low  word of x */

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000f	89 4d fc	 mov	 DWORD PTR _lx$[ebp], ecx

; 40   :   hy = __HI (y); /* high word of y */

  00012	8b 55 14	 mov	 edx, DWORD PTR _y$[ebp+4]
  00015	89 55 f4	 mov	 DWORD PTR _hy$[ebp], edx

; 41   :   ly = __LO (y); /* low  word of y */

  00018	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0001b	89 45 ec	 mov	 DWORD PTR _ly$[ebp], eax

; 42   :   ix = hx & 0x7fffffff; /* |x| */

  0001e	8b 4d f8	 mov	 ecx, DWORD PTR _hx$[ebp]
  00021	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  00027	89 4d f0	 mov	 DWORD PTR _ix$[ebp], ecx

; 43   :   iy = hy & 0x7fffffff; /* |y| */

  0002a	8b 55 f4	 mov	 edx, DWORD PTR _hy$[ebp]
  0002d	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  00033	89 55 e8	 mov	 DWORD PTR _iy$[ebp], edx

; 44   : 
; 45   :   if (((ix >= 0x7ff00000) && ((ix - 0x7ff00000) | lx) != 0)     /* x is nan */
; 46   :       || ((iy >= 0x7ff00000) && ((iy - 0x7ff00000) | ly) != 0)) /* y is nan */

  00036	81 7d f0 00 00
	f0 7f		 cmp	 DWORD PTR _ix$[ebp], 2146435072 ; 7ff00000H
  0003d	7c 0d		 jl	 SHORT $LN4@nextafter
  0003f	8b 45 f0	 mov	 eax, DWORD PTR _ix$[ebp]
  00042	2d 00 00 f0 7f	 sub	 eax, 2146435072		; 7ff00000H
  00047	0b 45 fc	 or	 eax, DWORD PTR _lx$[ebp]
  0004a	75 17		 jne	 SHORT $LN3@nextafter
$LN4@nextafter:
  0004c	81 7d e8 00 00
	f0 7f		 cmp	 DWORD PTR _iy$[ebp], 2146435072 ; 7ff00000H
  00053	7c 19		 jl	 SHORT $LN2@nextafter
  00055	8b 4d e8	 mov	 ecx, DWORD PTR _iy$[ebp]
  00058	81 e9 00 00 f0
	7f		 sub	 ecx, 2146435072		; 7ff00000H
  0005e	0b 4d ec	 or	 ecx, DWORD PTR _ly$[ebp]
  00061	74 0b		 je	 SHORT $LN2@nextafter
$LN3@nextafter:

; 47   :   {
; 48   :     return x + y;

  00063	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00066	dc 45 10	 fadd	 QWORD PTR _y$[ebp]
  00069	e9 52 01 00 00	 jmp	 $LN1@nextafter
$LN2@nextafter:

; 49   :   }
; 50   : 
; 51   :   if (x == y)

  0006e	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00071	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  00074	da e9		 fucompp
  00076	df e0		 fnstsw	 ax
  00078	f6 c4 44	 test	 ah, 68			; 00000044H
  0007b	7a 08		 jp	 SHORT $LN5@nextafter

; 52   :   {
; 53   :     return x; /* x=y, return x */

  0007d	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00080	e9 3b 01 00 00	 jmp	 $LN1@nextafter
$LN5@nextafter:

; 54   :   }
; 55   : 
; 56   :   if ((ix | lx) == 0)

  00085	8b 55 f0	 mov	 edx, DWORD PTR _ix$[ebp]
  00088	0b 55 fc	 or	 edx, DWORD PTR _lx$[ebp]
  0008b	75 3c		 jne	 SHORT $LN8@nextafter

; 57   :   { /* x == 0 */
; 58   :     __HI (x) = hy & 0x80000000; /* return +-minsubnormal */

  0008d	8b 45 f4	 mov	 eax, DWORD PTR _hy$[ebp]
  00090	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00095	89 45 0c	 mov	 DWORD PTR _x$[ebp+4], eax

; 59   :     __LO (x) = 1;

  00098	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _x$[ebp], 1

; 60   :     y = x * x;

  0009f	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  000a2	dc 4d 08	 fmul	 QWORD PTR _x$[ebp]
  000a5	dd 5d 10	 fstp	 QWORD PTR _y$[ebp]

; 61   :     if (y == x)

  000a8	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  000ab	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  000ae	da e9		 fucompp
  000b0	df e0		 fnstsw	 ax
  000b2	f6 c4 44	 test	 ah, 68			; 00000044H
  000b5	7a 0a		 jp	 SHORT $LN7@nextafter

; 62   :     {
; 63   :       return y;

  000b7	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  000ba	e9 01 01 00 00	 jmp	 $LN1@nextafter

; 64   :     }

  000bf	eb 08		 jmp	 SHORT $LN8@nextafter
$LN7@nextafter:

; 65   :     else
; 66   :     {
; 67   :       return x; /* raise underflow flag */

  000c1	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  000c4	e9 f7 00 00 00	 jmp	 $LN1@nextafter
$LN8@nextafter:

; 68   :     }
; 69   :   }
; 70   : 
; 71   :   if (hx >= 0)

  000c9	83 7d f8 00	 cmp	 DWORD PTR _hx$[ebp], 0
  000cd	7c 48		 jl	 SHORT $LN9@nextafter

; 72   :   { /* x > 0 */
; 73   :     if (hx > hy || ((hx == hy) && (lx > ly)))

  000cf	8b 4d f8	 mov	 ecx, DWORD PTR _hx$[ebp]
  000d2	3b 4d f4	 cmp	 ecx, DWORD PTR _hy$[ebp]
  000d5	7f 10		 jg	 SHORT $LN13@nextafter
  000d7	8b 55 f8	 mov	 edx, DWORD PTR _hx$[ebp]
  000da	3b 55 f4	 cmp	 edx, DWORD PTR _hy$[ebp]
  000dd	75 22		 jne	 SHORT $LN11@nextafter
  000df	8b 45 fc	 mov	 eax, DWORD PTR _lx$[ebp]
  000e2	3b 45 ec	 cmp	 eax, DWORD PTR _ly$[ebp]
  000e5	76 1a		 jbe	 SHORT $LN11@nextafter
$LN13@nextafter:

; 74   :     { /* x > y, x -= ulp */
; 75   :       if (lx == 0)

  000e7	83 7d fc 00	 cmp	 DWORD PTR _lx$[ebp], 0
  000eb	75 09		 jne	 SHORT $LN14@nextafter

; 76   :       {
; 77   :         hx -= 1;

  000ed	8b 4d f8	 mov	 ecx, DWORD PTR _hx$[ebp]
  000f0	83 e9 01	 sub	 ecx, 1
  000f3	89 4d f8	 mov	 DWORD PTR _hx$[ebp], ecx
$LN14@nextafter:

; 78   :       }
; 79   : 
; 80   :       lx -= 1;

  000f6	8b 55 fc	 mov	 edx, DWORD PTR _lx$[ebp]
  000f9	83 ea 01	 sub	 edx, 1
  000fc	89 55 fc	 mov	 DWORD PTR _lx$[ebp], edx

; 81   :     }

  000ff	eb 14		 jmp	 SHORT $LN15@nextafter
$LN11@nextafter:

; 82   :     else
; 83   :     { /* x < y, x += ulp */
; 84   :       lx += 1;

  00101	8b 45 fc	 mov	 eax, DWORD PTR _lx$[ebp]
  00104	83 c0 01	 add	 eax, 1
  00107	89 45 fc	 mov	 DWORD PTR _lx$[ebp], eax

; 85   : 
; 86   :       if (lx == 0)

  0010a	75 09		 jne	 SHORT $LN15@nextafter

; 87   :       {
; 88   :         hx += 1;

  0010c	8b 4d f8	 mov	 ecx, DWORD PTR _hx$[ebp]
  0010f	83 c1 01	 add	 ecx, 1
  00112	89 4d f8	 mov	 DWORD PTR _hx$[ebp], ecx
$LN15@nextafter:

; 89   :       }
; 90   :     }
; 91   :   }

  00115	eb 4c		 jmp	 SHORT $LN20@nextafter
$LN9@nextafter:

; 92   :   else
; 93   :   { /* x < 0 */
; 94   :     if (hy >= 0 || hx > hy || ((hx == hy) && (lx > ly)))

  00117	83 7d f4 00	 cmp	 DWORD PTR _hy$[ebp], 0
  0011b	7d 18		 jge	 SHORT $LN18@nextafter
  0011d	8b 55 f8	 mov	 edx, DWORD PTR _hx$[ebp]
  00120	3b 55 f4	 cmp	 edx, DWORD PTR _hy$[ebp]
  00123	7f 10		 jg	 SHORT $LN18@nextafter
  00125	8b 45 f8	 mov	 eax, DWORD PTR _hx$[ebp]
  00128	3b 45 f4	 cmp	 eax, DWORD PTR _hy$[ebp]
  0012b	75 22		 jne	 SHORT $LN16@nextafter
  0012d	8b 4d fc	 mov	 ecx, DWORD PTR _lx$[ebp]
  00130	3b 4d ec	 cmp	 ecx, DWORD PTR _ly$[ebp]
  00133	76 1a		 jbe	 SHORT $LN16@nextafter
$LN18@nextafter:

; 95   :     { /* x < y, x -= ulp */
; 96   :       if (lx == 0)

  00135	83 7d fc 00	 cmp	 DWORD PTR _lx$[ebp], 0
  00139	75 09		 jne	 SHORT $LN19@nextafter

; 97   :       {
; 98   :         hx -= 1;

  0013b	8b 55 f8	 mov	 edx, DWORD PTR _hx$[ebp]
  0013e	83 ea 01	 sub	 edx, 1
  00141	89 55 f8	 mov	 DWORD PTR _hx$[ebp], edx
$LN19@nextafter:

; 99   :       }
; 100  : 
; 101  :       lx -= 1;

  00144	8b 45 fc	 mov	 eax, DWORD PTR _lx$[ebp]
  00147	83 e8 01	 sub	 eax, 1
  0014a	89 45 fc	 mov	 DWORD PTR _lx$[ebp], eax

; 102  :     }

  0014d	eb 14		 jmp	 SHORT $LN20@nextafter
$LN16@nextafter:

; 103  :     else
; 104  :     { /* x > y, x += ulp */
; 105  :       lx += 1;

  0014f	8b 4d fc	 mov	 ecx, DWORD PTR _lx$[ebp]
  00152	83 c1 01	 add	 ecx, 1
  00155	89 4d fc	 mov	 DWORD PTR _lx$[ebp], ecx

; 106  : 
; 107  :       if (lx == 0)

  00158	75 09		 jne	 SHORT $LN20@nextafter

; 108  :       {
; 109  :         hx += 1;

  0015a	8b 55 f8	 mov	 edx, DWORD PTR _hx$[ebp]
  0015d	83 c2 01	 add	 edx, 1
  00160	89 55 f8	 mov	 DWORD PTR _hx$[ebp], edx
$LN20@nextafter:

; 110  :       }
; 111  :     }
; 112  :   }
; 113  : 
; 114  :   hy = hx & 0x7ff00000;

  00163	8b 45 f8	 mov	 eax, DWORD PTR _hx$[ebp]
  00166	25 00 00 f0 7f	 and	 eax, 2146435072		; 7ff00000H
  0016b	89 45 f4	 mov	 DWORD PTR _hy$[ebp], eax

; 115  : 
; 116  :   if (hy >= 0x7ff00000)

  0016e	81 7d f4 00 00
	f0 7f		 cmp	 DWORD PTR _hy$[ebp], 2146435072 ; 7ff00000H
  00175	7c 08		 jl	 SHORT $LN21@nextafter

; 117  :   {
; 118  :     return x + x; /* overflow */

  00177	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0017a	dc 45 08	 fadd	 QWORD PTR _x$[ebp]
  0017d	eb 41		 jmp	 SHORT $LN1@nextafter
$LN21@nextafter:

; 119  :   }
; 120  : 
; 121  :   if (hy < 0x00100000)

  0017f	81 7d f4 00 00
	10 00		 cmp	 DWORD PTR _hy$[ebp], 1048576 ; 00100000H
  00186	7d 29		 jge	 SHORT $LN23@nextafter

; 122  :   { /* underflow */
; 123  :     y = x * x;

  00188	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0018b	dc 4d 08	 fmul	 QWORD PTR _x$[ebp]
  0018e	dd 5d 10	 fstp	 QWORD PTR _y$[ebp]

; 124  :     if (y != x)

  00191	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  00194	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00197	da e9		 fucompp
  00199	df e0		 fnstsw	 ax
  0019b	f6 c4 44	 test	 ah, 68			; 00000044H
  0019e	7b 11		 jnp	 SHORT $LN23@nextafter

; 125  :     { /* raise underflow flag */
; 126  :       __HI (y) = hx;

  001a0	8b 4d f8	 mov	 ecx, DWORD PTR _hx$[ebp]
  001a3	89 4d 14	 mov	 DWORD PTR _y$[ebp+4], ecx

; 127  :       __LO (y) = lx;

  001a6	8b 55 fc	 mov	 edx, DWORD PTR _lx$[ebp]
  001a9	89 55 10	 mov	 DWORD PTR _y$[ebp], edx

; 128  :       return y;

  001ac	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  001af	eb 0f		 jmp	 SHORT $LN1@nextafter
$LN23@nextafter:

; 129  :     }
; 130  :   }
; 131  : 
; 132  :   __HI (x) = hx;

  001b1	8b 45 f8	 mov	 eax, DWORD PTR _hx$[ebp]
  001b4	89 45 0c	 mov	 DWORD PTR _x$[ebp+4], eax

; 133  :   __LO (x) = lx;

  001b7	8b 4d fc	 mov	 ecx, DWORD PTR _lx$[ebp]
  001ba	89 4d 08	 mov	 DWORD PTR _x$[ebp], ecx

; 134  :   return x;

  001bd	dd 45 08	 fld	 QWORD PTR _x$[ebp]
$LN1@nextafter:

; 135  : } /* nextafter */

  001c0	8b e5		 mov	 esp, ebp
  001c2	5d		 pop	 ebp
  001c3	c3		 ret	 0
_nextafter ENDP
_TEXT	ENDS
END
