; Listing generated by Microsoft (R) Optimizing Compiler Version 19.13.26128.0 

	TITLE	C:\HelloX\personal\HelloX_OS\app\yeelight\hxlib\pow.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_bp	DQ	03ff0000000000000r		; 1
	DQ	03ff8000000000000r		; 1.5
_dp_h	DQ	00000000000000000r		; 0
	DQ	03fe2b80340000000r		; 0.584962
_dp_l	DQ	00000000000000000r		; 0
	DQ	03e4cfdeb43cfd006r		; 1.35004e-08
CONST	ENDS
PUBLIC	_pow
PUBLIC	__real@0000000000000000
PUBLIC	__real@01a56e1fc2f8f359
PUBLIC	__real@3c971547652b82fe
PUBLIC	__real@3e54ae0bf85ddf44
PUBLIC	__real@3e66376972bea4d0
PUBLIC	__real@3f11566aaf25de2c
PUBLIC	__real@3fc555555555553e
PUBLIC	__real@3fca7e284a454eef
PUBLIC	__real@3fcd864a93c9db65
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd17460a91d4101
PUBLIC	__real@3fd55555518f264d
PUBLIC	__real@3fd5555555555555
PUBLIC	__real@3fdb6db6db6fabff
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe3333333333303
PUBLIC	__real@3fe62e42fefa39ef
PUBLIC	__real@3fe62e4300000000
PUBLIC	__real@3feec709dc3a03fd
PUBLIC	__real@3feec709e0000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff7154760000000
PUBLIC	__real@3ff71547652b82fe
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@4340000000000000
PUBLIC	__real@7e37e43c8800759c
PUBLIC	__real@7ff0000000000000
PUBLIC	__real@be205c610ca86c39
PUBLIC	__real@be3e2fe0145b01f5
PUBLIC	__real@bebbbd41c5d26bf1
PUBLIC	__real@bf66c16c16bebd93
PUBLIC	__real@bff0000000000000
EXTRN	_sqrt:PROC
EXTRN	_fabs:PROC
EXTRN	_scalbn:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bf66c16c16bebd93
CONST	SEGMENT
__real@bf66c16c16bebd93 DQ 0bf66c16c16bebd93r	; -0.00277778
CONST	ENDS
;	COMDAT __real@bebbbd41c5d26bf1
CONST	SEGMENT
__real@bebbbd41c5d26bf1 DQ 0bebbbd41c5d26bf1r	; -1.65339e-06
CONST	ENDS
;	COMDAT __real@be3e2fe0145b01f5
CONST	SEGMENT
__real@be3e2fe0145b01f5 DQ 0be3e2fe0145b01f5r	; -7.02846e-09
CONST	ENDS
;	COMDAT __real@be205c610ca86c39
CONST	SEGMENT
__real@be205c610ca86c39 DQ 0be205c610ca86c39r	; -1.90465e-09
CONST	ENDS
;	COMDAT __real@7ff0000000000000
CONST	SEGMENT
__real@7ff0000000000000 DQ 07ff0000000000000r	; inf
CONST	ENDS
;	COMDAT __real@7e37e43c8800759c
CONST	SEGMENT
__real@7e37e43c8800759c DQ 07e37e43c8800759cr	; 1e+300
CONST	ENDS
;	COMDAT __real@4340000000000000
CONST	SEGMENT
__real@4340000000000000 DQ 04340000000000000r	; 9.0072e+15
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff71547652b82fe
CONST	SEGMENT
__real@3ff71547652b82fe DQ 03ff71547652b82fer	; 1.4427
CONST	ENDS
;	COMDAT __real@3ff7154760000000
CONST	SEGMENT
__real@3ff7154760000000 DQ 03ff7154760000000r	; 1.4427
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feec709e0000000
CONST	SEGMENT
__real@3feec709e0000000 DQ 03feec709e0000000r	; 0.961797
CONST	ENDS
;	COMDAT __real@3feec709dc3a03fd
CONST	SEGMENT
__real@3feec709dc3a03fd DQ 03feec709dc3a03fdr	; 0.961797
CONST	ENDS
;	COMDAT __real@3fe62e4300000000
CONST	SEGMENT
__real@3fe62e4300000000 DQ 03fe62e4300000000r	; 0.693147
CONST	ENDS
;	COMDAT __real@3fe62e42fefa39ef
CONST	SEGMENT
__real@3fe62e42fefa39ef DQ 03fe62e42fefa39efr	; 0.693147
CONST	ENDS
;	COMDAT __real@3fe3333333333303
CONST	SEGMENT
__real@3fe3333333333303 DQ 03fe3333333333303r	; 0.6
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fdb6db6db6fabff
CONST	SEGMENT
__real@3fdb6db6db6fabff DQ 03fdb6db6db6fabffr	; 0.428571
CONST	ENDS
;	COMDAT __real@3fd5555555555555
CONST	SEGMENT
__real@3fd5555555555555 DQ 03fd5555555555555r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd55555518f264d
CONST	SEGMENT
__real@3fd55555518f264d DQ 03fd55555518f264dr	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd17460a91d4101
CONST	SEGMENT
__real@3fd17460a91d4101 DQ 03fd17460a91d4101r	; 0.272728
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fcd864a93c9db65
CONST	SEGMENT
__real@3fcd864a93c9db65 DQ 03fcd864a93c9db65r	; 0.230661
CONST	ENDS
;	COMDAT __real@3fca7e284a454eef
CONST	SEGMENT
__real@3fca7e284a454eef DQ 03fca7e284a454eefr	; 0.206975
CONST	ENDS
;	COMDAT __real@3fc555555555553e
CONST	SEGMENT
__real@3fc555555555553e DQ 03fc555555555553er	; 0.166667
CONST	ENDS
;	COMDAT __real@3f11566aaf25de2c
CONST	SEGMENT
__real@3f11566aaf25de2c DQ 03f11566aaf25de2cr	; 6.61376e-05
CONST	ENDS
;	COMDAT __real@3e66376972bea4d0
CONST	SEGMENT
__real@3e66376972bea4d0 DQ 03e66376972bea4d0r	; 4.13814e-08
CONST	ENDS
;	COMDAT __real@3e54ae0bf85ddf44
CONST	SEGMENT
__real@3e54ae0bf85ddf44 DQ 03e54ae0bf85ddf44r	; 1.92596e-08
CONST	ENDS
;	COMDAT __real@3c971547652b82fe
CONST	SEGMENT
__real@3c971547652b82fe DQ 03c971547652b82fer	; 8.00857e-17
CONST	ENDS
;	COMDAT __real@01a56e1fc2f8f359
CONST	SEGMENT
__real@01a56e1fc2f8f359 DQ 001a56e1fc2f8f359r	; 1e-300
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\pow.c
;	COMDAT _pow
_TEXT	SEGMENT
_t2$ = -260						; size = 8
_z_l$ = -252						; size = 8
_z_h$ = -244						; size = 8
_s_l$1 = -236						; size = 8
tv205 = -228						; size = 8
tv198 = -220						; size = 8
tv191 = -212						; size = 8
tv188 = -204						; size = 8
tv143 = -196						; size = 8
tv140 = -188						; size = 8
_y1$ = -180						; size = 8
_t_l$2 = -172						; size = 8
_w$ = -164						; size = 8
_ss$3 = -156						; size = 8
_r$ = -148						; size = 8
_p_l$ = -140						; size = 8
_s_h$4 = -132						; size = 8
_t_h$5 = -124						; size = 8
_ax$ = -116						; size = 8
_lx$ = -108						; size = 4
_t1$ = -104						; size = 8
_s2$6 = -96						; size = 8
_s$ = -88						; size = 8
_v$ = -80						; size = 8
_u$ = -72						; size = 8
_i$ = -64						; size = 4
_p_h$ = -60						; size = 8
_hx$ = -52						; size = 4
_ly$ = -48						; size = 4
_yisint$ = -44						; size = 4
_t$ = -40						; size = 8
_hy$ = -32						; size = 4
_iy$ = -28						; size = 4
_z$ = -24						; size = 8
_k$ = -16						; size = 4
_n$ = -12						; size = 4
_j$ = -8						; size = 4
_ix$ = -4						; size = 4
_x$ = 8							; size = 8
_y$ = 16						; size = 8
_pow	PROC						; COMDAT

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H

; 124  :   double z, ax, z_h, z_l, p_h, p_l;
; 125  :   double y1, t1, t2, r, s, t, u, v, w;
; 126  :   int i, j, k, yisint, n;
; 127  :   int hx, hy, ix, iy;
; 128  :   unsigned lx, ly;
; 129  : 
; 130  :   hx = __HI (x);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  0000c	89 45 cc	 mov	 DWORD PTR _hx$[ebp], eax

; 131  :   lx = __LO (x);

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00012	89 4d 94	 mov	 DWORD PTR _lx$[ebp], ecx

; 132  :   hy = __HI (y);

  00015	8b 55 14	 mov	 edx, DWORD PTR _y$[ebp+4]
  00018	89 55 e0	 mov	 DWORD PTR _hy$[ebp], edx

; 133  :   ly = __LO (y);

  0001b	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0001e	89 45 d0	 mov	 DWORD PTR _ly$[ebp], eax

; 134  :   ix = hx & 0x7fffffff;

  00021	8b 4d cc	 mov	 ecx, DWORD PTR _hx$[ebp]
  00024	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  0002a	89 4d fc	 mov	 DWORD PTR _ix$[ebp], ecx

; 135  :   iy = hy & 0x7fffffff;

  0002d	8b 55 e0	 mov	 edx, DWORD PTR _hy$[ebp]
  00030	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  00036	89 55 e4	 mov	 DWORD PTR _iy$[ebp], edx

; 136  : 
; 137  :   /* x == one: 1**y = 1 */
; 138  :   if (((hx - 0x3ff00000) | lx) == 0)

  00039	8b 45 cc	 mov	 eax, DWORD PTR _hx$[ebp]
  0003c	2d 00 00 f0 3f	 sub	 eax, 1072693248		; 3ff00000H
  00041	0b 45 94	 or	 eax, DWORD PTR _lx$[ebp]
  00044	75 07		 jne	 SHORT $LN2@pow

; 139  :   {
; 140  :     return one;

  00046	d9 e8		 fld1
  00048	e9 7f 09 00 00	 jmp	 $LN1@pow
$LN2@pow:

; 141  :   }
; 142  : 
; 143  :   /* y == zero: x**0 = 1 */
; 144  :   if ((iy | ly) == 0)

  0004d	8b 4d e4	 mov	 ecx, DWORD PTR _iy$[ebp]
  00050	0b 4d d0	 or	 ecx, DWORD PTR _ly$[ebp]
  00053	75 07		 jne	 SHORT $LN3@pow

; 145  :   {
; 146  :     return one;

  00055	d9 e8		 fld1
  00057	e9 70 09 00 00	 jmp	 $LN1@pow
$LN3@pow:

; 147  :   }
; 148  : 
; 149  :   /* +-NaN return x + y */
; 150  :   if (ix > 0x7ff00000 || ((ix == 0x7ff00000) && (lx != 0)) || iy > 0x7ff00000 || ((iy == 0x7ff00000) && (ly != 0)))

  0005c	81 7d fc 00 00
	f0 7f		 cmp	 DWORD PTR _ix$[ebp], 2146435072 ; 7ff00000H
  00063	7f 27		 jg	 SHORT $LN5@pow
  00065	81 7d fc 00 00
	f0 7f		 cmp	 DWORD PTR _ix$[ebp], 2146435072 ; 7ff00000H
  0006c	75 06		 jne	 SHORT $LN6@pow
  0006e	83 7d 94 00	 cmp	 DWORD PTR _lx$[ebp], 0
  00072	75 18		 jne	 SHORT $LN5@pow
$LN6@pow:
  00074	81 7d e4 00 00
	f0 7f		 cmp	 DWORD PTR _iy$[ebp], 2146435072 ; 7ff00000H
  0007b	7f 0f		 jg	 SHORT $LN5@pow
  0007d	81 7d e4 00 00
	f0 7f		 cmp	 DWORD PTR _iy$[ebp], 2146435072 ; 7ff00000H
  00084	75 11		 jne	 SHORT $LN4@pow
  00086	83 7d d0 00	 cmp	 DWORD PTR _ly$[ebp], 0
  0008a	74 0b		 je	 SHORT $LN4@pow
$LN5@pow:

; 151  :   {
; 152  :     return x + y;

  0008c	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0008f	dc 45 10	 fadd	 QWORD PTR _y$[ebp]
  00092	e9 35 09 00 00	 jmp	 $LN1@pow
$LN4@pow:

; 153  :   }
; 154  : 
; 155  :   /* determine if y is an odd int when x < 0
; 156  :    * yisint = 0 ... y is not an integer
; 157  :    * yisint = 1 ... y is an odd int
; 158  :    * yisint = 2 ... y is an even int
; 159  :    */
; 160  :   yisint = 0;

  00097	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _yisint$[ebp], 0

; 161  :   if (hx < 0)

  0009e	83 7d cc 00	 cmp	 DWORD PTR _hx$[ebp], 0
  000a2	0f 8d a3 00 00
	00		 jge	 $LN15@pow

; 162  :   {
; 163  :     if (iy >= 0x43400000) /* even integer y */

  000a8	81 7d e4 00 00
	40 43		 cmp	 DWORD PTR _iy$[ebp], 1128267776 ; 43400000H
  000af	7c 0c		 jl	 SHORT $LN8@pow

; 164  :     {
; 165  :       yisint = 2;

  000b1	c7 45 d4 02 00
	00 00		 mov	 DWORD PTR _yisint$[ebp], 2

; 166  :     }

  000b8	e9 8e 00 00 00	 jmp	 $LN15@pow
$LN8@pow:

; 167  :     else if (iy >= 0x3ff00000)

  000bd	81 7d e4 00 00
	f0 3f		 cmp	 DWORD PTR _iy$[ebp], 1072693248 ; 3ff00000H
  000c4	0f 8c 81 00 00
	00		 jl	 $LN15@pow

; 168  :     {
; 169  :       k = (iy >> 20) - 0x3ff; /* exponent */

  000ca	8b 55 e4	 mov	 edx, DWORD PTR _iy$[ebp]
  000cd	c1 fa 14	 sar	 edx, 20			; 00000014H
  000d0	81 ea ff 03 00
	00		 sub	 edx, 1023		; 000003ffH
  000d6	89 55 f0	 mov	 DWORD PTR _k$[ebp], edx

; 170  :       if (k > 20)

  000d9	83 7d f0 14	 cmp	 DWORD PTR _k$[ebp], 20	; 00000014H
  000dd	7e 34		 jle	 SHORT $LN11@pow

; 171  :       {
; 172  :         j = ly >> (52 - k);

  000df	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  000e4	2b 4d f0	 sub	 ecx, DWORD PTR _k$[ebp]
  000e7	8b 45 d0	 mov	 eax, DWORD PTR _ly$[ebp]
  000ea	d3 e8		 shr	 eax, cl
  000ec	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax

; 173  :         if ((j << (52 - k)) == ly)

  000ef	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  000f4	2b 4d f0	 sub	 ecx, DWORD PTR _k$[ebp]
  000f7	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  000fa	d3 e2		 shl	 edx, cl
  000fc	3b 55 d0	 cmp	 edx, DWORD PTR _ly$[ebp]
  000ff	75 10		 jne	 SHORT $LN13@pow

; 174  :         {
; 175  :           yisint = 2 - (j & 1);

  00101	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00104	83 e0 01	 and	 eax, 1
  00107	b9 02 00 00 00	 mov	 ecx, 2
  0010c	2b c8		 sub	 ecx, eax
  0010e	89 4d d4	 mov	 DWORD PTR _yisint$[ebp], ecx
$LN13@pow:

; 176  :         }
; 177  :       }

  00111	eb 38		 jmp	 SHORT $LN15@pow
$LN11@pow:

; 178  :       else if (ly == 0)

  00113	83 7d d0 00	 cmp	 DWORD PTR _ly$[ebp], 0
  00117	75 32		 jne	 SHORT $LN15@pow

; 179  :       {
; 180  :         j = iy >> (20 - k);

  00119	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0011e	2b 4d f0	 sub	 ecx, DWORD PTR _k$[ebp]
  00121	8b 55 e4	 mov	 edx, DWORD PTR _iy$[ebp]
  00124	d3 fa		 sar	 edx, cl
  00126	89 55 f8	 mov	 DWORD PTR _j$[ebp], edx

; 181  :         if ((j << (20 - k)) == iy)

  00129	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0012e	2b 4d f0	 sub	 ecx, DWORD PTR _k$[ebp]
  00131	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00134	d3 e0		 shl	 eax, cl
  00136	3b 45 e4	 cmp	 eax, DWORD PTR _iy$[ebp]
  00139	75 10		 jne	 SHORT $LN15@pow

; 182  :         {
; 183  :           yisint = 2 - (j & 1);

  0013b	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0013e	83 e1 01	 and	 ecx, 1
  00141	ba 02 00 00 00	 mov	 edx, 2
  00146	2b d1		 sub	 edx, ecx
  00148	89 55 d4	 mov	 DWORD PTR _yisint$[ebp], edx
$LN15@pow:

; 184  :         }
; 185  :       }
; 186  :     }
; 187  :   }
; 188  : 
; 189  :   /* special value of y */
; 190  :   if (ly == 0)

  0014b	83 7d d0 00	 cmp	 DWORD PTR _ly$[ebp], 0
  0014f	0f 85 d0 00 00
	00		 jne	 $LN27@pow

; 191  :   {
; 192  :     if (iy == 0x7ff00000) /* y is +-inf */

  00155	81 7d e4 00 00
	f0 7f		 cmp	 DWORD PTR _iy$[ebp], 2146435072 ; 7ff00000H
  0015c	75 6b		 jne	 SHORT $LN21@pow

; 193  :     {
; 194  :       if (((ix - 0x3ff00000) | lx) == 0) /* +-1**+-inf is 1 */

  0015e	8b 45 fc	 mov	 eax, DWORD PTR _ix$[ebp]
  00161	2d 00 00 f0 3f	 sub	 eax, 1072693248		; 3ff00000H
  00166	0b 45 94	 or	 eax, DWORD PTR _lx$[ebp]
  00169	75 09		 jne	 SHORT $LN18@pow

; 195  :       {
; 196  :         return one;

  0016b	d9 e8		 fld1
  0016d	e9 5a 08 00 00	 jmp	 $LN1@pow

; 197  :       }

  00172	eb 55		 jmp	 SHORT $LN21@pow
$LN18@pow:

; 198  :       else if (ix >= 0x3ff00000) /* (|x|>1)**+-inf = inf,0 */

  00174	81 7d fc 00 00
	f0 3f		 cmp	 DWORD PTR _ix$[ebp], 1072693248 ; 3ff00000H
  0017b	7c 26		 jl	 SHORT $LN20@pow

; 199  :       {
; 200  :         return (hy >= 0) ? y : zero;

  0017d	83 7d e0 00	 cmp	 DWORD PTR _hy$[ebp], 0
  00181	7c 0b		 jl	 SHORT $LN64@pow
  00183	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  00186	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv140[ebp]
  0018c	eb 08		 jmp	 SHORT $LN65@pow
$LN64@pow:
  0018e	d9 ee		 fldz
  00190	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv140[ebp]
$LN65@pow:
  00196	dd 85 44 ff ff
	ff		 fld	 QWORD PTR tv140[ebp]
  0019c	e9 2b 08 00 00	 jmp	 $LN1@pow

; 201  :       }

  001a1	eb 26		 jmp	 SHORT $LN21@pow
$LN20@pow:

; 202  :       else /* (|x|<1)**-,+inf = inf,0 */
; 203  :       {
; 204  :         return (hy < 0) ? -y : zero;

  001a3	83 7d e0 00	 cmp	 DWORD PTR _hy$[ebp], 0
  001a7	7d 0d		 jge	 SHORT $LN66@pow
  001a9	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  001ac	d9 e0		 fchs
  001ae	dd 9d 3c ff ff
	ff		 fstp	 QWORD PTR tv143[ebp]
  001b4	eb 08		 jmp	 SHORT $LN67@pow
$LN66@pow:
  001b6	d9 ee		 fldz
  001b8	dd 9d 3c ff ff
	ff		 fstp	 QWORD PTR tv143[ebp]
$LN67@pow:
  001be	dd 85 3c ff ff
	ff		 fld	 QWORD PTR tv143[ebp]
  001c4	e9 03 08 00 00	 jmp	 $LN1@pow
$LN21@pow:

; 205  :       }
; 206  :     }
; 207  :     if (iy == 0x3ff00000) /* y is +-1 */

  001c9	81 7d e4 00 00
	f0 3f		 cmp	 DWORD PTR _iy$[ebp], 1072693248 ; 3ff00000H
  001d0	75 1a		 jne	 SHORT $LN24@pow

; 208  :     {
; 209  :       if (hy < 0)

  001d2	83 7d e0 00	 cmp	 DWORD PTR _hy$[ebp], 0
  001d6	7d 0c		 jge	 SHORT $LN23@pow

; 210  :       {
; 211  :         return one / x;

  001d8	d9 e8		 fld1
  001da	dc 75 08	 fdiv	 QWORD PTR _x$[ebp]
  001dd	e9 ea 07 00 00	 jmp	 $LN1@pow

; 212  :       }

  001e2	eb 08		 jmp	 SHORT $LN24@pow
$LN23@pow:

; 213  :       else
; 214  :       {
; 215  :         return x;

  001e4	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  001e7	e9 e0 07 00 00	 jmp	 $LN1@pow
$LN24@pow:

; 216  :       }
; 217  :     }
; 218  :     if (hy == 0x40000000) /* y is 2 */

  001ec	81 7d e0 00 00
	00 40		 cmp	 DWORD PTR _hy$[ebp], 1073741824 ; 40000000H
  001f3	75 0b		 jne	 SHORT $LN25@pow

; 219  :     {
; 220  :       return x * x;

  001f5	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  001f8	dc 4d 08	 fmul	 QWORD PTR _x$[ebp]
  001fb	e9 cc 07 00 00	 jmp	 $LN1@pow
$LN25@pow:

; 221  :     }
; 222  :     if (hy == 0x3fe00000) /* y is 0.5 */

  00200	81 7d e0 00 00
	e0 3f		 cmp	 DWORD PTR _hy$[ebp], 1071644672 ; 3fe00000H
  00207	75 1c		 jne	 SHORT $LN27@pow

; 223  :     {
; 224  :       if (hx >= 0) /* x >= +0 */

  00209	83 7d cc 00	 cmp	 DWORD PTR _hx$[ebp], 0
  0020d	7c 16		 jl	 SHORT $LN27@pow

; 225  :       {
; 226  :         return sqrt (x);

  0020f	83 ec 08	 sub	 esp, 8
  00212	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00215	dd 1c 24	 fstp	 QWORD PTR [esp]
  00218	e8 00 00 00 00	 call	 _sqrt
  0021d	83 c4 08	 add	 esp, 8
  00220	e9 a7 07 00 00	 jmp	 $LN1@pow
$LN27@pow:

; 227  :       }
; 228  :     }
; 229  :   }
; 230  : 
; 231  :   ax = fabs (x);

  00225	83 ec 08	 sub	 esp, 8
  00228	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0022b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0022e	e8 00 00 00 00	 call	 _fabs
  00233	83 c4 08	 add	 esp, 8
  00236	dd 5d 8c	 fstp	 QWORD PTR _ax$[ebp]

; 232  :   /* special value of x */
; 233  :   if (lx == 0)

  00239	83 7d 94 00	 cmp	 DWORD PTR _lx$[ebp], 0
  0023d	75 69		 jne	 SHORT $LN29@pow

; 234  :   {
; 235  :     if (ix == 0x7ff00000 || ix == 0 || ix == 0x3ff00000)

  0023f	81 7d fc 00 00
	f0 7f		 cmp	 DWORD PTR _ix$[ebp], 2146435072 ; 7ff00000H
  00246	74 0f		 je	 SHORT $LN30@pow
  00248	83 7d fc 00	 cmp	 DWORD PTR _ix$[ebp], 0
  0024c	74 09		 je	 SHORT $LN30@pow
  0024e	81 7d fc 00 00
	f0 3f		 cmp	 DWORD PTR _ix$[ebp], 1072693248 ; 3ff00000H
  00255	75 51		 jne	 SHORT $LN29@pow
$LN30@pow:

; 236  :     {
; 237  :       z = ax; /* x is +-0,+-inf,+-1 */

  00257	dd 45 8c	 fld	 QWORD PTR _ax$[ebp]
  0025a	dd 5d e8	 fstp	 QWORD PTR _z$[ebp]

; 238  :       if (hy < 0)

  0025d	83 7d e0 00	 cmp	 DWORD PTR _hy$[ebp], 0
  00261	7d 08		 jge	 SHORT $LN31@pow

; 239  :       {
; 240  :         z = one / z; /* z = (1 / |x|) */

  00263	d9 e8		 fld1
  00265	dc 75 e8	 fdiv	 QWORD PTR _z$[ebp]
  00268	dd 5d e8	 fstp	 QWORD PTR _z$[ebp]
$LN31@pow:

; 241  :       }
; 242  :       if (hx < 0)

  0026b	83 7d cc 00	 cmp	 DWORD PTR _hx$[ebp], 0
  0026f	7d 2f		 jge	 SHORT $LN35@pow

; 243  :       {
; 244  :         if (((ix - 0x3ff00000) | yisint) == 0)

  00271	8b 4d fc	 mov	 ecx, DWORD PTR _ix$[ebp]
  00274	81 e9 00 00 f0
	3f		 sub	 ecx, 1072693248		; 3ff00000H
  0027a	0b 4d d4	 or	 ecx, DWORD PTR _yisint$[ebp]
  0027d	75 13		 jne	 SHORT $LN33@pow

; 245  :         {
; 246  :           z = (z - z) / (z - z); /* (-1)**non-int is NaN */

  0027f	dd 45 e8	 fld	 QWORD PTR _z$[ebp]
  00282	dc 65 e8	 fsub	 QWORD PTR _z$[ebp]
  00285	dd 45 e8	 fld	 QWORD PTR _z$[ebp]
  00288	dc 65 e8	 fsub	 QWORD PTR _z$[ebp]
  0028b	de f9		 fdivp	 ST(1), ST(0)
  0028d	dd 5d e8	 fstp	 QWORD PTR _z$[ebp]

; 247  :         }

  00290	eb 0e		 jmp	 SHORT $LN35@pow
$LN33@pow:

; 248  :         else if (yisint == 1)

  00292	83 7d d4 01	 cmp	 DWORD PTR _yisint$[ebp], 1
  00296	75 08		 jne	 SHORT $LN35@pow

; 249  :         {
; 250  :           z = -z; /* (x<0)**odd = -(|x|**odd) */

  00298	dd 45 e8	 fld	 QWORD PTR _z$[ebp]
  0029b	d9 e0		 fchs
  0029d	dd 5d e8	 fstp	 QWORD PTR _z$[ebp]
$LN35@pow:

; 251  :         }
; 252  :       }
; 253  :       return z;

  002a0	dd 45 e8	 fld	 QWORD PTR _z$[ebp]
  002a3	e9 24 07 00 00	 jmp	 $LN1@pow
$LN29@pow:

; 254  :     }
; 255  :   }
; 256  : 
; 257  :   n = (hx >> 31) + 1;

  002a8	8b 55 cc	 mov	 edx, DWORD PTR _hx$[ebp]
  002ab	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  002ae	83 c2 01	 add	 edx, 1
  002b1	89 55 f4	 mov	 DWORD PTR _n$[ebp], edx

; 258  : 
; 259  :   /* (x<0)**(non-int) is NaN */
; 260  :   if ((n | yisint) == 0)

  002b4	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  002b7	0b 45 d4	 or	 eax, DWORD PTR _yisint$[ebp]
  002ba	75 13		 jne	 SHORT $LN36@pow

; 261  :   {
; 262  :     return (x - x) / (x - x);

  002bc	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  002bf	dc 65 08	 fsub	 QWORD PTR _x$[ebp]
  002c2	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  002c5	dc 65 08	 fsub	 QWORD PTR _x$[ebp]
  002c8	de f9		 fdivp	 ST(1), ST(0)
  002ca	e9 fd 06 00 00	 jmp	 $LN1@pow
$LN36@pow:

; 263  :   }
; 264  : 
; 265  :   s = one; /* s (sign of result -ve**odd) = -1 else = 1 */

  002cf	d9 e8		 fld1
  002d1	dd 5d a8	 fstp	 QWORD PTR _s$[ebp]

; 266  :   if ((n | (yisint - 1)) == 0)

  002d4	8b 4d d4	 mov	 ecx, DWORD PTR _yisint$[ebp]
  002d7	83 e9 01	 sub	 ecx, 1
  002da	0b 4d f4	 or	 ecx, DWORD PTR _n$[ebp]
  002dd	75 09		 jne	 SHORT $LN37@pow

; 267  :   {
; 268  :     s = -one; /* (-ve)**(odd int) */

  002df	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@bff0000000000000
  002e5	dd 5d a8	 fstp	 QWORD PTR _s$[ebp]
$LN37@pow:

; 269  :   }
; 270  : 
; 271  :   /* |y| is huge */
; 272  :   if (iy > 0x41e00000) /* if |y| > 2**31 */

  002e8	81 7d e4 00 00
	e0 41		 cmp	 DWORD PTR _iy$[ebp], 1105199104 ; 41e00000H
  002ef	0f 8e 71 01 00
	00		 jle	 $LN38@pow

; 273  :   {
; 274  :     if (iy > 0x43f00000) /* if |y| > 2**64, must o/uflow */

  002f5	81 7d e4 00 00
	f0 43		 cmp	 DWORD PTR _iy$[ebp], 1139802112 ; 43f00000H
  002fc	7e 60		 jle	 SHORT $LN42@pow

; 275  :     {
; 276  :       if (ix <= 0x3fefffff)

  002fe	81 7d fc ff ff
	ef 3f		 cmp	 DWORD PTR _ix$[ebp], 1072693247 ; 3fefffffH
  00305	7f 27		 jg	 SHORT $LN41@pow

; 277  :       {
; 278  :         return (hy < 0) ? huge * huge : tiny * tiny;

  00307	83 7d e0 00	 cmp	 DWORD PTR _hy$[ebp], 0
  0030b	7d 0e		 jge	 SHORT $LN68@pow
  0030d	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@7ff0000000000000
  00313	dd 9d 34 ff ff
	ff		 fstp	 QWORD PTR tv188[ebp]
  00319	eb 08		 jmp	 SHORT $LN69@pow
$LN68@pow:
  0031b	d9 ee		 fldz
  0031d	dd 9d 34 ff ff
	ff		 fstp	 QWORD PTR tv188[ebp]
$LN69@pow:
  00323	dd 85 34 ff ff
	ff		 fld	 QWORD PTR tv188[ebp]
  00329	e9 9e 06 00 00	 jmp	 $LN1@pow
$LN41@pow:

; 279  :       }
; 280  :       if (ix >= 0x3ff00000)

  0032e	81 7d fc 00 00
	f0 3f		 cmp	 DWORD PTR _ix$[ebp], 1072693248 ; 3ff00000H
  00335	7c 27		 jl	 SHORT $LN42@pow

; 281  :       {
; 282  :         return (hy > 0) ? huge * huge : tiny * tiny;

  00337	83 7d e0 00	 cmp	 DWORD PTR _hy$[ebp], 0
  0033b	7e 0e		 jle	 SHORT $LN70@pow
  0033d	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@7ff0000000000000
  00343	dd 9d 2c ff ff
	ff		 fstp	 QWORD PTR tv191[ebp]
  00349	eb 08		 jmp	 SHORT $LN71@pow
$LN70@pow:
  0034b	d9 ee		 fldz
  0034d	dd 9d 2c ff ff
	ff		 fstp	 QWORD PTR tv191[ebp]
$LN71@pow:
  00353	dd 85 2c ff ff
	ff		 fld	 QWORD PTR tv191[ebp]
  00359	e9 6e 06 00 00	 jmp	 $LN1@pow
$LN42@pow:

; 283  :       }
; 284  :     }
; 285  :     /* over/underflow if x is not close to one */
; 286  :     if (ix < 0x3fefffff)

  0035e	81 7d fc ff ff
	ef 3f		 cmp	 DWORD PTR _ix$[ebp], 1072693247 ; 3fefffffH
  00365	7d 3d		 jge	 SHORT $LN43@pow

; 287  :     {
; 288  :       return (hy < 0) ? s * huge * huge : s * tiny * tiny;

  00367	83 7d e0 00	 cmp	 DWORD PTR _hy$[ebp], 0
  0036b	7d 17		 jge	 SHORT $LN72@pow
  0036d	dd 45 a8	 fld	 QWORD PTR _s$[ebp]
  00370	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@7e37e43c8800759c
  00376	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@7e37e43c8800759c
  0037c	dd 9d 24 ff ff
	ff		 fstp	 QWORD PTR tv198[ebp]
  00382	eb 15		 jmp	 SHORT $LN73@pow
$LN72@pow:
  00384	dd 45 a8	 fld	 QWORD PTR _s$[ebp]
  00387	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@01a56e1fc2f8f359
  0038d	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@01a56e1fc2f8f359
  00393	dd 9d 24 ff ff
	ff		 fstp	 QWORD PTR tv198[ebp]
$LN73@pow:
  00399	dd 85 24 ff ff
	ff		 fld	 QWORD PTR tv198[ebp]
  0039f	e9 28 06 00 00	 jmp	 $LN1@pow
$LN43@pow:

; 289  :     }
; 290  :     if (ix > 0x3ff00000)

  003a4	81 7d fc 00 00
	f0 3f		 cmp	 DWORD PTR _ix$[ebp], 1072693248 ; 3ff00000H
  003ab	7e 3d		 jle	 SHORT $LN44@pow

; 291  :     {
; 292  :       return (hy > 0) ? s * huge * huge : s * tiny * tiny;

  003ad	83 7d e0 00	 cmp	 DWORD PTR _hy$[ebp], 0
  003b1	7e 17		 jle	 SHORT $LN74@pow
  003b3	dd 45 a8	 fld	 QWORD PTR _s$[ebp]
  003b6	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@7e37e43c8800759c
  003bc	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@7e37e43c8800759c
  003c2	dd 9d 1c ff ff
	ff		 fstp	 QWORD PTR tv205[ebp]
  003c8	eb 15		 jmp	 SHORT $LN75@pow
$LN74@pow:
  003ca	dd 45 a8	 fld	 QWORD PTR _s$[ebp]
  003cd	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@01a56e1fc2f8f359
  003d3	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@01a56e1fc2f8f359
  003d9	dd 9d 1c ff ff
	ff		 fstp	 QWORD PTR tv205[ebp]
$LN75@pow:
  003df	dd 85 1c ff ff
	ff		 fld	 QWORD PTR tv205[ebp]
  003e5	e9 e2 05 00 00	 jmp	 $LN1@pow
$LN44@pow:

; 293  :     }
; 294  :     /* now |1 - x| is tiny <= 2**-20, suffice to compute
; 295  :        log(x) by x - x^2 / 2 + x^3 / 3 - x^4 / 4 */
; 296  :     t = ax - one; /* t has 20 trailing zeros */

  003ea	dd 45 8c	 fld	 QWORD PTR _ax$[ebp]
  003ed	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  003f3	dd 5d d8	 fstp	 QWORD PTR _t$[ebp]

; 297  :     w = (t * t) * (0.5 - t * (0.3333333333333333333333 - t * 0.25));

  003f6	dd 45 d8	 fld	 QWORD PTR _t$[ebp]
  003f9	dc 4d d8	 fmul	 QWORD PTR _t$[ebp]
  003fc	dd 45 d8	 fld	 QWORD PTR _t$[ebp]
  003ff	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fd0000000000000
  00405	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@3fd5555555555555
  0040b	dc 4d d8	 fmul	 QWORD PTR _t$[ebp]
  0040e	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@3fe0000000000000
  00414	de c9		 fmulp	 ST(1), ST(0)
  00416	dd 9d 5c ff ff
	ff		 fstp	 QWORD PTR _w$[ebp]

; 298  :     u = ivln2_h * t; /* ivln2_h has 21 sig. bits */

  0041c	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3ff7154760000000
  00422	dc 4d d8	 fmul	 QWORD PTR _t$[ebp]
  00425	dd 5d b8	 fstp	 QWORD PTR _u$[ebp]

; 299  :     v = t * ivln2_l - w * ivln2;

  00428	dd 45 d8	 fld	 QWORD PTR _t$[ebp]
  0042b	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3e54ae0bf85ddf44
  00431	dd 85 5c ff ff
	ff		 fld	 QWORD PTR _w$[ebp]
  00437	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3ff71547652b82fe
  0043d	de e9		 fsubp	 ST(1), ST(0)
  0043f	dd 5d b0	 fstp	 QWORD PTR _v$[ebp]

; 300  :     t1 = u + v;

  00442	dd 45 b8	 fld	 QWORD PTR _u$[ebp]
  00445	dc 45 b0	 fadd	 QWORD PTR _v$[ebp]
  00448	dd 5d 98	 fstp	 QWORD PTR _t1$[ebp]

; 301  :     __LO (t1) = 0;

  0044b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _t1$[ebp], 0

; 302  :     t2 = v - (t1 - u);

  00452	dd 45 98	 fld	 QWORD PTR _t1$[ebp]
  00455	dc 65 b8	 fsub	 QWORD PTR _u$[ebp]
  00458	dc 6d b0	 fsubr	 QWORD PTR _v$[ebp]
  0045b	dd 9d fc fe ff
	ff		 fstp	 QWORD PTR _t2$[ebp]

; 303  :   }

  00461	e9 af 02 00 00	 jmp	 $LN39@pow
$LN38@pow:

; 304  :   else
; 305  :   {
; 306  :     double ss, s2, s_h, s_l, t_h, t_l;
; 307  : 
; 308  :     n = 0;

  00466	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0

; 309  :     /* take care subnormal number */
; 310  :     if (ix < 0x00100000)

  0046d	81 7d fc 00 00
	10 00		 cmp	 DWORD PTR _ix$[ebp], 1048576 ; 00100000H
  00474	7d 1b		 jge	 SHORT $LN45@pow

; 311  :     {
; 312  :       ax *= two53;

  00476	dd 45 8c	 fld	 QWORD PTR _ax$[ebp]
  00479	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4340000000000000
  0047f	dd 5d 8c	 fstp	 QWORD PTR _ax$[ebp]

; 313  :       n -= 53;

  00482	8b 55 f4	 mov	 edx, DWORD PTR _n$[ebp]
  00485	83 ea 35	 sub	 edx, 53			; 00000035H
  00488	89 55 f4	 mov	 DWORD PTR _n$[ebp], edx

; 314  :       ix = __HI (ax);

  0048b	8b 45 90	 mov	 eax, DWORD PTR _ax$[ebp+4]
  0048e	89 45 fc	 mov	 DWORD PTR _ix$[ebp], eax
$LN45@pow:

; 315  :     }
; 316  :     n += ((ix) >> 20) - 0x3ff;

  00491	8b 4d fc	 mov	 ecx, DWORD PTR _ix$[ebp]
  00494	c1 f9 14	 sar	 ecx, 20			; 00000014H
  00497	8b 55 f4	 mov	 edx, DWORD PTR _n$[ebp]
  0049a	8d 84 0a 01 fc
	ff ff		 lea	 eax, DWORD PTR [edx+ecx-1023]
  004a1	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax

; 317  :     j = ix & 0x000fffff;

  004a4	8b 4d fc	 mov	 ecx, DWORD PTR _ix$[ebp]
  004a7	81 e1 ff ff 0f
	00		 and	 ecx, 1048575		; 000fffffH
  004ad	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx

; 318  :     /* determine interval */
; 319  :     ix = j | 0x3ff00000; /* normalize ix */

  004b0	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  004b3	81 ca 00 00 f0
	3f		 or	 edx, 1072693248		; 3ff00000H
  004b9	89 55 fc	 mov	 DWORD PTR _ix$[ebp], edx

; 320  :     if (j <= 0x3988E) /* |x| < sqrt(3/2) */

  004bc	81 7d f8 8e 98
	03 00		 cmp	 DWORD PTR _j$[ebp], 235662 ; 0003988eH
  004c3	7f 09		 jg	 SHORT $LN46@pow

; 321  :     {
; 322  :       k = 0;

  004c5	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _k$[ebp], 0

; 323  :     }

  004cc	eb 2e		 jmp	 SHORT $LN49@pow
$LN46@pow:

; 324  :     else if (j < 0xBB67A) /* |x| < sqrt(3) */

  004ce	81 7d f8 7a b6
	0b 00		 cmp	 DWORD PTR _j$[ebp], 767610 ; 000bb67aH
  004d5	7d 09		 jge	 SHORT $LN48@pow

; 325  :     {
; 326  :       k = 1;

  004d7	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _k$[ebp], 1

; 327  :     }

  004de	eb 1c		 jmp	 SHORT $LN49@pow
$LN48@pow:

; 328  :     else
; 329  :     {
; 330  :       k = 0;

  004e0	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _k$[ebp], 0

; 331  :       n += 1;

  004e7	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  004ea	83 c0 01	 add	 eax, 1
  004ed	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax

; 332  :       ix -= 0x00100000;

  004f0	8b 4d fc	 mov	 ecx, DWORD PTR _ix$[ebp]
  004f3	81 e9 00 00 10
	00		 sub	 ecx, 1048576		; 00100000H
  004f9	89 4d fc	 mov	 DWORD PTR _ix$[ebp], ecx
$LN49@pow:

; 333  :     }
; 334  :     __HI (ax) = ix;

  004fc	8b 55 fc	 mov	 edx, DWORD PTR _ix$[ebp]
  004ff	89 55 90	 mov	 DWORD PTR _ax$[ebp+4], edx

; 335  : 
; 336  :     /* compute ss = s_h + s_l = (x - 1) / (x + 1) or (x - 1.5) / (x + 1.5) */
; 337  :     u = ax - bp[k]; /* bp[0] = 1.0, bp[1] = 1.5 */

  00502	8b 45 f0	 mov	 eax, DWORD PTR _k$[ebp]
  00505	dd 45 8c	 fld	 QWORD PTR _ax$[ebp]
  00508	dc 24 c5 00 00
	00 00		 fsub	 QWORD PTR _bp[eax*8]
  0050f	dd 5d b8	 fstp	 QWORD PTR _u$[ebp]

; 338  :     v = one / (ax + bp[k]);

  00512	8b 4d f0	 mov	 ecx, DWORD PTR _k$[ebp]
  00515	dd 45 8c	 fld	 QWORD PTR _ax$[ebp]
  00518	dc 04 cd 00 00
	00 00		 fadd	 QWORD PTR _bp[ecx*8]
  0051f	d9 e8		 fld1
  00521	de f1		 fdivrp	 ST(1), ST(0)
  00523	dd 5d b0	 fstp	 QWORD PTR _v$[ebp]

; 339  :     ss = u * v;

  00526	dd 45 b8	 fld	 QWORD PTR _u$[ebp]
  00529	dc 4d b0	 fmul	 QWORD PTR _v$[ebp]
  0052c	dd 9d 64 ff ff
	ff		 fstp	 QWORD PTR _ss$3[ebp]

; 340  :     s_h = ss;

  00532	dd 85 64 ff ff
	ff		 fld	 QWORD PTR _ss$3[ebp]
  00538	dd 9d 7c ff ff
	ff		 fstp	 QWORD PTR _s_h$4[ebp]

; 341  :     __LO (s_h) = 0;

  0053e	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _s_h$4[ebp], 0

; 342  :     /* t_h = ax + bp[k] High */
; 343  :     t_h = zero;

  00548	d9 ee		 fldz
  0054a	dd 5d 84	 fstp	 QWORD PTR _t_h$5[ebp]

; 344  :     __HI (t_h) = ((ix >> 1) | 0x20000000) + 0x00080000 + (k << 18);

  0054d	8b 55 fc	 mov	 edx, DWORD PTR _ix$[ebp]
  00550	d1 fa		 sar	 edx, 1
  00552	81 ca 00 00 00
	20		 or	 edx, 536870912		; 20000000H
  00558	8b 45 f0	 mov	 eax, DWORD PTR _k$[ebp]
  0055b	c1 e0 12	 shl	 eax, 18			; 00000012H
  0055e	8d 8c 02 00 00
	08 00		 lea	 ecx, DWORD PTR [edx+eax+524288]
  00565	89 4d 88	 mov	 DWORD PTR _t_h$5[ebp+4], ecx

; 345  :     t_l = ax - (t_h - bp[k]);

  00568	8b 55 f0	 mov	 edx, DWORD PTR _k$[ebp]
  0056b	dd 45 84	 fld	 QWORD PTR _t_h$5[ebp]
  0056e	dc 24 d5 00 00
	00 00		 fsub	 QWORD PTR _bp[edx*8]
  00575	dc 6d 8c	 fsubr	 QWORD PTR _ax$[ebp]
  00578	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR _t_l$2[ebp]

; 346  :     s_l = v * ((u - s_h * t_h) - s_h * t_l);

  0057e	dd 85 7c ff ff
	ff		 fld	 QWORD PTR _s_h$4[ebp]
  00584	dc 4d 84	 fmul	 QWORD PTR _t_h$5[ebp]
  00587	dc 6d b8	 fsubr	 QWORD PTR _u$[ebp]
  0058a	dd 85 7c ff ff
	ff		 fld	 QWORD PTR _s_h$4[ebp]
  00590	dc 8d 54 ff ff
	ff		 fmul	 QWORD PTR _t_l$2[ebp]
  00596	de e9		 fsubp	 ST(1), ST(0)
  00598	dc 4d b0	 fmul	 QWORD PTR _v$[ebp]
  0059b	dd 9d 14 ff ff
	ff		 fstp	 QWORD PTR _s_l$1[ebp]

; 347  :     /* compute log(ax) */
; 348  :     s2 = ss * ss;

  005a1	dd 85 64 ff ff
	ff		 fld	 QWORD PTR _ss$3[ebp]
  005a7	dc 8d 64 ff ff
	ff		 fmul	 QWORD PTR _ss$3[ebp]
  005ad	dd 5d a0	 fstp	 QWORD PTR _s2$6[ebp]

; 349  :     r = s2 * s2 * (L1 + s2 * (L2 + s2 * (L3 + s2 * (L4 + s2 * (L5 + s2 * L6)))));

  005b0	dd 45 a0	 fld	 QWORD PTR _s2$6[ebp]
  005b3	dc 4d a0	 fmul	 QWORD PTR _s2$6[ebp]
  005b6	dd 45 a0	 fld	 QWORD PTR _s2$6[ebp]
  005b9	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fca7e284a454eef
  005bf	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fcd864a93c9db65
  005c5	dc 4d a0	 fmul	 QWORD PTR _s2$6[ebp]
  005c8	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fd17460a91d4101
  005ce	dc 4d a0	 fmul	 QWORD PTR _s2$6[ebp]
  005d1	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fd55555518f264d
  005d7	dc 4d a0	 fmul	 QWORD PTR _s2$6[ebp]
  005da	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fdb6db6db6fabff
  005e0	dc 4d a0	 fmul	 QWORD PTR _s2$6[ebp]
  005e3	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe3333333333303
  005e9	de c9		 fmulp	 ST(1), ST(0)
  005eb	dd 9d 6c ff ff
	ff		 fstp	 QWORD PTR _r$[ebp]

; 350  :     r += s_l * (s_h + ss);

  005f1	dd 85 7c ff ff
	ff		 fld	 QWORD PTR _s_h$4[ebp]
  005f7	dc 85 64 ff ff
	ff		 fadd	 QWORD PTR _ss$3[ebp]
  005fd	dc 8d 14 ff ff
	ff		 fmul	 QWORD PTR _s_l$1[ebp]
  00603	dc 85 6c ff ff
	ff		 fadd	 QWORD PTR _r$[ebp]
  00609	dd 9d 6c ff ff
	ff		 fstp	 QWORD PTR _r$[ebp]

; 351  :     s2 = s_h * s_h;

  0060f	dd 85 7c ff ff
	ff		 fld	 QWORD PTR _s_h$4[ebp]
  00615	dc 8d 7c ff ff
	ff		 fmul	 QWORD PTR _s_h$4[ebp]
  0061b	dd 5d a0	 fstp	 QWORD PTR _s2$6[ebp]

; 352  :     t_h = 3.0 + s2 + r;

  0061e	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4008000000000000
  00624	dc 45 a0	 fadd	 QWORD PTR _s2$6[ebp]
  00627	dc 85 6c ff ff
	ff		 fadd	 QWORD PTR _r$[ebp]
  0062d	dd 5d 84	 fstp	 QWORD PTR _t_h$5[ebp]

; 353  :     __LO (t_h) = 0;

  00630	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _t_h$5[ebp], 0

; 354  :     t_l = r - ((t_h - 3.0) - s2);

  00637	dd 45 84	 fld	 QWORD PTR _t_h$5[ebp]
  0063a	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@4008000000000000
  00640	dc 65 a0	 fsub	 QWORD PTR _s2$6[ebp]
  00643	dc ad 6c ff ff
	ff		 fsubr	 QWORD PTR _r$[ebp]
  00649	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR _t_l$2[ebp]

; 355  :     /* u + v = ss * (1 + ...) */
; 356  :     u = s_h * t_h;

  0064f	dd 85 7c ff ff
	ff		 fld	 QWORD PTR _s_h$4[ebp]
  00655	dc 4d 84	 fmul	 QWORD PTR _t_h$5[ebp]
  00658	dd 5d b8	 fstp	 QWORD PTR _u$[ebp]

; 357  :     v = s_l * t_h + t_l * ss;

  0065b	dd 85 14 ff ff
	ff		 fld	 QWORD PTR _s_l$1[ebp]
  00661	dc 4d 84	 fmul	 QWORD PTR _t_h$5[ebp]
  00664	dd 85 54 ff ff
	ff		 fld	 QWORD PTR _t_l$2[ebp]
  0066a	dc 8d 64 ff ff
	ff		 fmul	 QWORD PTR _ss$3[ebp]
  00670	de c1		 faddp	 ST(1), ST(0)
  00672	dd 5d b0	 fstp	 QWORD PTR _v$[ebp]

; 358  :     /* 2 / (3 * log2) * (ss + ...) */
; 359  :     p_h = u + v;

  00675	dd 45 b8	 fld	 QWORD PTR _u$[ebp]
  00678	dc 45 b0	 fadd	 QWORD PTR _v$[ebp]
  0067b	dd 5d c4	 fstp	 QWORD PTR _p_h$[ebp]

; 360  :     __LO (p_h) = 0;

  0067e	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _p_h$[ebp], 0

; 361  :     p_l = v - (p_h - u);

  00685	dd 45 c4	 fld	 QWORD PTR _p_h$[ebp]
  00688	dc 65 b8	 fsub	 QWORD PTR _u$[ebp]
  0068b	dc 6d b0	 fsubr	 QWORD PTR _v$[ebp]
  0068e	dd 9d 74 ff ff
	ff		 fstp	 QWORD PTR _p_l$[ebp]

; 362  :     z_h = cp_h * p_h; /* cp_h + cp_l = 2 / (3 * log2) */

  00694	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3feec709e0000000
  0069a	dc 4d c4	 fmul	 QWORD PTR _p_h$[ebp]
  0069d	dd 9d 0c ff ff
	ff		 fstp	 QWORD PTR _z_h$[ebp]

; 363  :     z_l = cp_l * p_h + p_l * cp + dp_l[k];

  006a3	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@be3e2fe0145b01f5
  006a9	dc 4d c4	 fmul	 QWORD PTR _p_h$[ebp]
  006ac	dd 85 74 ff ff
	ff		 fld	 QWORD PTR _p_l$[ebp]
  006b2	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3feec709dc3a03fd
  006b8	de c1		 faddp	 ST(1), ST(0)
  006ba	8b 45 f0	 mov	 eax, DWORD PTR _k$[ebp]
  006bd	dc 04 c5 00 00
	00 00		 fadd	 QWORD PTR _dp_l[eax*8]
  006c4	dd 9d 04 ff ff
	ff		 fstp	 QWORD PTR _z_l$[ebp]

; 364  :     /* log2(ax) = (ss + ...) * 2 / (3 * log2) = n + dp_h + z_h + z_l */
; 365  :     t = (double) n;

  006ca	db 45 f4	 fild	 DWORD PTR _n$[ebp]
  006cd	dd 5d d8	 fstp	 QWORD PTR _t$[ebp]

; 366  :     t1 = (((z_h + z_l) + dp_h[k]) + t);

  006d0	dd 85 0c ff ff
	ff		 fld	 QWORD PTR _z_h$[ebp]
  006d6	dc 85 04 ff ff
	ff		 fadd	 QWORD PTR _z_l$[ebp]
  006dc	8b 4d f0	 mov	 ecx, DWORD PTR _k$[ebp]
  006df	dc 04 cd 00 00
	00 00		 fadd	 QWORD PTR _dp_h[ecx*8]
  006e6	dc 45 d8	 fadd	 QWORD PTR _t$[ebp]
  006e9	dd 5d 98	 fstp	 QWORD PTR _t1$[ebp]

; 367  :     __LO (t1) = 0;

  006ec	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _t1$[ebp], 0

; 368  :     t2 = z_l - (((t1 - t) - dp_h[k]) - z_h);

  006f3	dd 45 98	 fld	 QWORD PTR _t1$[ebp]
  006f6	dc 65 d8	 fsub	 QWORD PTR _t$[ebp]
  006f9	8b 55 f0	 mov	 edx, DWORD PTR _k$[ebp]
  006fc	dc 24 d5 00 00
	00 00		 fsub	 QWORD PTR _dp_h[edx*8]
  00703	dc a5 0c ff ff
	ff		 fsub	 QWORD PTR _z_h$[ebp]
  00709	dc ad 04 ff ff
	ff		 fsubr	 QWORD PTR _z_l$[ebp]
  0070f	dd 9d fc fe ff
	ff		 fstp	 QWORD PTR _t2$[ebp]
$LN39@pow:

; 369  :   }
; 370  : 
; 371  :   /* split up y into y1 + y2 and compute (y1 + y2) * (t1 + t2) */
; 372  :   y1 = y;

  00715	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  00718	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR _y1$[ebp]

; 373  :   __LO (y1) = 0;

  0071e	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _y1$[ebp], 0

; 374  :   p_l = (y - y1) * t1 + y * t2;

  00728	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  0072b	dc a5 4c ff ff
	ff		 fsub	 QWORD PTR _y1$[ebp]
  00731	dc 4d 98	 fmul	 QWORD PTR _t1$[ebp]
  00734	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  00737	dc 8d fc fe ff
	ff		 fmul	 QWORD PTR _t2$[ebp]
  0073d	de c1		 faddp	 ST(1), ST(0)
  0073f	dd 9d 74 ff ff
	ff		 fstp	 QWORD PTR _p_l$[ebp]

; 375  :   p_h = y1 * t1;

  00745	dd 85 4c ff ff
	ff		 fld	 QWORD PTR _y1$[ebp]
  0074b	dc 4d 98	 fmul	 QWORD PTR _t1$[ebp]
  0074e	dd 5d c4	 fstp	 QWORD PTR _p_h$[ebp]

; 376  :   z = p_l + p_h;

  00751	dd 85 74 ff ff
	ff		 fld	 QWORD PTR _p_l$[ebp]
  00757	dc 45 c4	 fadd	 QWORD PTR _p_h$[ebp]
  0075a	dd 5d e8	 fstp	 QWORD PTR _z$[ebp]

; 377  :   j = __HI (z);

  0075d	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp+4]
  00760	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax

; 378  :   i = __LO (z);

  00763	8b 4d e8	 mov	 ecx, DWORD PTR _z$[ebp]
  00766	89 4d c0	 mov	 DWORD PTR _i$[ebp], ecx

; 379  :   if (j >= 0x40900000) /* z >= 1024 */

  00769	81 7d f8 00 00
	90 40		 cmp	 DWORD PTR _j$[ebp], 1083179008 ; 40900000H
  00770	7c 55		 jl	 SHORT $LN50@pow

; 380  :   {
; 381  :     if (((j - 0x40900000) | i) != 0) /* if z > 1024 */

  00772	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  00775	81 ea 00 00 90
	40		 sub	 edx, 1083179008		; 40900000H
  0077b	0b 55 c0	 or	 edx, DWORD PTR _i$[ebp]
  0077e	74 16		 je	 SHORT $LN52@pow

; 382  :     {
; 383  :       return s * huge * huge; /* overflow */

  00780	dd 45 a8	 fld	 QWORD PTR _s$[ebp]
  00783	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@7e37e43c8800759c
  00789	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@7e37e43c8800759c
  0078f	e9 38 02 00 00	 jmp	 $LN1@pow

; 384  :     }

  00794	eb 2f		 jmp	 SHORT $LN54@pow
$LN52@pow:

; 385  :     else
; 386  :     {
; 387  :       if (p_l + ovt > z - p_h)

  00796	dd 85 74 ff ff
	ff		 fld	 QWORD PTR _p_l$[ebp]
  0079c	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3c971547652b82fe
  007a2	dd 45 e8	 fld	 QWORD PTR _z$[ebp]
  007a5	dc 65 c4	 fsub	 QWORD PTR _p_h$[ebp]
  007a8	de d9		 fcompp
  007aa	df e0		 fnstsw	 ax
  007ac	f6 c4 05	 test	 ah, 5
  007af	7a 14		 jp	 SHORT $LN54@pow

; 388  :       {
; 389  :         return s * huge * huge; /* overflow */

  007b1	dd 45 a8	 fld	 QWORD PTR _s$[ebp]
  007b4	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@7e37e43c8800759c
  007ba	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@7e37e43c8800759c
  007c0	e9 07 02 00 00	 jmp	 $LN1@pow
$LN54@pow:

; 390  :       }
; 391  :     }
; 392  :   }

  007c5	eb 5a		 jmp	 SHORT $LN58@pow
$LN50@pow:

; 393  :   else if ((j & 0x7fffffff) >= 0x4090cc00) /* z <= -1075 */

  007c7	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  007ca	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  007cf	3d 00 cc 90 40	 cmp	 eax, 1083231232		; 4090cc00H
  007d4	7c 4b		 jl	 SHORT $LN58@pow

; 394  :   {
; 395  :     if (((j - 0xc090cc00) | i) != 0) /* z < -1075 */

  007d6	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  007d9	81 c1 00 34 6f
	3f		 add	 ecx, 1064252416		; 3f6f3400H
  007df	0b 4d c0	 or	 ecx, DWORD PTR _i$[ebp]
  007e2	74 16		 je	 SHORT $LN56@pow

; 396  :     {
; 397  :       return s * tiny * tiny; /* underflow */

  007e4	dd 45 a8	 fld	 QWORD PTR _s$[ebp]
  007e7	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@01a56e1fc2f8f359
  007ed	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@01a56e1fc2f8f359
  007f3	e9 d4 01 00 00	 jmp	 $LN1@pow

; 398  :     }

  007f8	eb 27		 jmp	 SHORT $LN58@pow
$LN56@pow:

; 399  :     else
; 400  :     {
; 401  :       if (p_l <= z - p_h)

  007fa	dd 45 e8	 fld	 QWORD PTR _z$[ebp]
  007fd	dc 65 c4	 fsub	 QWORD PTR _p_h$[ebp]
  00800	dc 9d 74 ff ff
	ff		 fcomp	 QWORD PTR _p_l$[ebp]
  00806	df e0		 fnstsw	 ax
  00808	f6 c4 01	 test	 ah, 1
  0080b	75 14		 jne	 SHORT $LN58@pow

; 402  :       {
; 403  :         return s * tiny * tiny; /* underflow */

  0080d	dd 45 a8	 fld	 QWORD PTR _s$[ebp]
  00810	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@01a56e1fc2f8f359
  00816	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@01a56e1fc2f8f359
  0081c	e9 ab 01 00 00	 jmp	 $LN1@pow
$LN58@pow:

; 404  :       }
; 405  :     }
; 406  :   }
; 407  :   /*
; 408  :    * compute 2**(p_h + p_l)
; 409  :    */
; 410  :   i = j & 0x7fffffff;

  00821	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  00824	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0082a	89 55 c0	 mov	 DWORD PTR _i$[ebp], edx

; 411  :   k = (i >> 20) - 0x3ff;

  0082d	8b 45 c0	 mov	 eax, DWORD PTR _i$[ebp]
  00830	c1 f8 14	 sar	 eax, 20			; 00000014H
  00833	2d ff 03 00 00	 sub	 eax, 1023		; 000003ffH
  00838	89 45 f0	 mov	 DWORD PTR _k$[ebp], eax

; 412  :   n = 0;

  0083b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0

; 413  :   if (i > 0x3fe00000) /* if |z| > 0.5, set n = [z + 0.5] */

  00842	81 7d c0 00 00
	e0 3f		 cmp	 DWORD PTR _i$[ebp], 1071644672 ; 3fe00000H
  00849	7e 6e		 jle	 SHORT $LN59@pow

; 414  :   {
; 415  :     n = j + (0x00100000 >> (k + 1));

  0084b	8b 4d f0	 mov	 ecx, DWORD PTR _k$[ebp]
  0084e	83 c1 01	 add	 ecx, 1
  00851	ba 00 00 10 00	 mov	 edx, 1048576		; 00100000H
  00856	d3 fa		 sar	 edx, cl
  00858	03 55 f8	 add	 edx, DWORD PTR _j$[ebp]
  0085b	89 55 f4	 mov	 DWORD PTR _n$[ebp], edx

; 416  :     k = ((n & 0x7fffffff) >> 20) - 0x3ff; /* new k for n */

  0085e	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00861	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00866	c1 f8 14	 sar	 eax, 20			; 00000014H
  00869	2d ff 03 00 00	 sub	 eax, 1023		; 000003ffH
  0086e	89 45 f0	 mov	 DWORD PTR _k$[ebp], eax

; 417  :     t = zero;

  00871	d9 ee		 fldz
  00873	dd 5d d8	 fstp	 QWORD PTR _t$[ebp]

; 418  :     __HI (t) = (n & ~(0x000fffff >> k));

  00876	ba ff ff 0f 00	 mov	 edx, 1048575		; 000fffffH
  0087b	8b 4d f0	 mov	 ecx, DWORD PTR _k$[ebp]
  0087e	d3 fa		 sar	 edx, cl
  00880	f7 d2		 not	 edx
  00882	23 55 f4	 and	 edx, DWORD PTR _n$[ebp]
  00885	89 55 dc	 mov	 DWORD PTR _t$[ebp+4], edx

; 419  :     n = ((n & 0x000fffff) | 0x00100000) >> (20 - k);

  00888	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0088b	25 ff ff 0f 00	 and	 eax, 1048575		; 000fffffH
  00890	0d 00 00 10 00	 or	 eax, 1048576		; 00100000H
  00895	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0089a	2b 4d f0	 sub	 ecx, DWORD PTR _k$[ebp]
  0089d	d3 f8		 sar	 eax, cl
  0089f	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax

; 420  :     if (j < 0)

  008a2	83 7d f8 00	 cmp	 DWORD PTR _j$[ebp], 0
  008a6	7d 08		 jge	 SHORT $LN60@pow

; 421  :     {
; 422  :       n = -n;

  008a8	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  008ab	f7 d9		 neg	 ecx
  008ad	89 4d f4	 mov	 DWORD PTR _n$[ebp], ecx
$LN60@pow:

; 423  :     }
; 424  :     p_h -= t;

  008b0	dd 45 c4	 fld	 QWORD PTR _p_h$[ebp]
  008b3	dc 65 d8	 fsub	 QWORD PTR _t$[ebp]
  008b6	dd 5d c4	 fstp	 QWORD PTR _p_h$[ebp]
$LN59@pow:

; 425  :   }
; 426  :   t = p_l + p_h;

  008b9	dd 85 74 ff ff
	ff		 fld	 QWORD PTR _p_l$[ebp]
  008bf	dc 45 c4	 fadd	 QWORD PTR _p_h$[ebp]
  008c2	dd 5d d8	 fstp	 QWORD PTR _t$[ebp]

; 427  :   __LO (t) = 0;

  008c5	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _t$[ebp], 0

; 428  :   u = t * lg2_h;

  008cc	dd 45 d8	 fld	 QWORD PTR _t$[ebp]
  008cf	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe62e4300000000
  008d5	dd 5d b8	 fstp	 QWORD PTR _u$[ebp]

; 429  :   v = (p_l - (t - p_h)) * lg2 + t * lg2_l;

  008d8	dd 45 d8	 fld	 QWORD PTR _t$[ebp]
  008db	dc 65 c4	 fsub	 QWORD PTR _p_h$[ebp]
  008de	dc ad 74 ff ff
	ff		 fsubr	 QWORD PTR _p_l$[ebp]
  008e4	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe62e42fefa39ef
  008ea	dd 45 d8	 fld	 QWORD PTR _t$[ebp]
  008ed	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@be205c610ca86c39
  008f3	de c1		 faddp	 ST(1), ST(0)
  008f5	dd 5d b0	 fstp	 QWORD PTR _v$[ebp]

; 430  :   z = u + v;

  008f8	dd 45 b8	 fld	 QWORD PTR _u$[ebp]
  008fb	dc 45 b0	 fadd	 QWORD PTR _v$[ebp]
  008fe	dd 5d e8	 fstp	 QWORD PTR _z$[ebp]

; 431  :   w = v - (z - u);

  00901	dd 45 e8	 fld	 QWORD PTR _z$[ebp]
  00904	dc 65 b8	 fsub	 QWORD PTR _u$[ebp]
  00907	dc 6d b0	 fsubr	 QWORD PTR _v$[ebp]
  0090a	dd 9d 5c ff ff
	ff		 fstp	 QWORD PTR _w$[ebp]

; 432  :   t = z * z;

  00910	dd 45 e8	 fld	 QWORD PTR _z$[ebp]
  00913	dc 4d e8	 fmul	 QWORD PTR _z$[ebp]
  00916	dd 5d d8	 fstp	 QWORD PTR _t$[ebp]

; 433  :   t1 = z - t * (P1 + t * (P2 + t * (P3 + t * (P4 + t * P5))));

  00919	dd 45 d8	 fld	 QWORD PTR _t$[ebp]
  0091c	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3e66376972bea4d0
  00922	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@bebbbd41c5d26bf1
  00928	dc 4d d8	 fmul	 QWORD PTR _t$[ebp]
  0092b	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3f11566aaf25de2c
  00931	dc 4d d8	 fmul	 QWORD PTR _t$[ebp]
  00934	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@bf66c16c16bebd93
  0093a	dc 4d d8	 fmul	 QWORD PTR _t$[ebp]
  0093d	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fc555555555553e
  00943	dc 4d d8	 fmul	 QWORD PTR _t$[ebp]
  00946	dc 6d e8	 fsubr	 QWORD PTR _z$[ebp]
  00949	dd 5d 98	 fstp	 QWORD PTR _t1$[ebp]

; 434  :   r = (z * t1) / (t1 - two) - (w + z * w);

  0094c	dd 45 e8	 fld	 QWORD PTR _z$[ebp]
  0094f	dc 4d 98	 fmul	 QWORD PTR _t1$[ebp]
  00952	dd 45 98	 fld	 QWORD PTR _t1$[ebp]
  00955	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@4000000000000000
  0095b	de f9		 fdivp	 ST(1), ST(0)
  0095d	dd 45 e8	 fld	 QWORD PTR _z$[ebp]
  00960	dc 8d 5c ff ff
	ff		 fmul	 QWORD PTR _w$[ebp]
  00966	dc 85 5c ff ff
	ff		 fadd	 QWORD PTR _w$[ebp]
  0096c	de e9		 fsubp	 ST(1), ST(0)
  0096e	dd 9d 6c ff ff
	ff		 fstp	 QWORD PTR _r$[ebp]

; 435  :   z = one - (r - z);

  00974	dd 85 6c ff ff
	ff		 fld	 QWORD PTR _r$[ebp]
  0097a	dc 65 e8	 fsub	 QWORD PTR _z$[ebp]
  0097d	d9 e8		 fld1
  0097f	de e1		 fsubrp	 ST(1), ST(0)
  00981	dd 5d e8	 fstp	 QWORD PTR _z$[ebp]

; 436  :   j = __HI (z);

  00984	8b 55 ec	 mov	 edx, DWORD PTR _z$[ebp+4]
  00987	89 55 f8	 mov	 DWORD PTR _j$[ebp], edx

; 437  :   j += (n << 20);

  0098a	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0098d	c1 e0 14	 shl	 eax, 20			; 00000014H
  00990	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  00993	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax

; 438  :   if ((j >> 20) <= 0) /* subnormal output */

  00996	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00999	c1 f9 14	 sar	 ecx, 20			; 00000014H
  0099c	85 c9		 test	 ecx, ecx
  0099e	7f 1a		 jg	 SHORT $LN61@pow

; 439  :   {
; 440  :     z = scalbn (z, n);

  009a0	8b 55 f4	 mov	 edx, DWORD PTR _n$[ebp]
  009a3	52		 push	 edx
  009a4	83 ec 08	 sub	 esp, 8
  009a7	dd 45 e8	 fld	 QWORD PTR _z$[ebp]
  009aa	dd 1c 24	 fstp	 QWORD PTR [esp]
  009ad	e8 00 00 00 00	 call	 _scalbn
  009b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  009b5	dd 5d e8	 fstp	 QWORD PTR _z$[ebp]

; 441  :   }

  009b8	eb 0c		 jmp	 SHORT $LN62@pow
$LN61@pow:

; 442  :   else
; 443  :   {
; 444  :     __HI (z) += (n << 20);

  009ba	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  009bd	c1 e0 14	 shl	 eax, 20			; 00000014H
  009c0	03 45 ec	 add	 eax, DWORD PTR _z$[ebp+4]
  009c3	89 45 ec	 mov	 DWORD PTR _z$[ebp+4], eax
$LN62@pow:

; 445  :   }
; 446  :   return s * z;

  009c6	dd 45 a8	 fld	 QWORD PTR _s$[ebp]
  009c9	dc 4d e8	 fmul	 QWORD PTR _z$[ebp]
$LN1@pow:

; 447  : } /* pow */

  009cc	8b e5		 mov	 esp, ebp
  009ce	5d		 pop	 ebp
  009cf	c3		 ret	 0
_pow	ENDP
_TEXT	ENDS
END
