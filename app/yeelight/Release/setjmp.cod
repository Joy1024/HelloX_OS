; Listing generated by Microsoft (R) Optimizing Compiler Version 19.13.26128.0 

	TITLE	C:\HelloX\personal\HelloX_OS\app\yeelight\hxlib\setjmp.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	___setjmp
PUBLIC	_sigsetjmp
PUBLIC	___longjmp
PUBLIC	_siglongjmp
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\setjmp.c
;	COMDAT _siglongjmp
_TEXT	SEGMENT
_env$ = 8						; size = 4
_value$ = 12						; size = 4
_siglongjmp PROC					; COMDAT

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 92   : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
_siglongjmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\setjmp.c
;	COMDAT ___longjmp
_TEXT	SEGMENT
_env$ = 8						; size = 4
_value$ = 12						; size = 4
___longjmp PROC						; COMDAT

; 50   : #ifdef __GCC__
; 51   : 	//TODO gaojie
; 52   : 	__asm__ __volatile__(
; 53   : 			".code32						\n\t"
; 54   : 			"movl 4(%%esp), 		%%edx	\n\t"
; 55   : 			"movl 8(%%esp), 		%%eax	\n\t"
; 56   : 			"movl OFS_ESP(%%edx),	%%esp	\n\t"
; 57   : 			"movl OFS_EIP(%%edx),	%%ebx	\n\t"
; 58   : 			"movl %%ebx,			(%%esp)	\n\t"
; 59   : 			"movl OFS_EBP(%%edx), 	%%ebp	\n\t"
; 60   : 			"movl OFS_EBX(%%edx), 	%%ebx	\n\t"
; 61   : 			"movl OFS_EDI(%%edx), 	%%edi	\n\t"
; 62   : 			"movl OFS_ESI(%%edx), 	%%esi	\n\t"
; 63   : 			"ret\n\t"
; 64   : 			:
; 65   : 			::);
; 66   : #else
; 67   : 	__asm{
; 68   : 		mov edx,4[esp]

  00000	8b 54 24 04	 mov	 edx, DWORD PTR [esp+4]

; 69   : 		mov eax,8[esp]

  00004	8b 44 24 08	 mov	 eax, DWORD PTR [esp+8]

; 70   : 		
; 71   : 		mov esp,OFS_ESP[edx]

  00008	8b 62 10	 mov	 esp, DWORD PTR [edx+16]

; 72   : 		mov ebx,OFS_EIP[edx]

  0000b	8b 5a 14	 mov	 ebx, DWORD PTR [edx+20]

; 73   : 		mov [esp],ebx

  0000e	89 1c 24	 mov	 DWORD PTR [esp], ebx

; 74   : 
; 75   : 		mov ebp,OFS_EBP[edx]

  00011	8b 2a		 mov	 ebp, DWORD PTR [edx]

; 76   : 		mov ebx,OFS_EBX[edx]

  00013	8b 5a 04	 mov	 ebx, DWORD PTR [edx+4]

; 77   : 		mov edi,OFS_EDI[edx]

  00016	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]

; 78   : 		mov esi,OFS_ESI[edx]

  00019	8b 72 0c	 mov	 esi, DWORD PTR [edx+12]

; 79   : 
; 80   : 		ret

  0001c	c3		 ret	 0
___longjmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\setjmp.c
;	COMDAT _sigsetjmp
_TEXT	SEGMENT
_env$ = 8						; size = 4
_savesigs$ = 12						; size = 4
_sigsetjmp PROC						; COMDAT

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return 0;

  00003	33 c0		 xor	 eax, eax

; 88   : }

  00005	5d		 pop	 ebp
  00006	c3		 ret	 0
_sigsetjmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\setjmp.c
;	COMDAT ___setjmp
_TEXT	SEGMENT
_env$ = 8						; size = 4
___setjmp PROC						; COMDAT

; 16   : #ifdef __GCC__
; 17   : 	//TODO gaojie
; 18   : 	__asm__ __volatile__(
; 19   : 			".code32;"
; 20   : 			"movl 4(%%esp), 	%%edx			\n\t"
; 21   : 			"movl (%%esp),	 	%%eax			\n\t"
; 22   : 			"movl %%eax,		OFS_EIP(%%edx)	\n\t"
; 23   : 			"movl %%ebp,		OFS_EBP(%%edx)	\n\t"
; 24   : 			"movl %%ebx,		OFS_EBX(%%edx)	\n\t"
; 25   : 			"movl %%edi,		OFS_EDI(%%edx)	\n\t"
; 26   : 			"movl %%esi,		OFS_ESI(%%edx)	\n\t"
; 27   : 			"movl %%esp,		OFS_ESP(%%edx)	\n\t"
; 28   : 			"xorl %%eax,		%%eax			\n\t"
; 29   : 			"ret								\n\t"
; 30   : 			:::);
; 31   : #else
; 32   : 	__asm{
; 33   : 		mov edx,4[esp]

  00000	8b 54 24 04	 mov	 edx, DWORD PTR [esp+4]

; 34   : 		mov eax,[esp]

  00004	8b 04 24	 mov	 eax, DWORD PTR [esp]

; 35   : 		mov OFS_EIP[edx],eax

  00007	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 36   : 		mov OFS_EBP[edx],ebp

  0000a	89 2a		 mov	 DWORD PTR [edx], ebp

; 37   : 		mov OFS_EBX[edx],ebx

  0000c	89 5a 04	 mov	 DWORD PTR [edx+4], ebx

; 38   : 		mov OFS_EDI[edx],edi

  0000f	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 39   : 		mov OFS_ESI[edx],esi

  00012	89 72 0c	 mov	 DWORD PTR [edx+12], esi

; 40   : 		mov OFS_ESP[edx],esp

  00015	89 62 10	 mov	 DWORD PTR [edx+16], esp

; 41   : 		xor eax,eax

  00018	33 c0		 xor	 eax, eax

; 42   : 		ret

  0001a	c3		 ret	 0
___setjmp ENDP
_TEXT	ENDS
END
