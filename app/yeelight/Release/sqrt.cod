; Listing generated by Microsoft (R) Optimizing Compiler Version 19.13.26128.0 

	TITLE	C:\HelloX\personal\HelloX_OS\app\yeelight\hxlib\sqrt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_sqrt
PUBLIC	__real@3ff0000000000000
EXTRN	__fltused:DWORD
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\sqrt.c
;	COMDAT _sqrt
_TEXT	SEGMENT
_z$ = -56						; size = 8
_s1$ = -48						; size = 4
_t1$ = -44						; size = 4
_i$ = -40						; size = 4
_s0$ = -36						; size = 4
_t$ = -32						; size = 4
_q$ = -28						; size = 4
_sign$ = -24						; size = 4
_m$ = -20						; size = 4
_q1$ = -16						; size = 4
_r$ = -12						; size = 4
_ix1$ = -8						; size = 4
_ix0$ = -4						; size = 4
_x$ = 8							; size = 8
_sqrt	PROC						; COMDAT

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H

; 108  :   double z;
; 109  :   int sign = (int) 0x80000000;

  00006	c7 45 e8 00 00
	00 80		 mov	 DWORD PTR _sign$[ebp], -2147483648 ; 80000000H

; 110  :   unsigned r, t1, s1, ix1, q1;
; 111  :   int ix0, s0, q, m, t, i;
; 112  : 
; 113  :   ix0 = __HI (x); /* high word of x */

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  00010	89 45 fc	 mov	 DWORD PTR _ix0$[ebp], eax

; 114  :   ix1 = __LO (x); /* low word of x */

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR _ix1$[ebp], ecx

; 115  : 
; 116  :   /* take care of Inf and NaN */
; 117  :   if ((ix0 & 0x7ff00000) == 0x7ff00000)

  00019	8b 55 fc	 mov	 edx, DWORD PTR _ix0$[ebp]
  0001c	81 e2 00 00 f0
	7f		 and	 edx, 2146435072		; 7ff00000H
  00022	81 fa 00 00 f0
	7f		 cmp	 edx, 2146435072		; 7ff00000H
  00028	75 0e		 jne	 SHORT $LN11@sqrt

; 118  :   {
; 119  :     return x * x + x; /* sqrt(NaN) = NaN, sqrt(+inf) = +inf, sqrt(-inf) = sNaN */

  0002a	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0002d	dc 4d 08	 fmul	 QWORD PTR _x$[ebp]
  00030	dc 45 08	 fadd	 QWORD PTR _x$[ebp]
  00033	e9 f2 02 00 00	 jmp	 $LN1@sqrt
$LN11@sqrt:

; 120  :   }
; 121  :   /* take care of zero */
; 122  :   if (ix0 <= 0)

  00038	83 7d fc 00	 cmp	 DWORD PTR _ix0$[ebp], 0
  0003c	7f 30		 jg	 SHORT $LN15@sqrt

; 123  :   {
; 124  :     if (((ix0 & (~sign)) | ix1) == 0) /* sqrt(+-0) = +-0 */

  0003e	8b 45 e8	 mov	 eax, DWORD PTR _sign$[ebp]
  00041	f7 d0		 not	 eax
  00043	23 45 fc	 and	 eax, DWORD PTR _ix0$[ebp]
  00046	0b 45 f8	 or	 eax, DWORD PTR _ix1$[ebp]
  00049	75 0a		 jne	 SHORT $LN13@sqrt

; 125  :     {
; 126  :       return x;

  0004b	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0004e	e9 d7 02 00 00	 jmp	 $LN1@sqrt

; 127  :     }

  00053	eb 19		 jmp	 SHORT $LN15@sqrt
$LN13@sqrt:

; 128  :     else if (ix0 < 0) /* sqrt(-ve) = sNaN */

  00055	83 7d fc 00	 cmp	 DWORD PTR _ix0$[ebp], 0
  00059	7d 13		 jge	 SHORT $LN15@sqrt

; 129  :     {
; 130  :       return (x - x) / (x - x);

  0005b	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0005e	dc 65 08	 fsub	 QWORD PTR _x$[ebp]
  00061	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00064	dc 65 08	 fsub	 QWORD PTR _x$[ebp]
  00067	de f9		 fdivp	 ST(1), ST(0)
  00069	e9 bc 02 00 00	 jmp	 $LN1@sqrt
$LN15@sqrt:

; 131  :     }
; 132  :   }
; 133  :   /* normalize x */
; 134  :   m = (ix0 >> 20);

  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _ix0$[ebp]
  00071	c1 f9 14	 sar	 ecx, 20			; 00000014H
  00074	89 4d ec	 mov	 DWORD PTR _m$[ebp], ecx

; 135  :   if (m == 0) /* subnormal x */

  00077	83 7d ec 00	 cmp	 DWORD PTR _m$[ebp], 0
  0007b	75 78		 jne	 SHORT $LN16@sqrt
$LN2@sqrt:

; 136  :   {
; 137  :     while (ix0 == 0)

  0007d	83 7d fc 00	 cmp	 DWORD PTR _ix0$[ebp], 0
  00081	75 20		 jne	 SHORT $LN3@sqrt

; 138  :     {
; 139  :       m -= 21;

  00083	8b 55 ec	 mov	 edx, DWORD PTR _m$[ebp]
  00086	83 ea 15	 sub	 edx, 21			; 00000015H
  00089	89 55 ec	 mov	 DWORD PTR _m$[ebp], edx

; 140  :       ix0 |= (ix1 >> 11);

  0008c	8b 45 f8	 mov	 eax, DWORD PTR _ix1$[ebp]
  0008f	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  00092	0b 45 fc	 or	 eax, DWORD PTR _ix0$[ebp]
  00095	89 45 fc	 mov	 DWORD PTR _ix0$[ebp], eax

; 141  :       ix1 <<= 21;

  00098	8b 4d f8	 mov	 ecx, DWORD PTR _ix1$[ebp]
  0009b	c1 e1 15	 shl	 ecx, 21			; 00000015H
  0009e	89 4d f8	 mov	 DWORD PTR _ix1$[ebp], ecx

; 142  :     }

  000a1	eb da		 jmp	 SHORT $LN2@sqrt
$LN3@sqrt:

; 143  :     for (i = 0; (ix0 & 0x00100000) == 0; i++)

  000a3	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000aa	eb 09		 jmp	 SHORT $LN6@sqrt
$LN4@sqrt:
  000ac	8b 55 d8	 mov	 edx, DWORD PTR _i$[ebp]
  000af	83 c2 01	 add	 edx, 1
  000b2	89 55 d8	 mov	 DWORD PTR _i$[ebp], edx
$LN6@sqrt:
  000b5	8b 45 fc	 mov	 eax, DWORD PTR _ix0$[ebp]
  000b8	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000bd	75 0a		 jne	 SHORT $LN5@sqrt

; 144  :     {
; 145  :       ix0 <<= 1;

  000bf	8b 4d fc	 mov	 ecx, DWORD PTR _ix0$[ebp]
  000c2	d1 e1		 shl	 ecx, 1
  000c4	89 4d fc	 mov	 DWORD PTR _ix0$[ebp], ecx

; 146  :     }

  000c7	eb e3		 jmp	 SHORT $LN4@sqrt
$LN5@sqrt:

; 147  :     m -= i - 1;

  000c9	8b 55 d8	 mov	 edx, DWORD PTR _i$[ebp]
  000cc	83 ea 01	 sub	 edx, 1
  000cf	8b 45 ec	 mov	 eax, DWORD PTR _m$[ebp]
  000d2	2b c2		 sub	 eax, edx
  000d4	89 45 ec	 mov	 DWORD PTR _m$[ebp], eax

; 148  :     ix0 |= (ix1 >> (32 - i));

  000d7	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000dc	2b 4d d8	 sub	 ecx, DWORD PTR _i$[ebp]
  000df	8b 55 f8	 mov	 edx, DWORD PTR _ix1$[ebp]
  000e2	d3 ea		 shr	 edx, cl
  000e4	0b 55 fc	 or	 edx, DWORD PTR _ix0$[ebp]
  000e7	89 55 fc	 mov	 DWORD PTR _ix0$[ebp], edx

; 149  :     ix1 <<= i;

  000ea	8b 45 f8	 mov	 eax, DWORD PTR _ix1$[ebp]
  000ed	8b 4d d8	 mov	 ecx, DWORD PTR _i$[ebp]
  000f0	d3 e0		 shl	 eax, cl
  000f2	89 45 f8	 mov	 DWORD PTR _ix1$[ebp], eax
$LN16@sqrt:

; 150  :   }
; 151  :   m -= 1023; /* unbias exponent */

  000f5	8b 4d ec	 mov	 ecx, DWORD PTR _m$[ebp]
  000f8	81 e9 ff 03 00
	00		 sub	 ecx, 1023		; 000003ffH
  000fe	89 4d ec	 mov	 DWORD PTR _m$[ebp], ecx

; 152  :   ix0 = (ix0 & 0x000fffff) | 0x00100000;

  00101	8b 55 fc	 mov	 edx, DWORD PTR _ix0$[ebp]
  00104	81 e2 ff ff 0f
	00		 and	 edx, 1048575		; 000fffffH
  0010a	81 ca 00 00 10
	00		 or	 edx, 1048576		; 00100000H
  00110	89 55 fc	 mov	 DWORD PTR _ix0$[ebp], edx

; 153  :   if (m & 1) /* odd m, double x to make it even */

  00113	8b 45 ec	 mov	 eax, DWORD PTR _m$[ebp]
  00116	83 e0 01	 and	 eax, 1
  00119	74 1b		 je	 SHORT $LN17@sqrt

; 154  :   {
; 155  :     ix0 += ix0 + ((ix1 & sign) >> 31);

  0011b	8b 4d f8	 mov	 ecx, DWORD PTR _ix1$[ebp]
  0011e	23 4d e8	 and	 ecx, DWORD PTR _sign$[ebp]
  00121	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00124	03 4d fc	 add	 ecx, DWORD PTR _ix0$[ebp]
  00127	03 4d fc	 add	 ecx, DWORD PTR _ix0$[ebp]
  0012a	89 4d fc	 mov	 DWORD PTR _ix0$[ebp], ecx

; 156  :     ix1 += ix1;

  0012d	8b 55 f8	 mov	 edx, DWORD PTR _ix1$[ebp]
  00130	03 55 f8	 add	 edx, DWORD PTR _ix1$[ebp]
  00133	89 55 f8	 mov	 DWORD PTR _ix1$[ebp], edx
$LN17@sqrt:

; 157  :   }
; 158  :   m >>= 1; /* m = [m / 2] */

  00136	8b 45 ec	 mov	 eax, DWORD PTR _m$[ebp]
  00139	d1 f8		 sar	 eax, 1
  0013b	89 45 ec	 mov	 DWORD PTR _m$[ebp], eax

; 159  : 
; 160  :   /* generate sqrt(x) bit by bit */
; 161  :   ix0 += ix0 + ((ix1 & sign) >> 31);

  0013e	8b 4d f8	 mov	 ecx, DWORD PTR _ix1$[ebp]
  00141	23 4d e8	 and	 ecx, DWORD PTR _sign$[ebp]
  00144	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00147	03 4d fc	 add	 ecx, DWORD PTR _ix0$[ebp]
  0014a	03 4d fc	 add	 ecx, DWORD PTR _ix0$[ebp]
  0014d	89 4d fc	 mov	 DWORD PTR _ix0$[ebp], ecx

; 162  :   ix1 += ix1;

  00150	8b 55 f8	 mov	 edx, DWORD PTR _ix1$[ebp]
  00153	03 55 f8	 add	 edx, DWORD PTR _ix1$[ebp]
  00156	89 55 f8	 mov	 DWORD PTR _ix1$[ebp], edx

; 163  :   q = q1 = s0 = s1 = 0; /* [q,q1] = sqrt(x) */

  00159	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _s1$[ebp], 0
  00160	8b 45 d0	 mov	 eax, DWORD PTR _s1$[ebp]
  00163	89 45 dc	 mov	 DWORD PTR _s0$[ebp], eax
  00166	8b 4d dc	 mov	 ecx, DWORD PTR _s0$[ebp]
  00169	89 4d f0	 mov	 DWORD PTR _q1$[ebp], ecx
  0016c	8b 55 f0	 mov	 edx, DWORD PTR _q1$[ebp]
  0016f	89 55 e4	 mov	 DWORD PTR _q$[ebp], edx

; 164  :   r = 0x00200000; /* r = moving bit from right to left */

  00172	c7 45 f4 00 00
	20 00		 mov	 DWORD PTR _r$[ebp], 2097152 ; 00200000H
$LN7@sqrt:

; 165  : 
; 166  :   while (r != 0)

  00179	83 7d f4 00	 cmp	 DWORD PTR _r$[ebp], 0
  0017d	74 51		 je	 SHORT $LN8@sqrt

; 167  :   {
; 168  :     t = s0 + r;

  0017f	8b 45 dc	 mov	 eax, DWORD PTR _s0$[ebp]
  00182	03 45 f4	 add	 eax, DWORD PTR _r$[ebp]
  00185	89 45 e0	 mov	 DWORD PTR _t$[ebp], eax

; 169  :     if (t <= ix0)

  00188	8b 4d e0	 mov	 ecx, DWORD PTR _t$[ebp]
  0018b	3b 4d fc	 cmp	 ecx, DWORD PTR _ix0$[ebp]
  0018e	7f 1b		 jg	 SHORT $LN18@sqrt

; 170  :     {
; 171  :       s0 = t + r;

  00190	8b 55 e0	 mov	 edx, DWORD PTR _t$[ebp]
  00193	03 55 f4	 add	 edx, DWORD PTR _r$[ebp]
  00196	89 55 dc	 mov	 DWORD PTR _s0$[ebp], edx

; 172  :       ix0 -= t;

  00199	8b 45 fc	 mov	 eax, DWORD PTR _ix0$[ebp]
  0019c	2b 45 e0	 sub	 eax, DWORD PTR _t$[ebp]
  0019f	89 45 fc	 mov	 DWORD PTR _ix0$[ebp], eax

; 173  :       q += r;

  001a2	8b 4d e4	 mov	 ecx, DWORD PTR _q$[ebp]
  001a5	03 4d f4	 add	 ecx, DWORD PTR _r$[ebp]
  001a8	89 4d e4	 mov	 DWORD PTR _q$[ebp], ecx
$LN18@sqrt:

; 174  :     }
; 175  :     ix0 += ix0 + ((ix1 & sign) >> 31);

  001ab	8b 55 f8	 mov	 edx, DWORD PTR _ix1$[ebp]
  001ae	23 55 e8	 and	 edx, DWORD PTR _sign$[ebp]
  001b1	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  001b4	03 55 fc	 add	 edx, DWORD PTR _ix0$[ebp]
  001b7	03 55 fc	 add	 edx, DWORD PTR _ix0$[ebp]
  001ba	89 55 fc	 mov	 DWORD PTR _ix0$[ebp], edx

; 176  :     ix1 += ix1;

  001bd	8b 45 f8	 mov	 eax, DWORD PTR _ix1$[ebp]
  001c0	03 45 f8	 add	 eax, DWORD PTR _ix1$[ebp]
  001c3	89 45 f8	 mov	 DWORD PTR _ix1$[ebp], eax

; 177  :     r >>= 1;

  001c6	8b 4d f4	 mov	 ecx, DWORD PTR _r$[ebp]
  001c9	d1 e9		 shr	 ecx, 1
  001cb	89 4d f4	 mov	 DWORD PTR _r$[ebp], ecx

; 178  :   }

  001ce	eb a9		 jmp	 SHORT $LN7@sqrt
$LN8@sqrt:

; 179  : 
; 180  :   r = sign;

  001d0	8b 55 e8	 mov	 edx, DWORD PTR _sign$[ebp]
  001d3	89 55 f4	 mov	 DWORD PTR _r$[ebp], edx
$LN9@sqrt:

; 181  :   while (r != 0)

  001d6	83 7d f4 00	 cmp	 DWORD PTR _r$[ebp], 0
  001da	0f 84 a0 00 00
	00		 je	 $LN10@sqrt

; 182  :   {
; 183  :     t1 = s1 + r;

  001e0	8b 45 d0	 mov	 eax, DWORD PTR _s1$[ebp]
  001e3	03 45 f4	 add	 eax, DWORD PTR _r$[ebp]
  001e6	89 45 d4	 mov	 DWORD PTR _t1$[ebp], eax

; 184  :     t = s0;

  001e9	8b 4d dc	 mov	 ecx, DWORD PTR _s0$[ebp]
  001ec	89 4d e0	 mov	 DWORD PTR _t$[ebp], ecx

; 185  :     if ((t < ix0) || ((t == ix0) && (t1 <= ix1)))

  001ef	8b 55 e0	 mov	 edx, DWORD PTR _t$[ebp]
  001f2	3b 55 fc	 cmp	 edx, DWORD PTR _ix0$[ebp]
  001f5	7c 10		 jl	 SHORT $LN20@sqrt
  001f7	8b 45 e0	 mov	 eax, DWORD PTR _t$[ebp]
  001fa	3b 45 fc	 cmp	 eax, DWORD PTR _ix0$[ebp]
  001fd	75 59		 jne	 SHORT $LN19@sqrt
  001ff	8b 4d d4	 mov	 ecx, DWORD PTR _t1$[ebp]
  00202	3b 4d f8	 cmp	 ecx, DWORD PTR _ix1$[ebp]
  00205	77 51		 ja	 SHORT $LN19@sqrt
$LN20@sqrt:

; 186  :     {
; 187  :       s1 = t1 + r;

  00207	8b 55 d4	 mov	 edx, DWORD PTR _t1$[ebp]
  0020a	03 55 f4	 add	 edx, DWORD PTR _r$[ebp]
  0020d	89 55 d0	 mov	 DWORD PTR _s1$[ebp], edx

; 188  :       if (((t1 & sign) == sign) && (s1 & sign) == 0)

  00210	8b 45 d4	 mov	 eax, DWORD PTR _t1$[ebp]
  00213	23 45 e8	 and	 eax, DWORD PTR _sign$[ebp]
  00216	3b 45 e8	 cmp	 eax, DWORD PTR _sign$[ebp]
  00219	75 11		 jne	 SHORT $LN21@sqrt
  0021b	8b 4d d0	 mov	 ecx, DWORD PTR _s1$[ebp]
  0021e	23 4d e8	 and	 ecx, DWORD PTR _sign$[ebp]
  00221	75 09		 jne	 SHORT $LN21@sqrt

; 189  :       {
; 190  :         s0 += 1;

  00223	8b 55 dc	 mov	 edx, DWORD PTR _s0$[ebp]
  00226	83 c2 01	 add	 edx, 1
  00229	89 55 dc	 mov	 DWORD PTR _s0$[ebp], edx
$LN21@sqrt:

; 191  :       }
; 192  :       ix0 -= t;

  0022c	8b 45 fc	 mov	 eax, DWORD PTR _ix0$[ebp]
  0022f	2b 45 e0	 sub	 eax, DWORD PTR _t$[ebp]
  00232	89 45 fc	 mov	 DWORD PTR _ix0$[ebp], eax

; 193  :       if (ix1 < t1)

  00235	8b 4d f8	 mov	 ecx, DWORD PTR _ix1$[ebp]
  00238	3b 4d d4	 cmp	 ecx, DWORD PTR _t1$[ebp]
  0023b	73 09		 jae	 SHORT $LN22@sqrt

; 194  :       {
; 195  :         ix0 -= 1;

  0023d	8b 55 fc	 mov	 edx, DWORD PTR _ix0$[ebp]
  00240	83 ea 01	 sub	 edx, 1
  00243	89 55 fc	 mov	 DWORD PTR _ix0$[ebp], edx
$LN22@sqrt:

; 196  :       }
; 197  :       ix1 -= t1;

  00246	8b 45 f8	 mov	 eax, DWORD PTR _ix1$[ebp]
  00249	2b 45 d4	 sub	 eax, DWORD PTR _t1$[ebp]
  0024c	89 45 f8	 mov	 DWORD PTR _ix1$[ebp], eax

; 198  :       q1 += r;

  0024f	8b 4d f0	 mov	 ecx, DWORD PTR _q1$[ebp]
  00252	03 4d f4	 add	 ecx, DWORD PTR _r$[ebp]
  00255	89 4d f0	 mov	 DWORD PTR _q1$[ebp], ecx
$LN19@sqrt:

; 199  :     }
; 200  :     ix0 += ix0 + ((ix1 & sign) >> 31);

  00258	8b 55 f8	 mov	 edx, DWORD PTR _ix1$[ebp]
  0025b	23 55 e8	 and	 edx, DWORD PTR _sign$[ebp]
  0025e	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  00261	03 55 fc	 add	 edx, DWORD PTR _ix0$[ebp]
  00264	03 55 fc	 add	 edx, DWORD PTR _ix0$[ebp]
  00267	89 55 fc	 mov	 DWORD PTR _ix0$[ebp], edx

; 201  :     ix1 += ix1;

  0026a	8b 45 f8	 mov	 eax, DWORD PTR _ix1$[ebp]
  0026d	03 45 f8	 add	 eax, DWORD PTR _ix1$[ebp]
  00270	89 45 f8	 mov	 DWORD PTR _ix1$[ebp], eax

; 202  :     r >>= 1;

  00273	8b 4d f4	 mov	 ecx, DWORD PTR _r$[ebp]
  00276	d1 e9		 shr	 ecx, 1
  00278	89 4d f4	 mov	 DWORD PTR _r$[ebp], ecx

; 203  :   }

  0027b	e9 56 ff ff ff	 jmp	 $LN9@sqrt
$LN10@sqrt:

; 204  : 
; 205  :   /* use floating add to find out rounding direction */
; 206  :   if ((ix0 | ix1) != 0)

  00280	8b 55 fc	 mov	 edx, DWORD PTR _ix0$[ebp]
  00283	0b 55 f8	 or	 edx, DWORD PTR _ix1$[ebp]
  00286	74 60		 je	 SHORT $LN28@sqrt

; 207  :   {
; 208  :     z = one - tiny; /* trigger inexact flag */

  00288	d9 e8		 fld1
  0028a	dd 5d c8	 fstp	 QWORD PTR _z$[ebp]

; 209  :     if (z >= one)

  0028d	d9 e8		 fld1
  0028f	dc 5d c8	 fcomp	 QWORD PTR _z$[ebp]
  00292	df e0		 fnstsw	 ax
  00294	f6 c4 41	 test	 ah, 65			; 00000041H
  00297	7a 4f		 jp	 SHORT $LN28@sqrt

; 210  :     {
; 211  :       z = one + tiny;

  00299	d9 e8		 fld1
  0029b	dd 5d c8	 fstp	 QWORD PTR _z$[ebp]

; 212  :       if (q1 == (unsigned) 0xffffffff)

  0029e	83 7d f0 ff	 cmp	 DWORD PTR _q1$[ebp], -1
  002a2	75 12		 jne	 SHORT $LN25@sqrt

; 213  :       {
; 214  :         q1 = 0;

  002a4	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _q1$[ebp], 0

; 215  :         q += 1;

  002ab	8b 45 e4	 mov	 eax, DWORD PTR _q$[ebp]
  002ae	83 c0 01	 add	 eax, 1
  002b1	89 45 e4	 mov	 DWORD PTR _q$[ebp], eax

; 216  :       }

  002b4	eb 32		 jmp	 SHORT $LN28@sqrt
$LN25@sqrt:

; 217  :       else if (z > one)

  002b6	d9 e8		 fld1
  002b8	dc 5d c8	 fcomp	 QWORD PTR _z$[ebp]
  002bb	df e0		 fnstsw	 ax
  002bd	f6 c4 05	 test	 ah, 5
  002c0	7a 1a		 jp	 SHORT $LN27@sqrt

; 218  :       {
; 219  :         if (q1 == (unsigned) 0xfffffffe)

  002c2	83 7d f0 fe	 cmp	 DWORD PTR _q1$[ebp], -2	; fffffffeH
  002c6	75 09		 jne	 SHORT $LN29@sqrt

; 220  :         {
; 221  :           q += 1;

  002c8	8b 4d e4	 mov	 ecx, DWORD PTR _q$[ebp]
  002cb	83 c1 01	 add	 ecx, 1
  002ce	89 4d e4	 mov	 DWORD PTR _q$[ebp], ecx
$LN29@sqrt:

; 222  :         }
; 223  :         q1 += 2;

  002d1	8b 55 f0	 mov	 edx, DWORD PTR _q1$[ebp]
  002d4	83 c2 02	 add	 edx, 2
  002d7	89 55 f0	 mov	 DWORD PTR _q1$[ebp], edx

; 224  :       }

  002da	eb 0c		 jmp	 SHORT $LN28@sqrt
$LN27@sqrt:

; 225  :       else
; 226  :       {
; 227  :         q1 += (q1 & 1);

  002dc	8b 45 f0	 mov	 eax, DWORD PTR _q1$[ebp]
  002df	83 e0 01	 and	 eax, 1
  002e2	03 45 f0	 add	 eax, DWORD PTR _q1$[ebp]
  002e5	89 45 f0	 mov	 DWORD PTR _q1$[ebp], eax
$LN28@sqrt:

; 228  :       }
; 229  :     }
; 230  :   }
; 231  :   ix0 = (q >> 1) + 0x3fe00000;

  002e8	8b 4d e4	 mov	 ecx, DWORD PTR _q$[ebp]
  002eb	d1 f9		 sar	 ecx, 1
  002ed	81 c1 00 00 e0
	3f		 add	 ecx, 1071644672		; 3fe00000H
  002f3	89 4d fc	 mov	 DWORD PTR _ix0$[ebp], ecx

; 232  :   ix1 = q1 >> 1;

  002f6	8b 55 f0	 mov	 edx, DWORD PTR _q1$[ebp]
  002f9	d1 ea		 shr	 edx, 1
  002fb	89 55 f8	 mov	 DWORD PTR _ix1$[ebp], edx

; 233  :   if ((q & 1) == 1)

  002fe	8b 45 e4	 mov	 eax, DWORD PTR _q$[ebp]
  00301	83 e0 01	 and	 eax, 1
  00304	74 09		 je	 SHORT $LN30@sqrt

; 234  :   {
; 235  :     ix1 |= sign;

  00306	8b 4d f8	 mov	 ecx, DWORD PTR _ix1$[ebp]
  00309	0b 4d e8	 or	 ecx, DWORD PTR _sign$[ebp]
  0030c	89 4d f8	 mov	 DWORD PTR _ix1$[ebp], ecx
$LN30@sqrt:

; 236  :   }
; 237  :   ix0 += (m << 20);

  0030f	8b 55 ec	 mov	 edx, DWORD PTR _m$[ebp]
  00312	c1 e2 14	 shl	 edx, 20			; 00000014H
  00315	03 55 fc	 add	 edx, DWORD PTR _ix0$[ebp]
  00318	89 55 fc	 mov	 DWORD PTR _ix0$[ebp], edx

; 238  :   __HI (z) = ix0;

  0031b	8b 45 fc	 mov	 eax, DWORD PTR _ix0$[ebp]
  0031e	89 45 cc	 mov	 DWORD PTR _z$[ebp+4], eax

; 239  :   __LO (z) = ix1;

  00321	8b 4d f8	 mov	 ecx, DWORD PTR _ix1$[ebp]
  00324	89 4d c8	 mov	 DWORD PTR _z$[ebp], ecx

; 240  :   return z;

  00327	dd 45 c8	 fld	 QWORD PTR _z$[ebp]
$LN1@sqrt:

; 241  : } /* sqrt */

  0032a	8b e5		 mov	 esp, ebp
  0032c	5d		 pop	 ebp
  0032d	c3		 ret	 0
_sqrt	ENDP
_TEXT	ENDS
END
