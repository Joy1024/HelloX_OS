; Listing generated by Microsoft (R) Optimizing Compiler Version 19.13.26128.0 

	TITLE	C:\HelloX\personal\HelloX_OS\app\yeelight\hxlib\stdio.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_digits	DD	FLAT:$SG4688
$SG4688	DB	'0123456789abcdefghijklmnopqrstuvwxyz', 00H
	ORG $+3
_upper_digits DD FLAT:$SG4690
$SG4690	DB	'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ', 00H
	ORG $+3
$SG4990	DB	'<NULL>', 00H
_DATA	ENDS
PUBLIC	__hx_printf
PUBLIC	__hx_sprintf
PUBLIC	__hx_vfprintf
PUBLIC	__hx_snprintf
PUBLIC	_hx_vsprintf
EXTRN	_PrintChar:PROC
EXTRN	_GotoHome:PROC
EXTRN	_ChangeLine:PROC
EXTRN	_GetCursorPos:PROC
EXTRN	_SetCursorPos:PROC
EXTRN	_strncpy:PROC
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\stdio.c
;	COMDAT _hx_vsprintf
_TEXT	SEGMENT
_ip$1 = -72						; size = 4
_ip$2 = -68						; size = 4
tv182 = -64						; size = 4
tv181 = -60						; size = 4
tv173 = -56						; size = 4
tv172 = -52						; size = 4
_base$ = -48						; size = 4
_len$ = -44						; size = 4
_i$ = -40						; size = 4
tv150 = -36						; size = 4
tv72 = -32						; size = 4
_num$ = -28						; size = 4
_qualifier$ = -24					; size = 4
_s$ = -20						; size = 4
_precision$ = -16					; size = 4
_field_width$ = -12					; size = 4
_flags$ = -8						; size = 4
_str$ = -4						; size = 4
_buf$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
_hx_vsprintf PROC					; COMDAT

; 444  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H

; 445  : 	int len;
; 446  : 	unsigned long num;
; 447  : 	int i, base;
; 448  : 	char *str;
; 449  : 	char *s;
; 450  : 
; 451  : 	int flags;            // Flags to number()
; 452  : 
; 453  : 	int field_width;      // Width of output field
; 454  : 	int precision;        // Min. # of digits for integers; max number of chars for from string
; 455  : 	int qualifier;        // 'h', 'l', or 'L' for integer fields
; 456  : 
; 457  : 	for (str = buf; *fmt; fmt++)

  00006	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR _str$[ebp], eax
  0000c	eb 09		 jmp	 SHORT $LN4@hx_vsprint
$LN2@hx_vsprint:
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _fmt$[ebp]
  00011	83 c1 01	 add	 ecx, 1
  00014	89 4d 0c	 mov	 DWORD PTR _fmt$[ebp], ecx
$LN4@hx_vsprint:
  00017	8b 55 0c	 mov	 edx, DWORD PTR _fmt$[ebp]
  0001a	0f be 02	 movsx	 eax, BYTE PTR [edx]
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 2b 05 00
	00		 je	 $LN3@hx_vsprint

; 458  : 	{
; 459  : 		if (*fmt != '%')

  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _fmt$[ebp]
  00028	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0002b	83 fa 25	 cmp	 edx, 37			; 00000025H
  0002e	74 15		 je	 SHORT $LN20@hx_vsprint

; 460  : 		{
; 461  : 			*str++ = *fmt;

  00030	8b 45 fc	 mov	 eax, DWORD PTR _str$[ebp]
  00033	8b 4d 0c	 mov	 ecx, DWORD PTR _fmt$[ebp]
  00036	8a 11		 mov	 dl, BYTE PTR [ecx]
  00038	88 10		 mov	 BYTE PTR [eax], dl
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _str$[ebp]
  0003d	83 c0 01	 add	 eax, 1
  00040	89 45 fc	 mov	 DWORD PTR _str$[ebp], eax

; 462  : 			continue;

  00043	eb c9		 jmp	 SHORT $LN2@hx_vsprint
$LN20@hx_vsprint:

; 463  : 		}
; 464  : 
; 465  : 		// Process flags
; 466  : 		flags = 0;

  00045	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _flags$[ebp], 0
$repeat$77:

; 467  : 	repeat:
; 468  : 		fmt++; // This also skips first '%'

  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _fmt$[ebp]
  0004f	83 c1 01	 add	 ecx, 1
  00052	89 4d 0c	 mov	 DWORD PTR _fmt$[ebp], ecx

; 469  : 		switch (*fmt)

  00055	8b 55 0c	 mov	 edx, DWORD PTR _fmt$[ebp]
  00058	0f be 02	 movsx	 eax, BYTE PTR [edx]
  0005b	89 45 e0	 mov	 DWORD PTR tv72[ebp], eax
  0005e	8b 4d e0	 mov	 ecx, DWORD PTR tv72[ebp]
  00061	83 e9 20	 sub	 ecx, 32			; 00000020H
  00064	89 4d e0	 mov	 DWORD PTR tv72[ebp], ecx
  00067	83 7d e0 10	 cmp	 DWORD PTR tv72[ebp], 16	; 00000010H
  0006b	77 48		 ja	 SHORT $LN5@hx_vsprint
  0006d	8b 55 e0	 mov	 edx, DWORD PTR tv72[ebp]
  00070	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN73@hx_vsprint[edx]
  00077	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN75@hx_vsprint[eax*4]
$LN21@hx_vsprint:

; 470  : 		{
; 471  : 		case '-': flags |= LEFT; goto repeat;

  0007e	8b 4d f8	 mov	 ecx, DWORD PTR _flags$[ebp]
  00081	83 c9 10	 or	 ecx, 16			; 00000010H
  00084	89 4d f8	 mov	 DWORD PTR _flags$[ebp], ecx
  00087	eb c3		 jmp	 SHORT $repeat$77
$LN22@hx_vsprint:

; 472  : 		case '+': flags |= PLUS; goto repeat;

  00089	8b 55 f8	 mov	 edx, DWORD PTR _flags$[ebp]
  0008c	83 ca 04	 or	 edx, 4
  0008f	89 55 f8	 mov	 DWORD PTR _flags$[ebp], edx
  00092	eb b8		 jmp	 SHORT $repeat$77
$LN23@hx_vsprint:

; 473  : 		case ' ': flags |= SPACE; goto repeat;

  00094	8b 45 f8	 mov	 eax, DWORD PTR _flags$[ebp]
  00097	83 c8 08	 or	 eax, 8
  0009a	89 45 f8	 mov	 DWORD PTR _flags$[ebp], eax
  0009d	eb ad		 jmp	 SHORT $repeat$77
$LN24@hx_vsprint:

; 474  : 		case '#': flags |= SPECIAL; goto repeat;

  0009f	8b 4d f8	 mov	 ecx, DWORD PTR _flags$[ebp]
  000a2	83 c9 20	 or	 ecx, 32			; 00000020H
  000a5	89 4d f8	 mov	 DWORD PTR _flags$[ebp], ecx
  000a8	eb a2		 jmp	 SHORT $repeat$77
$LN25@hx_vsprint:

; 475  : 		case '0': flags |= ZEROPAD; goto repeat;

  000aa	8b 55 f8	 mov	 edx, DWORD PTR _flags$[ebp]
  000ad	83 ca 01	 or	 edx, 1
  000b0	89 55 f8	 mov	 DWORD PTR _flags$[ebp], edx
  000b3	eb 97		 jmp	 SHORT $repeat$77
$LN5@hx_vsprint:

; 476  : 		}
; 477  : 
; 478  : 		// Get field width
; 479  : 		field_width = -1;

  000b5	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _field_width$[ebp], -1

; 480  : 		if (is_digit(*fmt))

  000bc	8b 45 0c	 mov	 eax, DWORD PTR _fmt$[ebp]
  000bf	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000c2	83 f9 30	 cmp	 ecx, 48			; 00000030H
  000c5	7c 1c		 jl	 SHORT $LN26@hx_vsprint
  000c7	8b 55 0c	 mov	 edx, DWORD PTR _fmt$[ebp]
  000ca	0f be 02	 movsx	 eax, BYTE PTR [edx]
  000cd	83 f8 39	 cmp	 eax, 57			; 00000039H
  000d0	7f 11		 jg	 SHORT $LN26@hx_vsprint

; 481  : 			field_width = skip_atoi(&fmt);

  000d2	8d 4d 0c	 lea	 ecx, DWORD PTR _fmt$[ebp]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 _skip_atoi
  000db	83 c4 04	 add	 esp, 4
  000de	89 45 f4	 mov	 DWORD PTR _field_width$[ebp], eax
  000e1	eb 3d		 jmp	 SHORT $LN27@hx_vsprint
$LN26@hx_vsprint:

; 482  : 		else if (*fmt == '*')

  000e3	8b 55 0c	 mov	 edx, DWORD PTR _fmt$[ebp]
  000e6	0f be 02	 movsx	 eax, BYTE PTR [edx]
  000e9	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  000ec	75 32		 jne	 SHORT $LN27@hx_vsprint

; 483  : 		{
; 484  : 			fmt++;

  000ee	8b 4d 0c	 mov	 ecx, DWORD PTR _fmt$[ebp]
  000f1	83 c1 01	 add	 ecx, 1
  000f4	89 4d 0c	 mov	 DWORD PTR _fmt$[ebp], ecx

; 485  : 			field_width = va_arg(args, int);

  000f7	8b 55 10	 mov	 edx, DWORD PTR _args$[ebp]
  000fa	83 c2 04	 add	 edx, 4
  000fd	89 55 10	 mov	 DWORD PTR _args$[ebp], edx
  00100	8b 45 10	 mov	 eax, DWORD PTR _args$[ebp]
  00103	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00106	89 4d f4	 mov	 DWORD PTR _field_width$[ebp], ecx

; 486  : 			if (field_width < 0)

  00109	83 7d f4 00	 cmp	 DWORD PTR _field_width$[ebp], 0
  0010d	7d 11		 jge	 SHORT $LN27@hx_vsprint

; 487  : 			{
; 488  : 				field_width = -field_width;

  0010f	8b 55 f4	 mov	 edx, DWORD PTR _field_width$[ebp]
  00112	f7 da		 neg	 edx
  00114	89 55 f4	 mov	 DWORD PTR _field_width$[ebp], edx

; 489  : 				flags |= LEFT;

  00117	8b 45 f8	 mov	 eax, DWORD PTR _flags$[ebp]
  0011a	83 c8 10	 or	 eax, 16			; 00000010H
  0011d	89 45 f8	 mov	 DWORD PTR _flags$[ebp], eax
$LN27@hx_vsprint:

; 490  : 			}
; 491  : 		}
; 492  : 
; 493  : 		// Get the precision
; 494  : 		precision = -1;

  00120	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _precision$[ebp], -1

; 495  : 		if (*fmt == '.')

  00127	8b 4d 0c	 mov	 ecx, DWORD PTR _fmt$[ebp]
  0012a	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0012d	83 fa 2e	 cmp	 edx, 46			; 0000002eH
  00130	75 63		 jne	 SHORT $LN30@hx_vsprint

; 496  : 		{
; 497  : 			++fmt;

  00132	8b 45 0c	 mov	 eax, DWORD PTR _fmt$[ebp]
  00135	83 c0 01	 add	 eax, 1
  00138	89 45 0c	 mov	 DWORD PTR _fmt$[ebp], eax

; 498  : 			if (is_digit(*fmt))

  0013b	8b 4d 0c	 mov	 ecx, DWORD PTR _fmt$[ebp]
  0013e	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00141	83 fa 30	 cmp	 edx, 48			; 00000030H
  00144	7c 1c		 jl	 SHORT $LN31@hx_vsprint
  00146	8b 45 0c	 mov	 eax, DWORD PTR _fmt$[ebp]
  00149	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0014c	83 f9 39	 cmp	 ecx, 57			; 00000039H
  0014f	7f 11		 jg	 SHORT $LN31@hx_vsprint

; 499  : 				precision = skip_atoi(&fmt);

  00151	8d 55 0c	 lea	 edx, DWORD PTR _fmt$[ebp]
  00154	52		 push	 edx
  00155	e8 00 00 00 00	 call	 _skip_atoi
  0015a	83 c4 04	 add	 esp, 4
  0015d	89 45 f0	 mov	 DWORD PTR _precision$[ebp], eax
  00160	eb 26		 jmp	 SHORT $LN32@hx_vsprint
$LN31@hx_vsprint:

; 500  : 			else if (*fmt == '*')

  00162	8b 45 0c	 mov	 eax, DWORD PTR _fmt$[ebp]
  00165	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00168	83 f9 2a	 cmp	 ecx, 42			; 0000002aH
  0016b	75 1b		 jne	 SHORT $LN32@hx_vsprint

; 501  : 			{
; 502  : 				++fmt;

  0016d	8b 55 0c	 mov	 edx, DWORD PTR _fmt$[ebp]
  00170	83 c2 01	 add	 edx, 1
  00173	89 55 0c	 mov	 DWORD PTR _fmt$[ebp], edx

; 503  : 				precision = va_arg(args, int);

  00176	8b 45 10	 mov	 eax, DWORD PTR _args$[ebp]
  00179	83 c0 04	 add	 eax, 4
  0017c	89 45 10	 mov	 DWORD PTR _args$[ebp], eax
  0017f	8b 4d 10	 mov	 ecx, DWORD PTR _args$[ebp]
  00182	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00185	89 55 f0	 mov	 DWORD PTR _precision$[ebp], edx
$LN32@hx_vsprint:

; 504  : 			}
; 505  : 			if (precision < 0) precision = 0;

  00188	83 7d f0 00	 cmp	 DWORD PTR _precision$[ebp], 0
  0018c	7d 07		 jge	 SHORT $LN30@hx_vsprint
  0018e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _precision$[ebp], 0
$LN30@hx_vsprint:

; 506  : 		}
; 507  : 
; 508  : 		// Get the conversion qualifier
; 509  : 		qualifier = -1;

  00195	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _qualifier$[ebp], -1

; 510  : 		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L')

  0019c	8b 45 0c	 mov	 eax, DWORD PTR _fmt$[ebp]
  0019f	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001a2	83 f9 68	 cmp	 ecx, 104		; 00000068H
  001a5	74 16		 je	 SHORT $LN36@hx_vsprint
  001a7	8b 55 0c	 mov	 edx, DWORD PTR _fmt$[ebp]
  001aa	0f be 02	 movsx	 eax, BYTE PTR [edx]
  001ad	83 f8 6c	 cmp	 eax, 108		; 0000006cH
  001b0	74 0b		 je	 SHORT $LN36@hx_vsprint
  001b2	8b 4d 0c	 mov	 ecx, DWORD PTR _fmt$[ebp]
  001b5	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  001b8	83 fa 4c	 cmp	 edx, 76			; 0000004cH
  001bb	75 12		 jne	 SHORT $LN35@hx_vsprint
$LN36@hx_vsprint:

; 511  : 		{
; 512  : 			qualifier = *fmt;

  001bd	8b 45 0c	 mov	 eax, DWORD PTR _fmt$[ebp]
  001c0	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001c3	89 4d e8	 mov	 DWORD PTR _qualifier$[ebp], ecx

; 513  : 			fmt++;

  001c6	8b 55 0c	 mov	 edx, DWORD PTR _fmt$[ebp]
  001c9	83 c2 01	 add	 edx, 1
  001cc	89 55 0c	 mov	 DWORD PTR _fmt$[ebp], edx
$LN35@hx_vsprint:

; 514  : 		}
; 515  : 
; 516  : 		// Default base
; 517  : 		base = 10;

  001cf	c7 45 d0 0a 00
	00 00		 mov	 DWORD PTR _base$[ebp], 10 ; 0000000aH

; 518  : 
; 519  : 		switch (*fmt)

  001d6	8b 45 0c	 mov	 eax, DWORD PTR _fmt$[ebp]
  001d9	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001dc	89 4d dc	 mov	 DWORD PTR tv150[ebp], ecx
  001df	8b 55 dc	 mov	 edx, DWORD PTR tv150[ebp]
  001e2	83 ea 41	 sub	 edx, 65			; 00000041H
  001e5	89 55 dc	 mov	 DWORD PTR tv150[ebp], edx
  001e8	83 7d dc 37	 cmp	 DWORD PTR tv150[ebp], 55 ; 00000037H
  001ec	0f 87 6f 02 00
	00		 ja	 $LN56@hx_vsprint
  001f2	8b 45 dc	 mov	 eax, DWORD PTR tv150[ebp]
  001f5	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN74@hx_vsprint[eax]
  001fc	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN76@hx_vsprint[ecx*4]
$LN37@hx_vsprint:

; 520  : 		{
; 521  : 		case 'c':
; 522  : 			if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';

  00203	8b 55 f8	 mov	 edx, DWORD PTR _flags$[ebp]
  00206	83 e2 10	 and	 edx, 16			; 00000010H
  00209	75 20		 jne	 SHORT $LN38@hx_vsprint
$LN9@hx_vsprint:
  0020b	8b 45 f4	 mov	 eax, DWORD PTR _field_width$[ebp]
  0020e	83 e8 01	 sub	 eax, 1
  00211	89 45 f4	 mov	 DWORD PTR _field_width$[ebp], eax
  00214	83 7d f4 00	 cmp	 DWORD PTR _field_width$[ebp], 0
  00218	7e 11		 jle	 SHORT $LN38@hx_vsprint
  0021a	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  0021d	c6 01 20	 mov	 BYTE PTR [ecx], 32	; 00000020H
  00220	8b 55 fc	 mov	 edx, DWORD PTR _str$[ebp]
  00223	83 c2 01	 add	 edx, 1
  00226	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
  00229	eb e0		 jmp	 SHORT $LN9@hx_vsprint
$LN38@hx_vsprint:

; 523  : 			*str++ = (unsigned char)va_arg(args, int);

  0022b	8b 45 10	 mov	 eax, DWORD PTR _args$[ebp]
  0022e	83 c0 04	 add	 eax, 4
  00231	89 45 10	 mov	 DWORD PTR _args$[ebp], eax
  00234	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  00237	8b 55 10	 mov	 edx, DWORD PTR _args$[ebp]
  0023a	8a 42 fc	 mov	 al, BYTE PTR [edx-4]
  0023d	88 01		 mov	 BYTE PTR [ecx], al
  0023f	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  00242	83 c1 01	 add	 ecx, 1
  00245	89 4d fc	 mov	 DWORD PTR _str$[ebp], ecx
$LN11@hx_vsprint:

; 524  : 			while (--field_width > 0) *str++ = ' ';

  00248	8b 55 f4	 mov	 edx, DWORD PTR _field_width$[ebp]
  0024b	83 ea 01	 sub	 edx, 1
  0024e	89 55 f4	 mov	 DWORD PTR _field_width$[ebp], edx
  00251	83 7d f4 00	 cmp	 DWORD PTR _field_width$[ebp], 0
  00255	7e 11		 jle	 SHORT $LN12@hx_vsprint
  00257	8b 45 fc	 mov	 eax, DWORD PTR _str$[ebp]
  0025a	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
  0025d	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  00260	83 c1 01	 add	 ecx, 1
  00263	89 4d fc	 mov	 DWORD PTR _str$[ebp], ecx
  00266	eb e0		 jmp	 SHORT $LN11@hx_vsprint
$LN12@hx_vsprint:

; 525  : 			continue;

  00268	e9 a1 fd ff ff	 jmp	 $LN2@hx_vsprint
$LN39@hx_vsprint:

; 526  : 
; 527  : 		case 's':
; 528  : 			s = va_arg(args, char *);

  0026d	8b 55 10	 mov	 edx, DWORD PTR _args$[ebp]
  00270	83 c2 04	 add	 edx, 4
  00273	89 55 10	 mov	 DWORD PTR _args$[ebp], edx
  00276	8b 45 10	 mov	 eax, DWORD PTR _args$[ebp]
  00279	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0027c	89 4d ec	 mov	 DWORD PTR _s$[ebp], ecx

; 529  : 			if (!s) s = "<NULL>";

  0027f	83 7d ec 00	 cmp	 DWORD PTR _s$[ebp], 0
  00283	75 07		 jne	 SHORT $LN40@hx_vsprint
  00285	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET $SG4990
$LN40@hx_vsprint:

; 530  : 			len = strnlen(s, precision);

  0028c	8b 55 f0	 mov	 edx, DWORD PTR _precision$[ebp]
  0028f	52		 push	 edx
  00290	8b 45 ec	 mov	 eax, DWORD PTR _s$[ebp]
  00293	50		 push	 eax
  00294	e8 00 00 00 00	 call	 _strnlen
  00299	83 c4 08	 add	 esp, 8
  0029c	89 45 d4	 mov	 DWORD PTR _len$[ebp], eax

; 531  : 			if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';

  0029f	8b 4d f8	 mov	 ecx, DWORD PTR _flags$[ebp]
  002a2	83 e1 10	 and	 ecx, 16			; 00000010H
  002a5	75 2e		 jne	 SHORT $LN41@hx_vsprint
$LN13@hx_vsprint:
  002a7	8b 55 d4	 mov	 edx, DWORD PTR _len$[ebp]
  002aa	89 55 cc	 mov	 DWORD PTR tv172[ebp], edx
  002ad	8b 45 f4	 mov	 eax, DWORD PTR _field_width$[ebp]
  002b0	89 45 c8	 mov	 DWORD PTR tv173[ebp], eax
  002b3	8b 4d f4	 mov	 ecx, DWORD PTR _field_width$[ebp]
  002b6	83 e9 01	 sub	 ecx, 1
  002b9	89 4d f4	 mov	 DWORD PTR _field_width$[ebp], ecx
  002bc	8b 55 cc	 mov	 edx, DWORD PTR tv172[ebp]
  002bf	3b 55 c8	 cmp	 edx, DWORD PTR tv173[ebp]
  002c2	7d 11		 jge	 SHORT $LN41@hx_vsprint
  002c4	8b 45 fc	 mov	 eax, DWORD PTR _str$[ebp]
  002c7	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
  002ca	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  002cd	83 c1 01	 add	 ecx, 1
  002d0	89 4d fc	 mov	 DWORD PTR _str$[ebp], ecx
  002d3	eb d2		 jmp	 SHORT $LN13@hx_vsprint
$LN41@hx_vsprint:

; 532  : 			for (i = 0; i < len; ++i) *str++ = *s++;

  002d5	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  002dc	eb 09		 jmp	 SHORT $LN17@hx_vsprint
$LN15@hx_vsprint:
  002de	8b 55 d8	 mov	 edx, DWORD PTR _i$[ebp]
  002e1	83 c2 01	 add	 edx, 1
  002e4	89 55 d8	 mov	 DWORD PTR _i$[ebp], edx
$LN17@hx_vsprint:
  002e7	8b 45 d8	 mov	 eax, DWORD PTR _i$[ebp]
  002ea	3b 45 d4	 cmp	 eax, DWORD PTR _len$[ebp]
  002ed	7d 1e		 jge	 SHORT $LN18@hx_vsprint
  002ef	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  002f2	8b 55 ec	 mov	 edx, DWORD PTR _s$[ebp]
  002f5	8a 02		 mov	 al, BYTE PTR [edx]
  002f7	88 01		 mov	 BYTE PTR [ecx], al
  002f9	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  002fc	83 c1 01	 add	 ecx, 1
  002ff	89 4d fc	 mov	 DWORD PTR _str$[ebp], ecx
  00302	8b 55 ec	 mov	 edx, DWORD PTR _s$[ebp]
  00305	83 c2 01	 add	 edx, 1
  00308	89 55 ec	 mov	 DWORD PTR _s$[ebp], edx
  0030b	eb d1		 jmp	 SHORT $LN15@hx_vsprint
$LN18@hx_vsprint:

; 533  : 			while (len < field_width--) *str++ = ' ';

  0030d	8b 45 d4	 mov	 eax, DWORD PTR _len$[ebp]
  00310	89 45 c4	 mov	 DWORD PTR tv181[ebp], eax
  00313	8b 4d f4	 mov	 ecx, DWORD PTR _field_width$[ebp]
  00316	89 4d c0	 mov	 DWORD PTR tv182[ebp], ecx
  00319	8b 55 f4	 mov	 edx, DWORD PTR _field_width$[ebp]
  0031c	83 ea 01	 sub	 edx, 1
  0031f	89 55 f4	 mov	 DWORD PTR _field_width$[ebp], edx
  00322	8b 45 c4	 mov	 eax, DWORD PTR tv181[ebp]
  00325	3b 45 c0	 cmp	 eax, DWORD PTR tv182[ebp]
  00328	7d 11		 jge	 SHORT $LN19@hx_vsprint
  0032a	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  0032d	c6 01 20	 mov	 BYTE PTR [ecx], 32	; 00000020H
  00330	8b 55 fc	 mov	 edx, DWORD PTR _str$[ebp]
  00333	83 c2 01	 add	 edx, 1
  00336	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
  00339	eb d2		 jmp	 SHORT $LN18@hx_vsprint
$LN19@hx_vsprint:

; 534  : 			continue;

  0033b	e9 ce fc ff ff	 jmp	 $LN2@hx_vsprint
$LN42@hx_vsprint:

; 535  : 
; 536  : 		case 'p':
; 537  : 			if (field_width == -1)

  00340	83 7d f4 ff	 cmp	 DWORD PTR _field_width$[ebp], -1
  00344	75 10		 jne	 SHORT $LN43@hx_vsprint

; 538  : 			{
; 539  : 				field_width = 2 * sizeof(void *);

  00346	c7 45 f4 08 00
	00 00		 mov	 DWORD PTR _field_width$[ebp], 8

; 540  : 				flags |= ZEROPAD;

  0034d	8b 45 f8	 mov	 eax, DWORD PTR _flags$[ebp]
  00350	83 c8 01	 or	 eax, 1
  00353	89 45 f8	 mov	 DWORD PTR _flags$[ebp], eax
$LN43@hx_vsprint:

; 541  : 			}
; 542  : 			str = _number(str, (unsigned long)va_arg(args, void *), 16, field_width, precision, flags);

  00356	8b 4d 10	 mov	 ecx, DWORD PTR _args$[ebp]
  00359	83 c1 04	 add	 ecx, 4
  0035c	89 4d 10	 mov	 DWORD PTR _args$[ebp], ecx
  0035f	8b 55 f8	 mov	 edx, DWORD PTR _flags$[ebp]
  00362	52		 push	 edx
  00363	8b 45 f0	 mov	 eax, DWORD PTR _precision$[ebp]
  00366	50		 push	 eax
  00367	8b 4d f4	 mov	 ecx, DWORD PTR _field_width$[ebp]
  0036a	51		 push	 ecx
  0036b	6a 10		 push	 16			; 00000010H
  0036d	8b 55 10	 mov	 edx, DWORD PTR _args$[ebp]
  00370	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  00373	50		 push	 eax
  00374	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  00377	51		 push	 ecx
  00378	e8 00 00 00 00	 call	 __number
  0037d	83 c4 18	 add	 esp, 24			; 00000018H
  00380	89 45 fc	 mov	 DWORD PTR _str$[ebp], eax

; 543  : 			continue;

  00383	e9 86 fc ff ff	 jmp	 $LN2@hx_vsprint
$LN44@hx_vsprint:

; 544  : 
; 545  : 		case 'n':
; 546  : 			if (qualifier == 'l')

  00388	83 7d e8 6c	 cmp	 DWORD PTR _qualifier$[ebp], 108 ; 0000006cH
  0038c	75 1f		 jne	 SHORT $LN45@hx_vsprint

; 547  : 			{
; 548  : 				long *ip = va_arg(args, long *);

  0038e	8b 55 10	 mov	 edx, DWORD PTR _args$[ebp]
  00391	83 c2 04	 add	 edx, 4
  00394	89 55 10	 mov	 DWORD PTR _args$[ebp], edx
  00397	8b 45 10	 mov	 eax, DWORD PTR _args$[ebp]
  0039a	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0039d	89 4d bc	 mov	 DWORD PTR _ip$2[ebp], ecx

; 549  : 				*ip = (str - buf);

  003a0	8b 55 fc	 mov	 edx, DWORD PTR _str$[ebp]
  003a3	2b 55 08	 sub	 edx, DWORD PTR _buf$[ebp]
  003a6	8b 45 bc	 mov	 eax, DWORD PTR _ip$2[ebp]
  003a9	89 10		 mov	 DWORD PTR [eax], edx

; 550  : 			}

  003ab	eb 1d		 jmp	 SHORT $LN46@hx_vsprint
$LN45@hx_vsprint:

; 551  : 			else
; 552  : 			{
; 553  : 				int *ip = va_arg(args, int *);

  003ad	8b 4d 10	 mov	 ecx, DWORD PTR _args$[ebp]
  003b0	83 c1 04	 add	 ecx, 4
  003b3	89 4d 10	 mov	 DWORD PTR _args$[ebp], ecx
  003b6	8b 55 10	 mov	 edx, DWORD PTR _args$[ebp]
  003b9	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  003bc	89 45 b8	 mov	 DWORD PTR _ip$1[ebp], eax

; 554  : 				*ip = (str - buf);

  003bf	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  003c2	2b 4d 08	 sub	 ecx, DWORD PTR _buf$[ebp]
  003c5	8b 55 b8	 mov	 edx, DWORD PTR _ip$1[ebp]
  003c8	89 0a		 mov	 DWORD PTR [edx], ecx
$LN46@hx_vsprint:

; 555  : 			}
; 556  : 			continue;

  003ca	e9 3f fc ff ff	 jmp	 $LN2@hx_vsprint
$LN47@hx_vsprint:

; 557  : 
; 558  : 		case 'A':
; 559  : 			flags |= LARGE;

  003cf	8b 45 f8	 mov	 eax, DWORD PTR _flags$[ebp]
  003d2	83 c8 40	 or	 eax, 64			; 00000040H
  003d5	89 45 f8	 mov	 DWORD PTR _flags$[ebp], eax
$LN48@hx_vsprint:

; 560  : 
; 561  : 		case 'a':
; 562  : 			if (qualifier == 'l')

  003d8	83 7d e8 6c	 cmp	 DWORD PTR _qualifier$[ebp], 108 ; 0000006cH
  003dc	75 2d		 jne	 SHORT $LN49@hx_vsprint

; 563  : 				str = eaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);

  003de	8b 4d 10	 mov	 ecx, DWORD PTR _args$[ebp]
  003e1	83 c1 04	 add	 ecx, 4
  003e4	89 4d 10	 mov	 DWORD PTR _args$[ebp], ecx
  003e7	8b 55 f8	 mov	 edx, DWORD PTR _flags$[ebp]
  003ea	52		 push	 edx
  003eb	8b 45 f0	 mov	 eax, DWORD PTR _precision$[ebp]
  003ee	50		 push	 eax
  003ef	8b 4d f4	 mov	 ecx, DWORD PTR _field_width$[ebp]
  003f2	51		 push	 ecx
  003f3	8b 55 10	 mov	 edx, DWORD PTR _args$[ebp]
  003f6	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  003f9	50		 push	 eax
  003fa	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  003fd	51		 push	 ecx
  003fe	e8 00 00 00 00	 call	 _eaddr
  00403	83 c4 14	 add	 esp, 20			; 00000014H
  00406	89 45 fc	 mov	 DWORD PTR _str$[ebp], eax
  00409	eb 2b		 jmp	 SHORT $LN50@hx_vsprint
$LN49@hx_vsprint:

; 564  : 			else
; 565  : 				str = iaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);

  0040b	8b 55 10	 mov	 edx, DWORD PTR _args$[ebp]
  0040e	83 c2 04	 add	 edx, 4
  00411	89 55 10	 mov	 DWORD PTR _args$[ebp], edx
  00414	8b 45 f8	 mov	 eax, DWORD PTR _flags$[ebp]
  00417	50		 push	 eax
  00418	8b 4d f0	 mov	 ecx, DWORD PTR _precision$[ebp]
  0041b	51		 push	 ecx
  0041c	8b 55 f4	 mov	 edx, DWORD PTR _field_width$[ebp]
  0041f	52		 push	 edx
  00420	8b 45 10	 mov	 eax, DWORD PTR _args$[ebp]
  00423	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00426	51		 push	 ecx
  00427	8b 55 fc	 mov	 edx, DWORD PTR _str$[ebp]
  0042a	52		 push	 edx
  0042b	e8 00 00 00 00	 call	 _iaddr
  00430	83 c4 14	 add	 esp, 20			; 00000014H
  00433	89 45 fc	 mov	 DWORD PTR _str$[ebp], eax
$LN50@hx_vsprint:

; 566  : 			continue;

  00436	e9 d3 fb ff ff	 jmp	 $LN2@hx_vsprint
$LN51@hx_vsprint:

; 567  : 
; 568  : 			// Integer number formats - set up the flags and "break"
; 569  : 		case 'o':
; 570  : 			base = 8;

  0043b	c7 45 d0 08 00
	00 00		 mov	 DWORD PTR _base$[ebp], 8

; 571  : 			break;

  00442	eb 64		 jmp	 SHORT $LN7@hx_vsprint
$LN52@hx_vsprint:

; 572  : 
; 573  : 		case 'X':
; 574  : 			flags |= LARGE;

  00444	8b 45 f8	 mov	 eax, DWORD PTR _flags$[ebp]
  00447	83 c8 40	 or	 eax, 64			; 00000040H
  0044a	89 45 f8	 mov	 DWORD PTR _flags$[ebp], eax
$LN53@hx_vsprint:

; 575  : 
; 576  : 		case 'x':
; 577  : 			base = 16;

  0044d	c7 45 d0 10 00
	00 00		 mov	 DWORD PTR _base$[ebp], 16 ; 00000010H

; 578  : 			break;

  00454	eb 52		 jmp	 SHORT $LN7@hx_vsprint
$LN54@hx_vsprint:

; 579  : 
; 580  : 		case 'd':
; 581  : 		case 'i':
; 582  : 			flags |= SIGN;

  00456	8b 4d f8	 mov	 ecx, DWORD PTR _flags$[ebp]
  00459	83 c9 02	 or	 ecx, 2
  0045c	89 4d f8	 mov	 DWORD PTR _flags$[ebp], ecx
$LN55@hx_vsprint:

; 583  : 
; 584  : 		case 'u':
; 585  : 			break;

  0045f	eb 47		 jmp	 SHORT $LN7@hx_vsprint
$LN56@hx_vsprint:

; 586  : 
; 587  : #ifndef NOFLOAT
; 588  : 
; 589  : 		case 'E':
; 590  : 		case 'G':
; 591  : 		case 'e':
; 592  : 		case 'f':
; 593  : 		case 'g':
; 594  : 			str = flt(str, va_arg(args, double), field_width, precision, *fmt, flags | SIGN);
; 595  : 			continue;
; 596  : 
; 597  : #endif
; 598  : 
; 599  : 		default:
; 600  : 			if (*fmt != '%') *str++ = '%';

  00461	8b 55 0c	 mov	 edx, DWORD PTR _fmt$[ebp]
  00464	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00467	83 f8 25	 cmp	 eax, 37			; 00000025H
  0046a	74 0f		 je	 SHORT $LN57@hx_vsprint
  0046c	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  0046f	c6 01 25	 mov	 BYTE PTR [ecx], 37	; 00000025H
  00472	8b 55 fc	 mov	 edx, DWORD PTR _str$[ebp]
  00475	83 c2 01	 add	 edx, 1
  00478	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
$LN57@hx_vsprint:

; 601  : 			if (*fmt)

  0047b	8b 45 0c	 mov	 eax, DWORD PTR _fmt$[ebp]
  0047e	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00481	85 c9		 test	 ecx, ecx
  00483	74 15		 je	 SHORT $LN58@hx_vsprint

; 602  : 				*str++ = *fmt;

  00485	8b 55 fc	 mov	 edx, DWORD PTR _str$[ebp]
  00488	8b 45 0c	 mov	 eax, DWORD PTR _fmt$[ebp]
  0048b	8a 08		 mov	 cl, BYTE PTR [eax]
  0048d	88 0a		 mov	 BYTE PTR [edx], cl
  0048f	8b 55 fc	 mov	 edx, DWORD PTR _str$[ebp]
  00492	83 c2 01	 add	 edx, 1
  00495	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
  00498	eb 09		 jmp	 SHORT $LN59@hx_vsprint
$LN58@hx_vsprint:

; 603  : 			else
; 604  : 				--fmt;

  0049a	8b 45 0c	 mov	 eax, DWORD PTR _fmt$[ebp]
  0049d	83 e8 01	 sub	 eax, 1
  004a0	89 45 0c	 mov	 DWORD PTR _fmt$[ebp], eax
$LN59@hx_vsprint:

; 605  : 			continue;

  004a3	e9 66 fb ff ff	 jmp	 $LN2@hx_vsprint
$LN7@hx_vsprint:

; 606  : 		}
; 607  : 
; 608  : 		if (qualifier == 'l')

  004a8	83 7d e8 6c	 cmp	 DWORD PTR _qualifier$[ebp], 108 ; 0000006cH
  004ac	75 14		 jne	 SHORT $LN60@hx_vsprint

; 609  : 			num = va_arg(args, unsigned long);

  004ae	8b 4d 10	 mov	 ecx, DWORD PTR _args$[ebp]
  004b1	83 c1 04	 add	 ecx, 4
  004b4	89 4d 10	 mov	 DWORD PTR _args$[ebp], ecx
  004b7	8b 55 10	 mov	 edx, DWORD PTR _args$[ebp]
  004ba	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  004bd	89 45 e4	 mov	 DWORD PTR _num$[ebp], eax
  004c0	eb 66		 jmp	 SHORT $LN61@hx_vsprint
$LN60@hx_vsprint:

; 610  : 		else if (qualifier == 'h')

  004c2	83 7d e8 68	 cmp	 DWORD PTR _qualifier$[ebp], 104 ; 00000068H
  004c6	75 32		 jne	 SHORT $LN62@hx_vsprint

; 611  : 		{
; 612  : 			if (flags & SIGN)

  004c8	8b 4d f8	 mov	 ecx, DWORD PTR _flags$[ebp]
  004cb	83 e1 02	 and	 ecx, 2
  004ce	74 15		 je	 SHORT $LN64@hx_vsprint

; 613  : 				num = va_arg(args, short);

  004d0	8b 55 10	 mov	 edx, DWORD PTR _args$[ebp]
  004d3	83 c2 04	 add	 edx, 4
  004d6	89 55 10	 mov	 DWORD PTR _args$[ebp], edx
  004d9	8b 45 10	 mov	 eax, DWORD PTR _args$[ebp]
  004dc	0f bf 48 fc	 movsx	 ecx, WORD PTR [eax-4]
  004e0	89 4d e4	 mov	 DWORD PTR _num$[ebp], ecx
  004e3	eb 13		 jmp	 SHORT $LN65@hx_vsprint
$LN64@hx_vsprint:

; 614  : 			else
; 615  : 				num = va_arg(args, unsigned short);

  004e5	8b 55 10	 mov	 edx, DWORD PTR _args$[ebp]
  004e8	83 c2 04	 add	 edx, 4
  004eb	89 55 10	 mov	 DWORD PTR _args$[ebp], edx
  004ee	8b 45 10	 mov	 eax, DWORD PTR _args$[ebp]
  004f1	0f b7 48 fc	 movzx	 ecx, WORD PTR [eax-4]
  004f5	89 4d e4	 mov	 DWORD PTR _num$[ebp], ecx
$LN65@hx_vsprint:

; 616  : 		}

  004f8	eb 2e		 jmp	 SHORT $LN61@hx_vsprint
$LN62@hx_vsprint:

; 617  : 		else if (flags & SIGN)

  004fa	8b 55 f8	 mov	 edx, DWORD PTR _flags$[ebp]
  004fd	83 e2 02	 and	 edx, 2
  00500	74 14		 je	 SHORT $LN66@hx_vsprint

; 618  : 			num = va_arg(args, int);

  00502	8b 45 10	 mov	 eax, DWORD PTR _args$[ebp]
  00505	83 c0 04	 add	 eax, 4
  00508	89 45 10	 mov	 DWORD PTR _args$[ebp], eax
  0050b	8b 4d 10	 mov	 ecx, DWORD PTR _args$[ebp]
  0050e	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00511	89 55 e4	 mov	 DWORD PTR _num$[ebp], edx
  00514	eb 12		 jmp	 SHORT $LN61@hx_vsprint
$LN66@hx_vsprint:

; 619  : 		else
; 620  : 			num = va_arg(args, unsigned int);

  00516	8b 45 10	 mov	 eax, DWORD PTR _args$[ebp]
  00519	83 c0 04	 add	 eax, 4
  0051c	89 45 10	 mov	 DWORD PTR _args$[ebp], eax
  0051f	8b 4d 10	 mov	 ecx, DWORD PTR _args$[ebp]
  00522	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00525	89 55 e4	 mov	 DWORD PTR _num$[ebp], edx
$LN61@hx_vsprint:

; 621  : 
; 622  : 		str = _number(str, num, base, field_width, precision, flags);

  00528	8b 45 f8	 mov	 eax, DWORD PTR _flags$[ebp]
  0052b	50		 push	 eax
  0052c	8b 4d f0	 mov	 ecx, DWORD PTR _precision$[ebp]
  0052f	51		 push	 ecx
  00530	8b 55 f4	 mov	 edx, DWORD PTR _field_width$[ebp]
  00533	52		 push	 edx
  00534	8b 45 d0	 mov	 eax, DWORD PTR _base$[ebp]
  00537	50		 push	 eax
  00538	8b 4d e4	 mov	 ecx, DWORD PTR _num$[ebp]
  0053b	51		 push	 ecx
  0053c	8b 55 fc	 mov	 edx, DWORD PTR _str$[ebp]
  0053f	52		 push	 edx
  00540	e8 00 00 00 00	 call	 __number
  00545	83 c4 18	 add	 esp, 24			; 00000018H
  00548	89 45 fc	 mov	 DWORD PTR _str$[ebp], eax

; 623  : 	}

  0054b	e9 be fa ff ff	 jmp	 $LN2@hx_vsprint
$LN3@hx_vsprint:

; 624  : 
; 625  : 	*str = '\0';

  00550	8b 45 fc	 mov	 eax, DWORD PTR _str$[ebp]
  00553	c6 00 00	 mov	 BYTE PTR [eax], 0

; 626  : 	return str - buf;

  00556	8b 45 fc	 mov	 eax, DWORD PTR _str$[ebp]
  00559	2b 45 08	 sub	 eax, DWORD PTR _buf$[ebp]

; 627  : }

  0055c	8b e5		 mov	 esp, ebp
  0055e	5d		 pop	 ebp
  0055f	c3		 ret	 0
$LN75@hx_vsprint:
  00560	00 00 00 00	 DD	 $LN23@hx_vsprint
  00564	00 00 00 00	 DD	 $LN24@hx_vsprint
  00568	00 00 00 00	 DD	 $LN22@hx_vsprint
  0056c	00 00 00 00	 DD	 $LN21@hx_vsprint
  00570	00 00 00 00	 DD	 $LN25@hx_vsprint
  00574	00 00 00 00	 DD	 $LN5@hx_vsprint
$LN73@hx_vsprint:
  00578	00		 DB	 0
  00579	05		 DB	 5
  0057a	05		 DB	 5
  0057b	01		 DB	 1
  0057c	05		 DB	 5
  0057d	05		 DB	 5
  0057e	05		 DB	 5
  0057f	05		 DB	 5
  00580	05		 DB	 5
  00581	05		 DB	 5
  00582	05		 DB	 5
  00583	02		 DB	 2
  00584	05		 DB	 5
  00585	03		 DB	 3
  00586	05		 DB	 5
  00587	05		 DB	 5
  00588	04		 DB	 4
  00589	8d 49 00	 npad	 3
$LN76@hx_vsprint:
  0058c	00 00 00 00	 DD	 $LN47@hx_vsprint
  00590	00 00 00 00	 DD	 $LN52@hx_vsprint
  00594	00 00 00 00	 DD	 $LN48@hx_vsprint
  00598	00 00 00 00	 DD	 $LN37@hx_vsprint
  0059c	00 00 00 00	 DD	 $LN54@hx_vsprint
  005a0	00 00 00 00	 DD	 $LN44@hx_vsprint
  005a4	00 00 00 00	 DD	 $LN51@hx_vsprint
  005a8	00 00 00 00	 DD	 $LN42@hx_vsprint
  005ac	00 00 00 00	 DD	 $LN39@hx_vsprint
  005b0	00 00 00 00	 DD	 $LN55@hx_vsprint
  005b4	00 00 00 00	 DD	 $LN53@hx_vsprint
  005b8	00 00 00 00	 DD	 $LN56@hx_vsprint
$LN74@hx_vsprint:
  005bc	00		 DB	 0
  005bd	0b		 DB	 11			; 0000000bH
  005be	0b		 DB	 11			; 0000000bH
  005bf	0b		 DB	 11			; 0000000bH
  005c0	0b		 DB	 11			; 0000000bH
  005c1	0b		 DB	 11			; 0000000bH
  005c2	0b		 DB	 11			; 0000000bH
  005c3	0b		 DB	 11			; 0000000bH
  005c4	0b		 DB	 11			; 0000000bH
  005c5	0b		 DB	 11			; 0000000bH
  005c6	0b		 DB	 11			; 0000000bH
  005c7	0b		 DB	 11			; 0000000bH
  005c8	0b		 DB	 11			; 0000000bH
  005c9	0b		 DB	 11			; 0000000bH
  005ca	0b		 DB	 11			; 0000000bH
  005cb	0b		 DB	 11			; 0000000bH
  005cc	0b		 DB	 11			; 0000000bH
  005cd	0b		 DB	 11			; 0000000bH
  005ce	0b		 DB	 11			; 0000000bH
  005cf	0b		 DB	 11			; 0000000bH
  005d0	0b		 DB	 11			; 0000000bH
  005d1	0b		 DB	 11			; 0000000bH
  005d2	0b		 DB	 11			; 0000000bH
  005d3	01		 DB	 1
  005d4	0b		 DB	 11			; 0000000bH
  005d5	0b		 DB	 11			; 0000000bH
  005d6	0b		 DB	 11			; 0000000bH
  005d7	0b		 DB	 11			; 0000000bH
  005d8	0b		 DB	 11			; 0000000bH
  005d9	0b		 DB	 11			; 0000000bH
  005da	0b		 DB	 11			; 0000000bH
  005db	0b		 DB	 11			; 0000000bH
  005dc	02		 DB	 2
  005dd	0b		 DB	 11			; 0000000bH
  005de	03		 DB	 3
  005df	04		 DB	 4
  005e0	0b		 DB	 11			; 0000000bH
  005e1	0b		 DB	 11			; 0000000bH
  005e2	0b		 DB	 11			; 0000000bH
  005e3	0b		 DB	 11			; 0000000bH
  005e4	04		 DB	 4
  005e5	0b		 DB	 11			; 0000000bH
  005e6	0b		 DB	 11			; 0000000bH
  005e7	0b		 DB	 11			; 0000000bH
  005e8	0b		 DB	 11			; 0000000bH
  005e9	05		 DB	 5
  005ea	06		 DB	 6
  005eb	07		 DB	 7
  005ec	0b		 DB	 11			; 0000000bH
  005ed	0b		 DB	 11			; 0000000bH
  005ee	08		 DB	 8
  005ef	0b		 DB	 11			; 0000000bH
  005f0	09		 DB	 9
  005f1	0b		 DB	 11			; 0000000bH
  005f2	0b		 DB	 11			; 0000000bH
  005f3	0a		 DB	 10			; 0000000aH
_hx_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\stdio.c
;	COMDAT _iaddr
_TEXT	SEGMENT
_tmp$ = -52						; size = 24
tv154 = -28						; size = 4
tv153 = -24						; size = 4
tv144 = -20						; size = 4
tv143 = -16						; size = 4
_i$ = -12						; size = 4
_n$ = -8						; size = 4
_len$ = -4						; size = 4
_str$ = 8						; size = 4
_addr$ = 12						; size = 4
_size$ = 16						; size = 4
_precision$ = 20					; size = 4
_type$ = 24						; size = 4
_iaddr	PROC						; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 194  : 	char tmp[24];
; 195  : 	int i, n, len;
; 196  : 
; 197  : 	len = 0;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _len$[ebp], 0

; 198  : 	for (i = 0; i < 4; i++)

  0000d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00014	eb 09		 jmp	 SHORT $LN4@iaddr
$LN2@iaddr:
  00016	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00019	83 c0 01	 add	 eax, 1
  0001c	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@iaddr:
  0001f	83 7d f4 04	 cmp	 DWORD PTR _i$[ebp], 4
  00023	0f 8d 13 01 00
	00		 jge	 $LN3@iaddr

; 199  : 	{
; 200  : 		if (i != 0) tmp[len++] = '.';

  00029	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  0002d	74 11		 je	 SHORT $LN12@iaddr
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  00032	c6 44 0d cc 2e	 mov	 BYTE PTR _tmp$[ebp+ecx], 46 ; 0000002eH
  00037	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  0003a	83 c2 01	 add	 edx, 1
  0003d	89 55 fc	 mov	 DWORD PTR _len$[ebp], edx
$LN12@iaddr:

; 201  : 		n = addr[i];

  00040	8b 45 0c	 mov	 eax, DWORD PTR _addr$[ebp]
  00043	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  00046	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00049	89 4d f8	 mov	 DWORD PTR _n$[ebp], ecx

; 202  : 
; 203  : 		if (n == 0)

  0004c	83 7d f8 00	 cmp	 DWORD PTR _n$[ebp], 0
  00050	75 26		 jne	 SHORT $LN13@iaddr

; 204  : 			tmp[len++] = digits[0];

  00052	ba 01 00 00 00	 mov	 edx, 1
  00057	6b c2 00	 imul	 eax, edx, 0
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _digits
  00063	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  00066	88 44 0d cc	 mov	 BYTE PTR _tmp$[ebp+ecx], al
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  0006d	83 c1 01	 add	 ecx, 1
  00070	89 4d fc	 mov	 DWORD PTR _len$[ebp], ecx
  00073	e9 bf 00 00 00	 jmp	 $LN14@iaddr
$LN13@iaddr:

; 205  : 		else
; 206  : 		{
; 207  : 			if (n >= 100)

  00078	83 7d f8 64	 cmp	 DWORD PTR _n$[ebp], 100	; 00000064H
  0007c	7c 66		 jl	 SHORT $LN15@iaddr

; 208  : 			{
; 209  : 				tmp[len++] = digits[n / 100];

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00081	99		 cdq
  00082	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00087	f7 f9		 idiv	 ecx
  00089	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  0008c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _digits
  00092	8a 04 01	 mov	 al, BYTE PTR [ecx+eax]
  00095	88 44 15 cc	 mov	 BYTE PTR _tmp$[ebp+edx], al
  00099	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  0009c	83 c1 01	 add	 ecx, 1
  0009f	89 4d fc	 mov	 DWORD PTR _len$[ebp], ecx

; 210  : 				n = n % 100;

  000a2	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  000a5	99		 cdq
  000a6	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000ab	f7 f9		 idiv	 ecx
  000ad	89 55 f8	 mov	 DWORD PTR _n$[ebp], edx

; 211  : 				tmp[len++] = digits[n / 10];

  000b0	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  000b3	99		 cdq
  000b4	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  000b9	f7 f9		 idiv	 ecx
  000bb	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  000be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _digits
  000c4	8a 04 01	 mov	 al, BYTE PTR [ecx+eax]
  000c7	88 44 15 cc	 mov	 BYTE PTR _tmp$[ebp+edx], al
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  000ce	83 c1 01	 add	 ecx, 1
  000d1	89 4d fc	 mov	 DWORD PTR _len$[ebp], ecx

; 212  : 				n = n % 10;

  000d4	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  000d7	99		 cdq
  000d8	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  000dd	f7 f9		 idiv	 ecx
  000df	89 55 f8	 mov	 DWORD PTR _n$[ebp], edx

; 213  : 			}

  000e2	eb 38		 jmp	 SHORT $LN16@iaddr
$LN15@iaddr:

; 214  : 			else if (n >= 10)

  000e4	83 7d f8 0a	 cmp	 DWORD PTR _n$[ebp], 10	; 0000000aH
  000e8	7c 32		 jl	 SHORT $LN16@iaddr

; 215  : 			{
; 216  : 				tmp[len++] = digits[n / 10];

  000ea	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  000ed	99		 cdq
  000ee	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  000f3	f7 f9		 idiv	 ecx
  000f5	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  000f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _digits
  000fe	8a 04 01	 mov	 al, BYTE PTR [ecx+eax]
  00101	88 44 15 cc	 mov	 BYTE PTR _tmp$[ebp+edx], al
  00105	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  00108	83 c1 01	 add	 ecx, 1
  0010b	89 4d fc	 mov	 DWORD PTR _len$[ebp], ecx

; 217  : 				n = n % 10;

  0010e	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00111	99		 cdq
  00112	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00117	f7 f9		 idiv	 ecx
  00119	89 55 f8	 mov	 DWORD PTR _n$[ebp], edx
$LN16@iaddr:

; 218  : 			}
; 219  : 
; 220  : 			tmp[len++] = digits[n];

  0011c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _digits
  00122	03 55 f8	 add	 edx, DWORD PTR _n$[ebp]
  00125	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  00128	8a 0a		 mov	 cl, BYTE PTR [edx]
  0012a	88 4c 05 cc	 mov	 BYTE PTR _tmp$[ebp+eax], cl
  0012e	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  00131	83 c2 01	 add	 edx, 1
  00134	89 55 fc	 mov	 DWORD PTR _len$[ebp], edx
$LN14@iaddr:

; 221  : 		}
; 222  : 	}

  00137	e9 da fe ff ff	 jmp	 $LN2@iaddr
$LN3@iaddr:

; 223  : 
; 224  : 	if (!(type & LEFT)) while (len < size--) *str++ = ' ';

  0013c	8b 45 18	 mov	 eax, DWORD PTR _type$[ebp]
  0013f	83 e0 10	 and	 eax, 16			; 00000010H
  00142	75 2e		 jne	 SHORT $LN18@iaddr
$LN5@iaddr:
  00144	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  00147	89 4d f0	 mov	 DWORD PTR tv143[ebp], ecx
  0014a	8b 55 10	 mov	 edx, DWORD PTR _size$[ebp]
  0014d	89 55 ec	 mov	 DWORD PTR tv144[ebp], edx
  00150	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  00153	83 e8 01	 sub	 eax, 1
  00156	89 45 10	 mov	 DWORD PTR _size$[ebp], eax
  00159	8b 4d f0	 mov	 ecx, DWORD PTR tv143[ebp]
  0015c	3b 4d ec	 cmp	 ecx, DWORD PTR tv144[ebp]
  0015f	7d 11		 jge	 SHORT $LN18@iaddr
  00161	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  00164	c6 02 20	 mov	 BYTE PTR [edx], 32	; 00000020H
  00167	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0016a	83 c0 01	 add	 eax, 1
  0016d	89 45 08	 mov	 DWORD PTR _str$[ebp], eax
  00170	eb d2		 jmp	 SHORT $LN5@iaddr
$LN18@iaddr:

; 225  : 	for (i = 0; i < len; ++i) *str++ = tmp[i];

  00172	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00179	eb 09		 jmp	 SHORT $LN9@iaddr
$LN7@iaddr:
  0017b	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0017e	83 c1 01	 add	 ecx, 1
  00181	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
$LN9@iaddr:
  00184	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00187	3b 55 fc	 cmp	 edx, DWORD PTR _len$[ebp]
  0018a	7d 17		 jge	 SHORT $LN10@iaddr
  0018c	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0018f	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00192	8a 54 0d cc	 mov	 dl, BYTE PTR _tmp$[ebp+ecx]
  00196	88 10		 mov	 BYTE PTR [eax], dl
  00198	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0019b	83 c0 01	 add	 eax, 1
  0019e	89 45 08	 mov	 DWORD PTR _str$[ebp], eax
  001a1	eb d8		 jmp	 SHORT $LN7@iaddr
$LN10@iaddr:

; 226  : 	while (len < size--) *str++ = ' ';

  001a3	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  001a6	89 4d e8	 mov	 DWORD PTR tv153[ebp], ecx
  001a9	8b 55 10	 mov	 edx, DWORD PTR _size$[ebp]
  001ac	89 55 e4	 mov	 DWORD PTR tv154[ebp], edx
  001af	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  001b2	83 e8 01	 sub	 eax, 1
  001b5	89 45 10	 mov	 DWORD PTR _size$[ebp], eax
  001b8	8b 4d e8	 mov	 ecx, DWORD PTR tv153[ebp]
  001bb	3b 4d e4	 cmp	 ecx, DWORD PTR tv154[ebp]
  001be	7d 11		 jge	 SHORT $LN11@iaddr
  001c0	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  001c3	c6 02 20	 mov	 BYTE PTR [edx], 32	; 00000020H
  001c6	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  001c9	83 c0 01	 add	 eax, 1
  001cc	89 45 08	 mov	 DWORD PTR _str$[ebp], eax
  001cf	eb d2		 jmp	 SHORT $LN10@iaddr
$LN11@iaddr:

; 227  : 
; 228  : 	return str;

  001d1	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]

; 229  : }

  001d4	8b e5		 mov	 esp, ebp
  001d6	5d		 pop	 ebp
  001d7	c3		 ret	 0
_iaddr	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\stdio.c
;	COMDAT _eaddr
_TEXT	SEGMENT
_tmp$ = -52						; size = 24
tv137 = -28						; size = 4
tv136 = -24						; size = 4
tv95 = -20						; size = 4
tv94 = -16						; size = 4
_dig$ = -12						; size = 4
_i$ = -8						; size = 4
_len$ = -4						; size = 4
_str$ = 8						; size = 4
_addr$ = 12						; size = 4
_size$ = 16						; size = 4
_precision$ = 20					; size = 4
_type$ = 24						; size = 4
_eaddr	PROC						; COMDAT

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 172  : 	char tmp[24];
; 173  : 	char *dig = digits;

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR _digits
  0000b	89 45 f4	 mov	 DWORD PTR _dig$[ebp], eax

; 174  : 	int i, len;
; 175  : 
; 176  : 	if (type & LARGE)  dig = upper_digits;

  0000e	8b 4d 18	 mov	 ecx, DWORD PTR _type$[ebp]
  00011	83 e1 40	 and	 ecx, 64			; 00000040H
  00014	74 09		 je	 SHORT $LN12@eaddr
  00016	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _upper_digits
  0001c	89 55 f4	 mov	 DWORD PTR _dig$[ebp], edx
$LN12@eaddr:

; 177  : 	len = 0;

  0001f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _len$[ebp], 0

; 178  : 	for (i = 0; i < 6; i++)

  00026	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0002d	eb 09		 jmp	 SHORT $LN4@eaddr
$LN2@eaddr:
  0002f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00032	83 c0 01	 add	 eax, 1
  00035	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@eaddr:
  00038	83 7d f8 06	 cmp	 DWORD PTR _i$[ebp], 6
  0003c	7d 5d		 jge	 SHORT $LN3@eaddr

; 179  : 	{
; 180  : 		if (i != 0) tmp[len++] = ':';

  0003e	83 7d f8 00	 cmp	 DWORD PTR _i$[ebp], 0
  00042	74 11		 je	 SHORT $LN13@eaddr
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  00047	c6 44 0d cc 3a	 mov	 BYTE PTR _tmp$[ebp+ecx], 58 ; 0000003aH
  0004c	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  0004f	83 c2 01	 add	 edx, 1
  00052	89 55 fc	 mov	 DWORD PTR _len$[ebp], edx
$LN13@eaddr:

; 181  : 		tmp[len++] = dig[addr[i] >> 4];

  00055	8b 45 0c	 mov	 eax, DWORD PTR _addr$[ebp]
  00058	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  0005b	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0005e	c1 f9 04	 sar	 ecx, 4
  00061	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  00064	8b 45 f4	 mov	 eax, DWORD PTR _dig$[ebp]
  00067	8a 0c 08	 mov	 cl, BYTE PTR [eax+ecx]
  0006a	88 4c 15 cc	 mov	 BYTE PTR _tmp$[ebp+edx], cl
  0006e	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  00071	83 c2 01	 add	 edx, 1
  00074	89 55 fc	 mov	 DWORD PTR _len$[ebp], edx

; 182  : 		tmp[len++] = dig[addr[i] & 0x0F];

  00077	8b 45 0c	 mov	 eax, DWORD PTR _addr$[ebp]
  0007a	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  0007d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00080	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00083	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  00086	8b 45 f4	 mov	 eax, DWORD PTR _dig$[ebp]
  00089	8a 0c 08	 mov	 cl, BYTE PTR [eax+ecx]
  0008c	88 4c 15 cc	 mov	 BYTE PTR _tmp$[ebp+edx], cl
  00090	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  00093	83 c2 01	 add	 edx, 1
  00096	89 55 fc	 mov	 DWORD PTR _len$[ebp], edx

; 183  : 	}

  00099	eb 94		 jmp	 SHORT $LN2@eaddr
$LN3@eaddr:

; 184  : 
; 185  : 	if (!(type & LEFT)) while (len < size--) *str++ = ' ';

  0009b	8b 45 18	 mov	 eax, DWORD PTR _type$[ebp]
  0009e	83 e0 10	 and	 eax, 16			; 00000010H
  000a1	75 2e		 jne	 SHORT $LN14@eaddr
$LN5@eaddr:
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  000a6	89 4d f0	 mov	 DWORD PTR tv94[ebp], ecx
  000a9	8b 55 10	 mov	 edx, DWORD PTR _size$[ebp]
  000ac	89 55 ec	 mov	 DWORD PTR tv95[ebp], edx
  000af	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  000b2	83 e8 01	 sub	 eax, 1
  000b5	89 45 10	 mov	 DWORD PTR _size$[ebp], eax
  000b8	8b 4d f0	 mov	 ecx, DWORD PTR tv94[ebp]
  000bb	3b 4d ec	 cmp	 ecx, DWORD PTR tv95[ebp]
  000be	7d 11		 jge	 SHORT $LN14@eaddr
  000c0	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  000c3	c6 02 20	 mov	 BYTE PTR [edx], 32	; 00000020H
  000c6	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  000c9	83 c0 01	 add	 eax, 1
  000cc	89 45 08	 mov	 DWORD PTR _str$[ebp], eax
  000cf	eb d2		 jmp	 SHORT $LN5@eaddr
$LN14@eaddr:

; 186  : 	for (i = 0; i < len; ++i) *str++ = tmp[i];

  000d1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000d8	eb 09		 jmp	 SHORT $LN9@eaddr
$LN7@eaddr:
  000da	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000dd	83 c1 01	 add	 ecx, 1
  000e0	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$LN9@eaddr:
  000e3	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  000e6	3b 55 fc	 cmp	 edx, DWORD PTR _len$[ebp]
  000e9	7d 17		 jge	 SHORT $LN10@eaddr
  000eb	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  000ee	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000f1	8a 54 0d cc	 mov	 dl, BYTE PTR _tmp$[ebp+ecx]
  000f5	88 10		 mov	 BYTE PTR [eax], dl
  000f7	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  000fa	83 c0 01	 add	 eax, 1
  000fd	89 45 08	 mov	 DWORD PTR _str$[ebp], eax
  00100	eb d8		 jmp	 SHORT $LN7@eaddr
$LN10@eaddr:

; 187  : 	while (len < size--) *str++ = ' ';

  00102	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  00105	89 4d e8	 mov	 DWORD PTR tv136[ebp], ecx
  00108	8b 55 10	 mov	 edx, DWORD PTR _size$[ebp]
  0010b	89 55 e4	 mov	 DWORD PTR tv137[ebp], edx
  0010e	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  00111	83 e8 01	 sub	 eax, 1
  00114	89 45 10	 mov	 DWORD PTR _size$[ebp], eax
  00117	8b 4d e8	 mov	 ecx, DWORD PTR tv136[ebp]
  0011a	3b 4d e4	 cmp	 ecx, DWORD PTR tv137[ebp]
  0011d	7d 11		 jge	 SHORT $LN11@eaddr
  0011f	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  00122	c6 02 20	 mov	 BYTE PTR [edx], 32	; 00000020H
  00125	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00128	83 c0 01	 add	 eax, 1
  0012b	89 45 08	 mov	 DWORD PTR _str$[ebp], eax
  0012e	eb d2		 jmp	 SHORT $LN10@eaddr
$LN11@eaddr:

; 188  : 
; 189  : 	return str;

  00130	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]

; 190  : }

  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c3		 ret	 0
_eaddr	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\stdio.c
;	COMDAT __number
_TEXT	SEGMENT
_tmp$ = -108						; size = 66
tv175 = -40						; size = 4
tv169 = -36						; size = 4
tv165 = -32						; size = 4
tv164 = -28						; size = 4
tv160 = -24						; size = 4
tv142 = -20						; size = 4
_dig$ = -16						; size = 4
tv73 = -12						; size = 4
_i$ = -8						; size = 4
_c$ = -2						; size = 1
_sign$ = -1						; size = 1
_str$ = 8						; size = 4
_num$ = 12						; size = 4
_base$ = 16						; size = 4
_size$ = 20						; size = 4
_precision$ = 24					; size = 4
_type$ = 28						; size = 4
__number PROC						; COMDAT

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH

; 79   : 	char c, sign, tmp[66];
; 80   : 	char *dig = digits;

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR _digits
  0000b	89 45 f0	 mov	 DWORD PTR _dig$[ebp], eax

; 81   : 	int i;
; 82   : 
; 83   : #if 0
; 84   : 	int _num = num;
; 85   : 	i = 0;
; 86   : 	if (_num == 0)
; 87   : 		str[i++] = '0';
; 88   : 	else
; 89   : 	{
; 90   : 		while (_num != 0)
; 91   : 		{
; 92   : 			str[i++] = dig[((unsigned long)_num) % (unsigned)base];
; 93   : 			_num = ((unsigned long)_num) / (unsigned)base;
; 94   : 		}
; 95   : 	}
; 96   : 	return str + i;
; 97   : #endif
; 98   : 
; 99   : 	if (type & LARGE)  dig = upper_digits;

  0000e	8b 4d 1c	 mov	 ecx, DWORD PTR _type$[ebp]
  00011	83 e1 40	 and	 ecx, 64			; 00000040H
  00014	74 09		 je	 SHORT $LN14@number
  00016	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _upper_digits
  0001c	89 55 f0	 mov	 DWORD PTR _dig$[ebp], edx
$LN14@number:

; 100  : 	if (type & LEFT) type &= ~ZEROPAD;

  0001f	8b 45 1c	 mov	 eax, DWORD PTR _type$[ebp]
  00022	83 e0 10	 and	 eax, 16			; 00000010H
  00025	74 09		 je	 SHORT $LN15@number
  00027	8b 4d 1c	 mov	 ecx, DWORD PTR _type$[ebp]
  0002a	83 e1 fe	 and	 ecx, -2			; fffffffeH
  0002d	89 4d 1c	 mov	 DWORD PTR _type$[ebp], ecx
$LN15@number:

; 101  : 	if (base < 2 || base > 36) return 0;

  00030	83 7d 10 02	 cmp	 DWORD PTR _base$[ebp], 2
  00034	7c 06		 jl	 SHORT $LN17@number
  00036	83 7d 10 24	 cmp	 DWORD PTR _base$[ebp], 36 ; 00000024H
  0003a	7e 07		 jle	 SHORT $LN16@number
$LN17@number:
  0003c	33 c0		 xor	 eax, eax
  0003e	e9 4f 02 00 00	 jmp	 $LN1@number
$LN16@number:

; 102  : 
; 103  : 	c = (type & ZEROPAD) ? '0' : ' ';

  00043	8b 55 1c	 mov	 edx, DWORD PTR _type$[ebp]
  00046	83 e2 01	 and	 edx, 1
  00049	74 09		 je	 SHORT $LN39@number
  0004b	c7 45 f4 30 00
	00 00		 mov	 DWORD PTR tv73[ebp], 48	; 00000030H
  00052	eb 07		 jmp	 SHORT $LN40@number
$LN39@number:
  00054	c7 45 f4 20 00
	00 00		 mov	 DWORD PTR tv73[ebp], 32	; 00000020H
$LN40@number:
  0005b	8a 45 f4	 mov	 al, BYTE PTR tv73[ebp]
  0005e	88 45 fe	 mov	 BYTE PTR _c$[ebp], al

; 104  : 	sign = 0;

  00061	c6 45 ff 00	 mov	 BYTE PTR _sign$[ebp], 0

; 105  : 	if (type & SIGN)

  00065	8b 4d 1c	 mov	 ecx, DWORD PTR _type$[ebp]
  00068	83 e1 02	 and	 ecx, 2
  0006b	74 49		 je	 SHORT $LN18@number

; 106  : 	{
; 107  : 		if (num < 0)

  0006d	83 7d 0c 00	 cmp	 DWORD PTR _num$[ebp], 0
  00071	7d 17		 jge	 SHORT $LN19@number

; 108  : 		{
; 109  : 			sign = '-';

  00073	c6 45 ff 2d	 mov	 BYTE PTR _sign$[ebp], 45 ; 0000002dH

; 110  : 			num = -num;

  00077	8b 55 0c	 mov	 edx, DWORD PTR _num$[ebp]
  0007a	f7 da		 neg	 edx
  0007c	89 55 0c	 mov	 DWORD PTR _num$[ebp], edx

; 111  : 			size--;

  0007f	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00082	83 e8 01	 sub	 eax, 1
  00085	89 45 14	 mov	 DWORD PTR _size$[ebp], eax

; 112  : 		}

  00088	eb 2c		 jmp	 SHORT $LN18@number
$LN19@number:

; 113  : 		else if (type & PLUS)

  0008a	8b 4d 1c	 mov	 ecx, DWORD PTR _type$[ebp]
  0008d	83 e1 04	 and	 ecx, 4
  00090	74 0f		 je	 SHORT $LN21@number

; 114  : 		{
; 115  : 			sign = '+';

  00092	c6 45 ff 2b	 mov	 BYTE PTR _sign$[ebp], 43 ; 0000002bH

; 116  : 			size--;

  00096	8b 55 14	 mov	 edx, DWORD PTR _size$[ebp]
  00099	83 ea 01	 sub	 edx, 1
  0009c	89 55 14	 mov	 DWORD PTR _size$[ebp], edx

; 117  : 		}

  0009f	eb 15		 jmp	 SHORT $LN18@number
$LN21@number:

; 118  : 		else if (type & SPACE)

  000a1	8b 45 1c	 mov	 eax, DWORD PTR _type$[ebp]
  000a4	83 e0 08	 and	 eax, 8
  000a7	74 0d		 je	 SHORT $LN18@number

; 119  : 		{
; 120  : 			sign = ' ';

  000a9	c6 45 ff 20	 mov	 BYTE PTR _sign$[ebp], 32 ; 00000020H

; 121  : 			size--;

  000ad	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  000b0	83 e9 01	 sub	 ecx, 1
  000b3	89 4d 14	 mov	 DWORD PTR _size$[ebp], ecx
$LN18@number:

; 122  : 		}
; 123  : 	}
; 124  : 
; 125  : 	if (type & SPECIAL)

  000b6	8b 55 1c	 mov	 edx, DWORD PTR _type$[ebp]
  000b9	83 e2 20	 and	 edx, 32			; 00000020H
  000bc	74 20		 je	 SHORT $LN24@number

; 126  : 	{
; 127  : 		if (base == 16)

  000be	83 7d 10 10	 cmp	 DWORD PTR _base$[ebp], 16 ; 00000010H
  000c2	75 0b		 jne	 SHORT $LN25@number

; 128  : 			size -= 2;

  000c4	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  000c7	83 e8 02	 sub	 eax, 2
  000ca	89 45 14	 mov	 DWORD PTR _size$[ebp], eax
  000cd	eb 0f		 jmp	 SHORT $LN24@number
$LN25@number:

; 129  : 		else if (base == 8)

  000cf	83 7d 10 08	 cmp	 DWORD PTR _base$[ebp], 8
  000d3	75 09		 jne	 SHORT $LN24@number

; 130  : 			size--;

  000d5	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  000d8	83 e9 01	 sub	 ecx, 1
  000db	89 4d 14	 mov	 DWORD PTR _size$[ebp], ecx
$LN24@number:

; 131  : 	}
; 132  : 
; 133  : 	i = 0;

  000de	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 134  : 
; 135  : 	if (num == 0)

  000e5	83 7d 0c 00	 cmp	 DWORD PTR _num$[ebp], 0
  000e9	75 13		 jne	 SHORT $LN2@number

; 136  : 		tmp[i++] = '0';

  000eb	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  000ee	c6 44 15 94 30	 mov	 BYTE PTR _tmp$[ebp+edx], 48 ; 00000030H
  000f3	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000f6	83 c0 01	 add	 eax, 1
  000f9	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  000fc	eb 31		 jmp	 SHORT $LN29@number
$LN2@number:

; 137  : 	else
; 138  : 	{
; 139  : 		while (num != 0)

  000fe	83 7d 0c 00	 cmp	 DWORD PTR _num$[ebp], 0
  00102	74 2b		 je	 SHORT $LN29@number

; 140  : 		{
; 141  : 			tmp[i++] = dig[((unsigned long)num) % (unsigned)base];

  00104	8b 45 0c	 mov	 eax, DWORD PTR _num$[ebp]
  00107	33 d2		 xor	 edx, edx
  00109	f7 75 10	 div	 DWORD PTR _base$[ebp]
  0010c	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0010f	8b 45 f0	 mov	 eax, DWORD PTR _dig$[ebp]
  00112	8a 14 10	 mov	 dl, BYTE PTR [eax+edx]
  00115	88 54 0d 94	 mov	 BYTE PTR _tmp$[ebp+ecx], dl
  00119	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0011c	83 c0 01	 add	 eax, 1
  0011f	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax

; 142  : 			num = ((unsigned long)num) / (unsigned)base;

  00122	8b 45 0c	 mov	 eax, DWORD PTR _num$[ebp]
  00125	33 d2		 xor	 edx, edx
  00127	f7 75 10	 div	 DWORD PTR _base$[ebp]
  0012a	89 45 0c	 mov	 DWORD PTR _num$[ebp], eax

; 143  : 		}

  0012d	eb cf		 jmp	 SHORT $LN2@number
$LN29@number:

; 144  : 	}
; 145  : 
; 146  : 	if (i > precision) precision = i;

  0012f	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00132	3b 4d 18	 cmp	 ecx, DWORD PTR _precision$[ebp]
  00135	7e 06		 jle	 SHORT $LN30@number
  00137	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0013a	89 55 18	 mov	 DWORD PTR _precision$[ebp], edx
$LN30@number:

; 147  : 	size -= precision;

  0013d	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00140	2b 45 18	 sub	 eax, DWORD PTR _precision$[ebp]
  00143	89 45 14	 mov	 DWORD PTR _size$[ebp], eax

; 148  : 	if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';

  00146	8b 4d 1c	 mov	 ecx, DWORD PTR _type$[ebp]
  00149	83 e1 11	 and	 ecx, 17			; 00000011H
  0014c	75 26		 jne	 SHORT $LN31@number
$LN4@number:
  0014e	8b 55 14	 mov	 edx, DWORD PTR _size$[ebp]
  00151	89 55 ec	 mov	 DWORD PTR tv142[ebp], edx
  00154	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00157	83 e8 01	 sub	 eax, 1
  0015a	89 45 14	 mov	 DWORD PTR _size$[ebp], eax
  0015d	83 7d ec 00	 cmp	 DWORD PTR tv142[ebp], 0
  00161	7e 11		 jle	 SHORT $LN31@number
  00163	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00166	c6 01 20	 mov	 BYTE PTR [ecx], 32	; 00000020H
  00169	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  0016c	83 c2 01	 add	 edx, 1
  0016f	89 55 08	 mov	 DWORD PTR _str$[ebp], edx
  00172	eb da		 jmp	 SHORT $LN4@number
$LN31@number:

; 149  : 	if (sign) *str++ = sign;

  00174	0f be 45 ff	 movsx	 eax, BYTE PTR _sign$[ebp]
  00178	85 c0		 test	 eax, eax
  0017a	74 11		 je	 SHORT $LN32@number
  0017c	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0017f	8a 55 ff	 mov	 dl, BYTE PTR _sign$[ebp]
  00182	88 11		 mov	 BYTE PTR [ecx], dl
  00184	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00187	83 c0 01	 add	 eax, 1
  0018a	89 45 08	 mov	 DWORD PTR _str$[ebp], eax
$LN32@number:

; 150  : 
; 151  : 	if (type & SPECIAL)

  0018d	8b 4d 1c	 mov	 ecx, DWORD PTR _type$[ebp]
  00190	83 e1 20	 and	 ecx, 32			; 00000020H
  00193	74 4a		 je	 SHORT $LN33@number

; 152  : 	{
; 153  : 		if (base == 8)

  00195	83 7d 10 08	 cmp	 DWORD PTR _base$[ebp], 8
  00199	75 11		 jne	 SHORT $LN34@number

; 154  : 			*str++ = '0';

  0019b	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  0019e	c6 02 30	 mov	 BYTE PTR [edx], 48	; 00000030H
  001a1	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  001a4	83 c0 01	 add	 eax, 1
  001a7	89 45 08	 mov	 DWORD PTR _str$[ebp], eax
  001aa	eb 33		 jmp	 SHORT $LN33@number
$LN34@number:

; 155  : 		else if (base == 16)

  001ac	83 7d 10 10	 cmp	 DWORD PTR _base$[ebp], 16 ; 00000010H
  001b0	75 2d		 jne	 SHORT $LN33@number

; 156  : 		{
; 157  : 			*str++ = '0';

  001b2	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  001b5	c6 01 30	 mov	 BYTE PTR [ecx], 48	; 00000030H
  001b8	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  001bb	83 c2 01	 add	 edx, 1
  001be	89 55 08	 mov	 DWORD PTR _str$[ebp], edx

; 158  : 			*str++ = digits[33];

  001c1	b8 01 00 00 00	 mov	 eax, 1
  001c6	6b c8 21	 imul	 ecx, eax, 33
  001c9	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  001cc	a1 00 00 00 00	 mov	 eax, DWORD PTR _digits
  001d1	8a 0c 08	 mov	 cl, BYTE PTR [eax+ecx]
  001d4	88 0a		 mov	 BYTE PTR [edx], cl
  001d6	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  001d9	83 c2 01	 add	 edx, 1
  001dc	89 55 08	 mov	 DWORD PTR _str$[ebp], edx
$LN33@number:

; 159  : 		}
; 160  : 	}
; 161  : 
; 162  : 	if (!(type & LEFT)) while (size-- > 0) *str++ = c;

  001df	8b 45 1c	 mov	 eax, DWORD PTR _type$[ebp]
  001e2	83 e0 10	 and	 eax, 16			; 00000010H
  001e5	75 28		 jne	 SHORT $LN8@number
$LN6@number:
  001e7	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  001ea	89 4d e8	 mov	 DWORD PTR tv160[ebp], ecx
  001ed	8b 55 14	 mov	 edx, DWORD PTR _size$[ebp]
  001f0	83 ea 01	 sub	 edx, 1
  001f3	89 55 14	 mov	 DWORD PTR _size$[ebp], edx
  001f6	83 7d e8 00	 cmp	 DWORD PTR tv160[ebp], 0
  001fa	7e 13		 jle	 SHORT $LN8@number
  001fc	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  001ff	8a 4d fe	 mov	 cl, BYTE PTR _c$[ebp]
  00202	88 08		 mov	 BYTE PTR [eax], cl
  00204	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  00207	83 c2 01	 add	 edx, 1
  0020a	89 55 08	 mov	 DWORD PTR _str$[ebp], edx
  0020d	eb d8		 jmp	 SHORT $LN6@number
$LN8@number:

; 163  : 	while (i < precision--) *str++ = '0';

  0020f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00212	89 45 e4	 mov	 DWORD PTR tv164[ebp], eax
  00215	8b 4d 18	 mov	 ecx, DWORD PTR _precision$[ebp]
  00218	89 4d e0	 mov	 DWORD PTR tv165[ebp], ecx
  0021b	8b 55 18	 mov	 edx, DWORD PTR _precision$[ebp]
  0021e	83 ea 01	 sub	 edx, 1
  00221	89 55 18	 mov	 DWORD PTR _precision$[ebp], edx
  00224	8b 45 e4	 mov	 eax, DWORD PTR tv164[ebp]
  00227	3b 45 e0	 cmp	 eax, DWORD PTR tv165[ebp]
  0022a	7d 11		 jge	 SHORT $LN10@number
  0022c	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0022f	c6 01 30	 mov	 BYTE PTR [ecx], 48	; 00000030H
  00232	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  00235	83 c2 01	 add	 edx, 1
  00238	89 55 08	 mov	 DWORD PTR _str$[ebp], edx
  0023b	eb d2		 jmp	 SHORT $LN8@number
$LN10@number:

; 164  : 	while (i-- > 0) *str++ = tmp[i];

  0023d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00240	89 45 dc	 mov	 DWORD PTR tv169[ebp], eax
  00243	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00246	83 e9 01	 sub	 ecx, 1
  00249	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
  0024c	83 7d dc 00	 cmp	 DWORD PTR tv169[ebp], 0
  00250	7e 17		 jle	 SHORT $LN12@number
  00252	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  00255	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00258	8a 4c 05 94	 mov	 cl, BYTE PTR _tmp$[ebp+eax]
  0025c	88 0a		 mov	 BYTE PTR [edx], cl
  0025e	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  00261	83 c2 01	 add	 edx, 1
  00264	89 55 08	 mov	 DWORD PTR _str$[ebp], edx
  00267	eb d4		 jmp	 SHORT $LN10@number
$LN12@number:

; 165  : 	while (size-- > 0) *str++ = ' ';

  00269	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  0026c	89 45 d8	 mov	 DWORD PTR tv175[ebp], eax
  0026f	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  00272	83 e9 01	 sub	 ecx, 1
  00275	89 4d 14	 mov	 DWORD PTR _size$[ebp], ecx
  00278	83 7d d8 00	 cmp	 DWORD PTR tv175[ebp], 0
  0027c	7e 11		 jle	 SHORT $LN13@number
  0027e	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  00281	c6 02 20	 mov	 BYTE PTR [edx], 32	; 00000020H
  00284	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00287	83 c0 01	 add	 eax, 1
  0028a	89 45 08	 mov	 DWORD PTR _str$[ebp], eax
  0028d	eb da		 jmp	 SHORT $LN12@number
$LN13@number:

; 166  : 
; 167  : 	return str;

  0028f	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
$LN1@number:

; 168  : }

  00292	8b e5		 mov	 esp, ebp
  00294	5d		 pop	 ebp
  00295	c3		 ret	 0
__number ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\stdio.c
;	COMDAT _skip_atoi
_TEXT	SEGMENT
_i$ = -4						; size = 4
_s$ = 8							; size = 4
_skip_atoi PROC						; COMDAT

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 72   :   int i = 0;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN2@skip_atoi:

; 73   :   while (is_digit(**s)) i = i*10 + *((*s)++) - '0';

  0000b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00013	83 fa 30	 cmp	 edx, 48			; 00000030H
  00016	7c 2f		 jl	 SHORT $LN3@skip_atoi
  00018	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00020	83 fa 39	 cmp	 edx, 57			; 00000039H
  00023	7f 22		 jg	 SHORT $LN3@skip_atoi
  00025	6b 45 fc 0a	 imul	 eax, DWORD PTR _i$[ebp], 10
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0002c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002e	0f be 0a	 movsx	 ecx, BYTE PTR [edx]
  00031	8d 54 08 d0	 lea	 edx, DWORD PTR [eax+ecx-48]
  00035	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
  00038	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	83 c1 01	 add	 ecx, 1
  00040	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00043	89 0a		 mov	 DWORD PTR [edx], ecx
  00045	eb c4		 jmp	 SHORT $LN2@skip_atoi
$LN3@skip_atoi:

; 74   :   return i;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]

; 75   : }

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_skip_atoi ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\stdio.c
;	COMDAT _strnlen
_TEXT	SEGMENT
tv69 = -8						; size = 4
_sc$ = -4						; size = 4
_s$ = 8							; size = 4
_count$ = 12						; size = 4
_strnlen PROC						; COMDAT

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 65   :   const char *sc;
; 66   :   for (sc = s; *sc != '\0' && count--; ++sc);

  00006	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR _sc$[ebp], eax
  0000c	eb 09		 jmp	 SHORT $LN4@strnlen
$LN2@strnlen:
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _sc$[ebp]
  00011	83 c1 01	 add	 ecx, 1
  00014	89 4d fc	 mov	 DWORD PTR _sc$[ebp], ecx
$LN4@strnlen:
  00017	8b 55 fc	 mov	 edx, DWORD PTR _sc$[ebp]
  0001a	0f be 02	 movsx	 eax, BYTE PTR [edx]
  0001d	85 c0		 test	 eax, eax
  0001f	74 17		 je	 SHORT $LN3@strnlen
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR _count$[ebp]
  00024	89 4d f8	 mov	 DWORD PTR tv69[ebp], ecx
  00027	8b 55 0c	 mov	 edx, DWORD PTR _count$[ebp]
  0002a	83 ea 01	 sub	 edx, 1
  0002d	89 55 0c	 mov	 DWORD PTR _count$[ebp], edx
  00030	83 7d f8 00	 cmp	 DWORD PTR tv69[ebp], 0
  00034	74 02		 je	 SHORT $LN3@strnlen
  00036	eb d6		 jmp	 SHORT $LN2@strnlen
$LN3@strnlen:

; 67   :   return sc - s;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _sc$[ebp]
  0003b	2b 45 08	 sub	 eax, DWORD PTR _s$[ebp]

; 68   : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
_strnlen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\stdio.c
;	COMDAT __hx_snprintf
_TEXT	SEGMENT
_buff$ = -136						; size = 128
_len$ = -8						; size = 4
_args$ = -4						; size = 4
_buf$ = 8						; size = 4
_n$ = 12						; size = 4
_fmt$ = 16						; size = 4
__hx_snprintf PROC					; COMDAT

; 692  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H

; 693  :   va_list args;
; 694  :   int len;
; 695  : #if DEFAULT_STACK_SIZE < 2048
; 696  :   char buff[128];
; 697  : #else
; 698  :   char buff[256];
; 699  : #endif
; 700  : 
; 701  :   va_start(args, fmt);

  00009	8d 45 14	 lea	 eax, DWORD PTR _fmt$[ebp+4]
  0000c	89 45 fc	 mov	 DWORD PTR _args$[ebp], eax

; 702  :   len = hx_vsprintf(buff, fmt, args);

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _args$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 10	 mov	 edx, DWORD PTR _fmt$[ebp]
  00016	52		 push	 edx
  00017	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _buff$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _hx_vsprintf
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 703  :   va_end(args);

  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _args$[ebp], 0

; 704  : 
; 705  :   //Now copy the result into buf.
; 706  :   strncpy(buf,buff,n - 1);

  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  00033	83 e9 01	 sub	 ecx, 1
  00036	51		 push	 ecx
  00037	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR _buff$[ebp]
  0003d	52		 push	 edx
  0003e	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _strncpy
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 707  :   buf[n - 1] = 0;

  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0004d	03 4d 0c	 add	 ecx, DWORD PTR _n$[ebp]
  00050	c6 41 ff 00	 mov	 BYTE PTR [ecx-1], 0

; 708  : 
; 709  :   return n;

  00054	8b 45 0c	 mov	 eax, DWORD PTR _n$[ebp]

; 710  : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
__hx_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\stdio.c
;	COMDAT __hx_vfprintf
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
__hx_vfprintf PROC					; COMDAT

; 714  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 715  : 	return 0;

  00003	33 c0		 xor	 eax, eax

; 716  : }

  00005	5d		 pop	 ebp
  00006	c3		 ret	 0
__hx_vfprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\stdio.c
;	COMDAT __hx_sprintf
_TEXT	SEGMENT
_n$ = -8						; size = 4
_args$ = -4						; size = 4
_buf$ = 8						; size = 4
_fmt$ = 12						; size = 4
__hx_sprintf PROC					; COMDAT

; 630  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 631  : 	va_list args;
; 632  : 	int n;
; 633  : 
; 634  : 	va_start(args, fmt);

  00006	8d 45 10	 lea	 eax, DWORD PTR _fmt$[ebp+4]
  00009	89 45 fc	 mov	 DWORD PTR _args$[ebp], eax

; 635  : 	n = hx_vsprintf(buf, fmt, args);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _args$[ebp]
  0000f	51		 push	 ecx
  00010	8b 55 0c	 mov	 edx, DWORD PTR _fmt$[ebp]
  00013	52		 push	 edx
  00014	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 _hx_vsprintf
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax

; 636  : 	va_end(args);

  00023	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _args$[ebp], 0

; 637  : 
; 638  : 	return n;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]

; 639  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
__hx_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\stdio.c
;	COMDAT __hx_printf
_TEXT	SEGMENT
_buff$ = -280						; size = 256
_y$ = -24						; size = 4
_n$ = -20						; size = 4
_args$ = -16						; size = 4
_x$ = -12						; size = 4
_wr$ = -8						; size = 2
_i$ = -4						; size = 4
_fmt$ = 8						; size = 4
__hx_printf PROC					; COMDAT

; 646  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	56		 push	 esi

; 647  : 	char buff[MAX_BUFFER_SIZE];
; 648  : 	va_list args;
; 649  : 	int n = 0;

  0000a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0

; 650  : 	int i = 0;

  00011	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 651  : 	DWORD x, y; //Cursor position control.
; 652  : 	WORD wr = 0x0700;

  00018	b8 00 07 00 00	 mov	 eax, 1792		; 00000700H
  0001d	66 89 45 f8	 mov	 WORD PTR _wr$[ebp], ax

; 653  : 
; 654  : 	va_start(args,fmt);

  00021	8d 4d 0c	 lea	 ecx, DWORD PTR _fmt$[ebp+4]
  00024	89 4d f0	 mov	 DWORD PTR _args$[ebp], ecx

; 655  : 	n = hx_vsprintf(buff,fmt,args);

  00027	8b 55 f0	 mov	 edx, DWORD PTR _args$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR _fmt$[ebp]
  0002e	50		 push	 eax
  0002f	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _buff$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 _hx_vsprintf
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003e	89 45 ec	 mov	 DWORD PTR _n$[ebp], eax

; 656  : 	va_end(args);

  00041	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _args$[ebp], 0
$LN2@hx_printf:

; 657  : 
; 658  : 	//Print out the string buffer.
; 659  : 	while(buff[i])

  00048	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0004b	0f be 84 15 e8
	fe ff ff	 movsx	 eax, BYTE PTR _buff$[ebp+edx]
  00053	85 c0		 test	 eax, eax
  00055	0f 84 e1 00 00
	00		 je	 $LN3@hx_printf

; 660  : 	{
; 661  : 		if('\n' == buff[i])

  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0005e	0f be 94 0d e8
	fe ff ff	 movsx	 edx, BYTE PTR _buff$[ebp+ecx]
  00066	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  00069	75 15		 jne	 SHORT $LN4@hx_printf

; 662  : 		{
; 663  : 			GotoHome();

  0006b	e8 00 00 00 00	 call	 _GotoHome

; 664  : 			ChangeLine();

  00070	e8 00 00 00 00	 call	 _ChangeLine

; 665  : 			i ++;

  00075	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00078	83 c0 01	 add	 eax, 1
  0007b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 666  : 			continue;

  0007e	eb c8		 jmp	 SHORT $LN2@hx_printf
$LN4@hx_printf:

; 667  : 		}
; 668  : 		if('\r' == buff[i])

  00080	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00083	0f be 94 0d e8
	fe ff ff	 movsx	 edx, BYTE PTR _buff$[ebp+ecx]
  0008b	83 fa 0d	 cmp	 edx, 13			; 0000000dH
  0008e	75 10		 jne	 SHORT $LN5@hx_printf

; 669  : 		{
; 670  : 			GotoHome();

  00090	e8 00 00 00 00	 call	 _GotoHome

; 671  : 			i ++;

  00095	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00098	83 c0 01	 add	 eax, 1
  0009b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 672  : 			continue;

  0009e	eb a8		 jmp	 SHORT $LN2@hx_printf
$LN5@hx_printf:

; 673  : 		}
; 674  : 		if ('\t' == buff[i])

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000a3	0f be 94 0d e8
	fe ff ff	 movsx	 edx, BYTE PTR _buff$[ebp+ecx]
  000ab	83 fa 09	 cmp	 edx, 9
  000ae	75 47		 jne	 SHORT $LN6@hx_printf

; 675  : 		{
; 676  : 			GetCursorPos((WORD*)&x, (WORD*)&y);

  000b0	8d 45 e8	 lea	 eax, DWORD PTR _y$[ebp]
  000b3	50		 push	 eax
  000b4	8d 4d f4	 lea	 ecx, DWORD PTR _x$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 _GetCursorPos
  000bd	83 c4 08	 add	 esp, 8

; 677  : 			x = x + TAB_SPACE_NUM - (x % TAB_SPACE_NUM);

  000c0	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  000c3	83 c1 08	 add	 ecx, 8
  000c6	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  000c9	33 d2		 xor	 edx, edx
  000cb	be 08 00 00 00	 mov	 esi, 8
  000d0	f7 f6		 div	 esi
  000d2	2b ca		 sub	 ecx, edx
  000d4	89 4d f4	 mov	 DWORD PTR _x$[ebp], ecx

; 678  : 			SetCursorPos((WORD)x,(WORD)y);

  000d7	0f b7 55 e8	 movzx	 edx, WORD PTR _y$[ebp]
  000db	52		 push	 edx
  000dc	0f b7 45 f4	 movzx	 eax, WORD PTR _x$[ebp]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 _SetCursorPos
  000e6	83 c4 08	 add	 esp, 8

; 679  : 			i++;

  000e9	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000ec	83 c1 01	 add	 ecx, 1
  000ef	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx

; 680  : 			continue;

  000f2	e9 51 ff ff ff	 jmp	 $LN2@hx_printf
$LN6@hx_printf:

; 681  : 		}
; 682  : 		wr += buff[i];

  000f7	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000fa	0f be 84 15 e8
	fe ff ff	 movsx	 eax, BYTE PTR _buff$[ebp+edx]
  00102	0f b7 4d f8	 movzx	 ecx, WORD PTR _wr$[ebp]
  00106	03 c8		 add	 ecx, eax
  00108	66 89 4d f8	 mov	 WORD PTR _wr$[ebp], cx

; 683  : 		PrintChar(wr);

  0010c	0f b7 55 f8	 movzx	 edx, WORD PTR _wr$[ebp]
  00110	52		 push	 edx
  00111	e8 00 00 00 00	 call	 _PrintChar
  00116	83 c4 04	 add	 esp, 4

; 684  : 		wr -= buff[i];

  00119	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0011c	0f be 8c 05 e8
	fe ff ff	 movsx	 ecx, BYTE PTR _buff$[ebp+eax]
  00124	0f b7 55 f8	 movzx	 edx, WORD PTR _wr$[ebp]
  00128	2b d1		 sub	 edx, ecx
  0012a	66 89 55 f8	 mov	 WORD PTR _wr$[ebp], dx

; 685  : 		i ++;

  0012e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00131	83 c0 01	 add	 eax, 1
  00134	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 686  : 	}

  00137	e9 0c ff ff ff	 jmp	 $LN2@hx_printf
$LN3@hx_printf:

; 687  : 	return 0;

  0013c	33 c0		 xor	 eax, eax

; 688  : }

  0013e	5e		 pop	 esi
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c3		 ret	 0
__hx_printf ENDP
_TEXT	ENDS
END
