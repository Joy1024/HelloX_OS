; Listing generated by Microsoft (R) Optimizing Compiler Version 19.13.26128.0 

	TITLE	C:\HelloX\personal\HelloX_OS\app\yeelight\hxlib\trig.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_init_jk DD	02H
	DD	03H
	DD	04H
	DD	06H
_PIo2	DQ	03ff921fb40000000r		; 1.5708
	DQ	03e74442d00000000r		; 7.54979e-08
	DQ	03cf8469880000000r		; 5.3903e-15
	DQ	03b78cc5160000000r		; 3.282e-22
	DQ	039f01b8380000000r		; 1.27066e-29
	DQ	0387a252040000000r		; 1.22933e-36
	DQ	036e3822280000000r		; 2.7337e-44
	DQ	03569f31d00000000r		; 2.16742e-51
_ipio2	DD	0a2f983H
	DD	06e4e44H
	DD	01529fcH
	DD	02757d1H
	DD	0f534ddH
	DD	0c0db62H
	DD	095993cH
	DD	0439041H
	DD	0fe5163H
	DD	0abdebbH
	DD	0c561b7H
	DD	0246e3aH
	DD	0424dd2H
	DD	0e00649H
	DD	02eea09H
	DD	0d1921cH
	DD	0fe1debH
	DD	01cb129H
	DD	0a73ee8H
	DD	08235f5H
	DD	02ebb44H
	DD	084e99cH
	DD	07026b4H
	DD	05f7e41H
	DD	03991d6H
	DD	0398353H
	DD	039f49cH
	DD	0845f8bH
	DD	0bdf928H
	DD	03b1ff8H
	DD	097ffdeH
	DD	05980fH
	DD	0ef2f11H
	DD	08b5a0aH
	DD	06d1f6dH
	DD	0367ecfH
	DD	027cb09H
	DD	0b74f46H
	DD	03f669eH
	DD	05fea2dH
	DD	07527baH
	DD	0c7ebe5H
	DD	0f17b3dH
	DD	0739f7H
	DD	08a5292H
	DD	0ea6bfbH
	DD	05fb11fH
	DD	08d5d08H
	DD	0560330H
	DD	046fc7bH
	DD	06babf0H
	DD	0cfbc20H
	DD	09af436H
	DD	01da9e3H
	DD	091615eH
	DD	0e61b08H
	DD	0659985H
	DD	05f14a0H
	DD	068408dH
	DD	0ffd880H
	DD	04d7327H
	DD	0310606H
	DD	01556caH
	DD	073a8c9H
	DD	060e27bH
	DD	0c08c6bH
_npio2_hw DD	03ff921fbH
	DD	0400921fbH
	DD	04012d97cH
	DD	0401921fbH
	DD	0401f6a7aH
	DD	04022d97cH
	DD	04025fdbbH
	DD	0402921fbH
	DD	0402c463aH
	DD	0402f6a7aH
	DD	04031475cH
	DD	04032d97cH
	DD	040346b9cH
	DD	04035fdbbH
	DD	040378fdbH
	DD	0403921fbH
	DD	0403ab41bH
	DD	0403c463aH
	DD	0403dd85aH
	DD	0403f6a7aH
	DD	040407e4cH
	DD	04041475cH
	DD	04042106cH
	DD	04042d97cH
	DD	04043a28cH
	DD	040446b9cH
	DD	0404534acH
	DD	04045fdbbH
	DD	04046c6cbH
	DD	040478fdbH
	DD	0404858ebH
	DD	0404921fbH
CONST	ENDS
PUBLIC	_cos
PUBLIC	_sin
PUBLIC	_tan
PUBLIC	__real@0000000000000000
PUBLIC	__real@397b839a252049c1
PUBLIC	__real@3ba3198a2e000000
PUBLIC	__real@3ba3198a2e037073
PUBLIC	__real@3c81a62633145c07
PUBLIC	__real@3dd0b4611a600000
PUBLIC	__real@3dd0b4611a626331
PUBLIC	__real@3de5d93a5acfd57c
PUBLIC	__real@3e21ee9ebdb4b1c4
PUBLIC	__real@3e70000000000000
PUBLIC	__real@3ec71de357b1fe7d
PUBLIC	__real@3efa01a019cb1590
PUBLIC	__real@3efb2a7074bf7ad4
PUBLIC	__real@3f12b80f32f0a7e9
PUBLIC	__real@3f147e88a03792a6
PUBLIC	__real@3f3026f71a8d1068
PUBLIC	__real@3f4344d8f2f26501
PUBLIC	__real@3f57dbc8fee08315
PUBLIC	__real@3f6d6d22c9560328
PUBLIC	__real@3f8111111110f8a6
PUBLIC	__real@3f8226e3e96e8493
PUBLIC	__real@3f9664f48406d637
PUBLIC	__real@3fa555555555554c
PUBLIC	__real@3faba1ba1bb341fe
PUBLIC	__real@3fc0000000000000
PUBLIC	__real@3fc111111110fe7a
PUBLIC	__real@3fd2000000000000
PUBLIC	__real@3fd5555555555563
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe45f306dc9c883
PUBLIC	__real@3fe921fb54442d18
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff921fb54400000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4020000000000000
PUBLIC	__real@4170000000000000
PUBLIC	__real@bda8fae9be8838d4
PUBLIC	__real@be5ae5e68a2b9ceb
PUBLIC	__real@be927e4f809c52ad
PUBLIC	__real@bef375cbdb605373
PUBLIC	__real@bf2a01a019c161d5
PUBLIC	__real@bf56c16c16c15177
PUBLIC	__real@bfc5555555555549
PUBLIC	__real@bff0000000000000
EXTRN	_floor:PROC
EXTRN	_fabs:PROC
EXTRN	_scalbn:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfc5555555555549
CONST	SEGMENT
__real@bfc5555555555549 DQ 0bfc5555555555549r	; -0.166667
CONST	ENDS
;	COMDAT __real@bf56c16c16c15177
CONST	SEGMENT
__real@bf56c16c16c15177 DQ 0bf56c16c16c15177r	; -0.00138889
CONST	ENDS
;	COMDAT __real@bf2a01a019c161d5
CONST	SEGMENT
__real@bf2a01a019c161d5 DQ 0bf2a01a019c161d5r	; -0.000198413
CONST	ENDS
;	COMDAT __real@bef375cbdb605373
CONST	SEGMENT
__real@bef375cbdb605373 DQ 0bef375cbdb605373r	; -1.85586e-05
CONST	ENDS
;	COMDAT __real@be927e4f809c52ad
CONST	SEGMENT
__real@be927e4f809c52ad DQ 0be927e4f809c52adr	; -2.75573e-07
CONST	ENDS
;	COMDAT __real@be5ae5e68a2b9ceb
CONST	SEGMENT
__real@be5ae5e68a2b9ceb DQ 0be5ae5e68a2b9cebr	; -2.50508e-08
CONST	ENDS
;	COMDAT __real@bda8fae9be8838d4
CONST	SEGMENT
__real@bda8fae9be8838d4 DQ 0bda8fae9be8838d4r	; -1.13596e-11
CONST	ENDS
;	COMDAT __real@4170000000000000
CONST	SEGMENT
__real@4170000000000000 DQ 04170000000000000r	; 1.67772e+07
CONST	ENDS
;	COMDAT __real@4020000000000000
CONST	SEGMENT
__real@4020000000000000 DQ 04020000000000000r	; 8
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54400000
CONST	SEGMENT
__real@3ff921fb54400000 DQ 03ff921fb54400000r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe921fb54442d18
CONST	SEGMENT
__real@3fe921fb54442d18 DQ 03fe921fb54442d18r	; 0.785398
CONST	ENDS
;	COMDAT __real@3fe45f306dc9c883
CONST	SEGMENT
__real@3fe45f306dc9c883 DQ 03fe45f306dc9c883r	; 0.63662
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd5555555555563
CONST	SEGMENT
__real@3fd5555555555563 DQ 03fd5555555555563r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd2000000000000
CONST	SEGMENT
__real@3fd2000000000000 DQ 03fd2000000000000r	; 0.28125
CONST	ENDS
;	COMDAT __real@3fc111111110fe7a
CONST	SEGMENT
__real@3fc111111110fe7a DQ 03fc111111110fe7ar	; 0.133333
CONST	ENDS
;	COMDAT __real@3fc0000000000000
CONST	SEGMENT
__real@3fc0000000000000 DQ 03fc0000000000000r	; 0.125
CONST	ENDS
;	COMDAT __real@3faba1ba1bb341fe
CONST	SEGMENT
__real@3faba1ba1bb341fe DQ 03faba1ba1bb341fer	; 0.0539683
CONST	ENDS
;	COMDAT __real@3fa555555555554c
CONST	SEGMENT
__real@3fa555555555554c DQ 03fa555555555554cr	; 0.0416667
CONST	ENDS
;	COMDAT __real@3f9664f48406d637
CONST	SEGMENT
__real@3f9664f48406d637 DQ 03f9664f48406d637r	; 0.0218695
CONST	ENDS
;	COMDAT __real@3f8226e3e96e8493
CONST	SEGMENT
__real@3f8226e3e96e8493 DQ 03f8226e3e96e8493r	; 0.00886324
CONST	ENDS
;	COMDAT __real@3f8111111110f8a6
CONST	SEGMENT
__real@3f8111111110f8a6 DQ 03f8111111110f8a6r	; 0.00833333
CONST	ENDS
;	COMDAT __real@3f6d6d22c9560328
CONST	SEGMENT
__real@3f6d6d22c9560328 DQ 03f6d6d22c9560328r	; 0.00359208
CONST	ENDS
;	COMDAT __real@3f57dbc8fee08315
CONST	SEGMENT
__real@3f57dbc8fee08315 DQ 03f57dbc8fee08315r	; 0.00145621
CONST	ENDS
;	COMDAT __real@3f4344d8f2f26501
CONST	SEGMENT
__real@3f4344d8f2f26501 DQ 03f4344d8f2f26501r	; 0.000588041
CONST	ENDS
;	COMDAT __real@3f3026f71a8d1068
CONST	SEGMENT
__real@3f3026f71a8d1068 DQ 03f3026f71a8d1068r	; 0.000246463
CONST	ENDS
;	COMDAT __real@3f147e88a03792a6
CONST	SEGMENT
__real@3f147e88a03792a6 DQ 03f147e88a03792a6r	; 7.81794e-05
CONST	ENDS
;	COMDAT __real@3f12b80f32f0a7e9
CONST	SEGMENT
__real@3f12b80f32f0a7e9 DQ 03f12b80f32f0a7e9r	; 7.14072e-05
CONST	ENDS
;	COMDAT __real@3efb2a7074bf7ad4
CONST	SEGMENT
__real@3efb2a7074bf7ad4 DQ 03efb2a7074bf7ad4r	; 2.59073e-05
CONST	ENDS
;	COMDAT __real@3efa01a019cb1590
CONST	SEGMENT
__real@3efa01a019cb1590 DQ 03efa01a019cb1590r	; 2.48016e-05
CONST	ENDS
;	COMDAT __real@3ec71de357b1fe7d
CONST	SEGMENT
__real@3ec71de357b1fe7d DQ 03ec71de357b1fe7dr	; 2.75573e-06
CONST	ENDS
;	COMDAT __real@3e70000000000000
CONST	SEGMENT
__real@3e70000000000000 DQ 03e70000000000000r	; 5.96046e-08
CONST	ENDS
;	COMDAT __real@3e21ee9ebdb4b1c4
CONST	SEGMENT
__real@3e21ee9ebdb4b1c4 DQ 03e21ee9ebdb4b1c4r	; 2.08757e-09
CONST	ENDS
;	COMDAT __real@3de5d93a5acfd57c
CONST	SEGMENT
__real@3de5d93a5acfd57c DQ 03de5d93a5acfd57cr	; 1.58969e-10
CONST	ENDS
;	COMDAT __real@3dd0b4611a626331
CONST	SEGMENT
__real@3dd0b4611a626331 DQ 03dd0b4611a626331r	; 6.0771e-11
CONST	ENDS
;	COMDAT __real@3dd0b4611a600000
CONST	SEGMENT
__real@3dd0b4611a600000 DQ 03dd0b4611a600000r	; 6.0771e-11
CONST	ENDS
;	COMDAT __real@3c81a62633145c07
CONST	SEGMENT
__real@3c81a62633145c07 DQ 03c81a62633145c07r	; 3.06162e-17
CONST	ENDS
;	COMDAT __real@3ba3198a2e037073
CONST	SEGMENT
__real@3ba3198a2e037073 DQ 03ba3198a2e037073r	; 2.02227e-21
CONST	ENDS
;	COMDAT __real@3ba3198a2e000000
CONST	SEGMENT
__real@3ba3198a2e000000 DQ 03ba3198a2e000000r	; 2.02227e-21
CONST	ENDS
;	COMDAT __real@397b839a252049c1
CONST	SEGMENT
__real@397b839a252049c1 DQ 0397b839a252049c1r	; 8.47843e-32
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\trig.c
;	COMDAT ___kernel_tan
_TEXT	SEGMENT
tv282 = -92						; size = 8
_a$1 = -84						; size = 8
_a$2 = -76						; size = 8
_t$3 = -68						; size = 8
_t$4 = -60						; size = 8
_s$ = -52						; size = 8
_r$ = -44						; size = 8
_v$ = -36						; size = 8
_z$ = -28						; size = 8
_w$ = -20						; size = 8
tv281 = -12						; size = 4
_hx$ = -8						; size = 4
_ix$ = -4						; size = 4
_x$ = 8							; size = 8
_y$ = 16						; size = 8
_iy$ = 24						; size = 4
___kernel_tan PROC					; COMDAT

; 797  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH

; 798  :   double z, r, v, w, s;
; 799  :   int ix, hx;
; 800  : 
; 801  :   hx = __HI (x); /* high word of x */

  00006	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  00009	89 45 f8	 mov	 DWORD PTR _hx$[ebp], eax

; 802  :   ix = hx & 0x7fffffff; /* high word of |x| */

  0000c	8b 4d f8	 mov	 ecx, DWORD PTR _hx$[ebp]
  0000f	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  00015	89 4d fc	 mov	 DWORD PTR _ix$[ebp], ecx

; 803  :   if (ix < 0x3e300000) /* x < 2**-28 */

  00018	81 7d fc 00 00
	30 3e		 cmp	 DWORD PTR _ix$[ebp], 1043333120 ; 3e300000H
  0001f	0f 8d a8 00 00
	00		 jge	 $LN7@kernel_tan

; 804  :   {
; 805  :     if ((int) x == 0) /* generate inexact */

  00025	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00028	e8 00 00 00 00	 call	 __ftol2_sse
  0002d	85 c0		 test	 eax, eax
  0002f	0f 85 98 00 00
	00		 jne	 $LN7@kernel_tan

; 806  :     {
; 807  :       if (((ix | __LO (x)) | (iy + 1)) == 0)

  00035	8b 55 fc	 mov	 edx, DWORD PTR _ix$[ebp]
  00038	0b 55 08	 or	 edx, DWORD PTR _x$[ebp]
  0003b	8b 45 18	 mov	 eax, DWORD PTR _iy$[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	0b d0		 or	 edx, eax
  00043	75 1c		 jne	 SHORT $LN4@kernel_tan

; 808  :       {
; 809  :         return one / fabs (x);

  00045	83 ec 08	 sub	 esp, 8
  00048	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0004b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0004e	e8 00 00 00 00	 call	 _fabs
  00053	83 c4 08	 add	 esp, 8
  00056	d9 e8		 fld1
  00058	de f1		 fdivrp	 ST(1), ST(0)
  0005a	e9 11 02 00 00	 jmp	 $LN12@kernel_tan

; 810  :       }

  0005f	eb 6c		 jmp	 SHORT $LN7@kernel_tan
$LN4@kernel_tan:

; 811  :       else
; 812  :       {
; 813  :         if (iy == 1)

  00061	83 7d 18 01	 cmp	 DWORD PTR _iy$[ebp], 1
  00065	75 0a		 jne	 SHORT $LN6@kernel_tan

; 814  :         {
; 815  :           return x;

  00067	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0006a	e9 01 02 00 00	 jmp	 $LN12@kernel_tan

; 816  :         }

  0006f	eb 5c		 jmp	 SHORT $LN7@kernel_tan
$LN6@kernel_tan:

; 817  :         else /* compute -1 / (x + y) carefully */
; 818  :         {
; 819  :           double a, t;
; 820  : 
; 821  :           z = w = x + y;

  00071	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00074	dc 45 10	 fadd	 QWORD PTR _y$[ebp]
  00077	dd 5d ec	 fstp	 QWORD PTR _w$[ebp]
  0007a	dd 45 ec	 fld	 QWORD PTR _w$[ebp]
  0007d	dd 5d e4	 fstp	 QWORD PTR _z$[ebp]

; 822  :           __LO (z) = 0;

  00080	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0

; 823  :           v = y - (z - x);

  00087	dd 45 e4	 fld	 QWORD PTR _z$[ebp]
  0008a	dc 65 08	 fsub	 QWORD PTR _x$[ebp]
  0008d	dc 6d 10	 fsubr	 QWORD PTR _y$[ebp]
  00090	dd 5d dc	 fstp	 QWORD PTR _v$[ebp]

; 824  :           t = a = -one / w;

  00093	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@bff0000000000000
  00099	dc 75 ec	 fdiv	 QWORD PTR _w$[ebp]
  0009c	dd 5d b4	 fstp	 QWORD PTR _a$2[ebp]
  0009f	dd 45 b4	 fld	 QWORD PTR _a$2[ebp]
  000a2	dd 5d c4	 fstp	 QWORD PTR _t$4[ebp]

; 825  :           __LO (t) = 0;

  000a5	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _t$4[ebp], 0

; 826  :           s = one + t * z;

  000ac	dd 45 c4	 fld	 QWORD PTR _t$4[ebp]
  000af	dc 4d e4	 fmul	 QWORD PTR _z$[ebp]
  000b2	d9 e8		 fld1
  000b4	de c1		 faddp	 ST(1), ST(0)
  000b6	dd 5d cc	 fstp	 QWORD PTR _s$[ebp]

; 827  :           return t + a * (s + t * v);

  000b9	dd 45 c4	 fld	 QWORD PTR _t$4[ebp]
  000bc	dc 4d dc	 fmul	 QWORD PTR _v$[ebp]
  000bf	dc 45 cc	 fadd	 QWORD PTR _s$[ebp]
  000c2	dc 4d b4	 fmul	 QWORD PTR _a$2[ebp]
  000c5	dc 45 c4	 fadd	 QWORD PTR _t$4[ebp]
  000c8	e9 a3 01 00 00	 jmp	 $LN12@kernel_tan
$LN7@kernel_tan:

; 828  :         }
; 829  :       }
; 830  :     }
; 831  :   }
; 832  :   if (ix >= 0x3FE59428) /* |x| >= 0.6744 */

  000cd	81 7d fc 28 94
	e5 3f		 cmp	 DWORD PTR _ix$[ebp], 1072010280 ; 3fe59428H
  000d4	7c 3c		 jl	 SHORT $LN8@kernel_tan

; 833  :   {
; 834  :     if (hx < 0)

  000d6	83 7d f8 00	 cmp	 DWORD PTR _hx$[ebp], 0
  000da	7d 10		 jge	 SHORT $LN9@kernel_tan

; 835  :     {
; 836  :       x = -x;

  000dc	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  000df	d9 e0		 fchs
  000e1	dd 5d 08	 fstp	 QWORD PTR _x$[ebp]

; 837  :       y = -y;

  000e4	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  000e7	d9 e0		 fchs
  000e9	dd 5d 10	 fstp	 QWORD PTR _y$[ebp]
$LN9@kernel_tan:

; 838  :     }
; 839  :     z = pio4 - x;

  000ec	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe921fb54442d18
  000f2	dc 65 08	 fsub	 QWORD PTR _x$[ebp]
  000f5	dd 5d e4	 fstp	 QWORD PTR _z$[ebp]

; 840  :     w = pio4lo - y;

  000f8	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3c81a62633145c07
  000fe	dc 65 10	 fsub	 QWORD PTR _y$[ebp]
  00101	dd 5d ec	 fstp	 QWORD PTR _w$[ebp]

; 841  :     x = z + w;

  00104	dd 45 e4	 fld	 QWORD PTR _z$[ebp]
  00107	dc 45 ec	 fadd	 QWORD PTR _w$[ebp]
  0010a	dd 5d 08	 fstp	 QWORD PTR _x$[ebp]

; 842  :     y = 0.0;

  0010d	d9 ee		 fldz
  0010f	dd 5d 10	 fstp	 QWORD PTR _y$[ebp]
$LN8@kernel_tan:

; 843  :   }
; 844  :   z = x * x;

  00112	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00115	dc 4d 08	 fmul	 QWORD PTR _x$[ebp]
  00118	dd 5d e4	 fstp	 QWORD PTR _z$[ebp]

; 845  :   w = z * z;

  0011b	dd 45 e4	 fld	 QWORD PTR _z$[ebp]
  0011e	dc 4d e4	 fmul	 QWORD PTR _z$[ebp]
  00121	dd 5d ec	 fstp	 QWORD PTR _w$[ebp]

; 846  :   /*
; 847  :    * Break x^5 * (T[1] + x^2 * T[2] + ...) into
; 848  :    * x^5 (T[1] + x^4 * T[3] + ... + x^20 * T[11]) +
; 849  :    * x^5 (x^2 * (T[2] + x^4 * T[4] + ... + x^22 * [T12]))
; 850  :    */
; 851  :   r = T1 + w * (T3 + w * (T5 + w * (T7 + w * (T9 + w * T11))));

  00124	dd 45 ec	 fld	 QWORD PTR _w$[ebp]
  00127	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bef375cbdb605373
  0012d	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3f147e88a03792a6
  00133	dc 4d ec	 fmul	 QWORD PTR _w$[ebp]
  00136	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3f4344d8f2f26501
  0013c	dc 4d ec	 fmul	 QWORD PTR _w$[ebp]
  0013f	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3f6d6d22c9560328
  00145	dc 4d ec	 fmul	 QWORD PTR _w$[ebp]
  00148	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3f9664f48406d637
  0014e	dc 4d ec	 fmul	 QWORD PTR _w$[ebp]
  00151	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fc111111110fe7a
  00157	dd 5d d4	 fstp	 QWORD PTR _r$[ebp]

; 852  :   v = z * (T2 + w * (T4 + w * (T6 + w * (T8 + w * (T10 + w * T12)))));

  0015a	dd 45 ec	 fld	 QWORD PTR _w$[ebp]
  0015d	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3efb2a7074bf7ad4
  00163	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3f12b80f32f0a7e9
  00169	dc 4d ec	 fmul	 QWORD PTR _w$[ebp]
  0016c	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3f3026f71a8d1068
  00172	dc 4d ec	 fmul	 QWORD PTR _w$[ebp]
  00175	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3f57dbc8fee08315
  0017b	dc 4d ec	 fmul	 QWORD PTR _w$[ebp]
  0017e	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3f8226e3e96e8493
  00184	dc 4d ec	 fmul	 QWORD PTR _w$[ebp]
  00187	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3faba1ba1bb341fe
  0018d	dc 4d e4	 fmul	 QWORD PTR _z$[ebp]
  00190	dd 5d dc	 fstp	 QWORD PTR _v$[ebp]

; 853  :   s = z * x;

  00193	dd 45 e4	 fld	 QWORD PTR _z$[ebp]
  00196	dc 4d 08	 fmul	 QWORD PTR _x$[ebp]
  00199	dd 5d cc	 fstp	 QWORD PTR _s$[ebp]

; 854  :   r = y + z * (s * (r + v) + y);

  0019c	dd 45 d4	 fld	 QWORD PTR _r$[ebp]
  0019f	dc 45 dc	 fadd	 QWORD PTR _v$[ebp]
  001a2	dc 4d cc	 fmul	 QWORD PTR _s$[ebp]
  001a5	dc 45 10	 fadd	 QWORD PTR _y$[ebp]
  001a8	dc 4d e4	 fmul	 QWORD PTR _z$[ebp]
  001ab	dc 45 10	 fadd	 QWORD PTR _y$[ebp]
  001ae	dd 5d d4	 fstp	 QWORD PTR _r$[ebp]

; 855  :   r += T0 * s;

  001b1	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fd5555555555563
  001b7	dc 4d cc	 fmul	 QWORD PTR _s$[ebp]
  001ba	dc 45 d4	 fadd	 QWORD PTR _r$[ebp]
  001bd	dd 5d d4	 fstp	 QWORD PTR _r$[ebp]

; 856  :   w = x + r;

  001c0	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  001c3	dc 45 d4	 fadd	 QWORD PTR _r$[ebp]
  001c6	dd 5d ec	 fstp	 QWORD PTR _w$[ebp]

; 857  :   if (ix >= 0x3FE59428)

  001c9	81 7d fc 28 94
	e5 3f		 cmp	 DWORD PTR _ix$[ebp], 1072010280 ; 3fe59428H
  001d0	7c 43		 jl	 SHORT $LN10@kernel_tan

; 858  :   {
; 859  :     v = (double) iy;

  001d2	db 45 18	 fild	 DWORD PTR _iy$[ebp]
  001d5	dd 5d dc	 fstp	 QWORD PTR _v$[ebp]

; 860  :     return (double) (1 - ((hx >> 30) & 2)) * (v - 2.0 * (x - (w * w / (w + v) - r)));

  001d8	8b 4d f8	 mov	 ecx, DWORD PTR _hx$[ebp]
  001db	c1 f9 1e	 sar	 ecx, 30			; 0000001eH
  001de	83 e1 02	 and	 ecx, 2
  001e1	ba 01 00 00 00	 mov	 edx, 1
  001e6	2b d1		 sub	 edx, ecx
  001e8	89 55 f4	 mov	 DWORD PTR tv281[ebp], edx
  001eb	db 45 f4	 fild	 DWORD PTR tv281[ebp]
  001ee	dd 5d a4	 fstp	 QWORD PTR tv282[ebp]
  001f1	dd 45 a4	 fld	 QWORD PTR tv282[ebp]
  001f4	dd 45 ec	 fld	 QWORD PTR _w$[ebp]
  001f7	dc 4d ec	 fmul	 QWORD PTR _w$[ebp]
  001fa	dd 45 ec	 fld	 QWORD PTR _w$[ebp]
  001fd	dc 45 dc	 fadd	 QWORD PTR _v$[ebp]
  00200	de f9		 fdivp	 ST(1), ST(0)
  00202	dc 65 d4	 fsub	 QWORD PTR _r$[ebp]
  00205	dc 6d 08	 fsubr	 QWORD PTR _x$[ebp]
  00208	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  0020e	dc 6d dc	 fsubr	 QWORD PTR _v$[ebp]
  00211	de c9		 fmulp	 ST(1), ST(0)
  00213	eb 5b		 jmp	 SHORT $LN12@kernel_tan
$LN10@kernel_tan:

; 861  :   }
; 862  :   if (iy == 1)

  00215	83 7d 18 01	 cmp	 DWORD PTR _iy$[ebp], 1
  00219	75 07		 jne	 SHORT $LN11@kernel_tan

; 863  :   {
; 864  :     return w;

  0021b	dd 45 ec	 fld	 QWORD PTR _w$[ebp]
  0021e	eb 50		 jmp	 SHORT $LN12@kernel_tan

; 865  :   }

  00220	eb 4e		 jmp	 SHORT $LN12@kernel_tan
$LN11@kernel_tan:

; 866  :   else
; 867  :   {
; 868  :     /*
; 869  :      * if allow error up to 2 ulp, simply return
; 870  :      * -1.0 / (x + r) here
; 871  :      */
; 872  :     /* compute -1.0 / (x + r) accurately */
; 873  :     double a, t;
; 874  : 
; 875  :     z = w;

  00222	dd 45 ec	 fld	 QWORD PTR _w$[ebp]
  00225	dd 5d e4	 fstp	 QWORD PTR _z$[ebp]

; 876  :     __LO (z) = 0;

  00228	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0

; 877  :     v = r - (z - x); /* z + v = r + x */

  0022f	dd 45 e4	 fld	 QWORD PTR _z$[ebp]
  00232	dc 65 08	 fsub	 QWORD PTR _x$[ebp]
  00235	dc 6d d4	 fsubr	 QWORD PTR _r$[ebp]
  00238	dd 5d dc	 fstp	 QWORD PTR _v$[ebp]

; 878  :     t = a = -1.0 / w; /* a = -1.0 / w */

  0023b	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@bff0000000000000
  00241	dc 75 ec	 fdiv	 QWORD PTR _w$[ebp]
  00244	dd 5d ac	 fstp	 QWORD PTR _a$1[ebp]
  00247	dd 45 ac	 fld	 QWORD PTR _a$1[ebp]
  0024a	dd 5d bc	 fstp	 QWORD PTR _t$3[ebp]

; 879  :     __LO (t) = 0;

  0024d	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _t$3[ebp], 0

; 880  :     s = 1.0 + t * z;

  00254	dd 45 bc	 fld	 QWORD PTR _t$3[ebp]
  00257	dc 4d e4	 fmul	 QWORD PTR _z$[ebp]
  0025a	d9 e8		 fld1
  0025c	de c1		 faddp	 ST(1), ST(0)
  0025e	dd 5d cc	 fstp	 QWORD PTR _s$[ebp]

; 881  :     return t + a * (s + t * v);

  00261	dd 45 bc	 fld	 QWORD PTR _t$3[ebp]
  00264	dc 4d dc	 fmul	 QWORD PTR _v$[ebp]
  00267	dc 45 cc	 fadd	 QWORD PTR _s$[ebp]
  0026a	dc 4d ac	 fmul	 QWORD PTR _a$1[ebp]
  0026d	dc 45 bc	 fadd	 QWORD PTR _t$3[ebp]
$LN12@kernel_tan:

; 882  :   }
; 883  : } /* __kernel_tan */

  00270	8b e5		 mov	 esp, ebp
  00272	5d		 pop	 ebp
  00273	c3		 ret	 0
___kernel_tan ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\trig.c
;	COMDAT ___kernel_cos
_TEXT	SEGMENT
_a$ = -44						; size = 8
_hz$ = -36						; size = 8
_r$ = -28						; size = 8
_qx$ = -20						; size = 8
_z$ = -12						; size = 8
_ix$ = -4						; size = 4
_x$ = 8							; size = 8
_y$ = 16						; size = 8
___kernel_cos PROC					; COMDAT

; 711  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 712  :   double a, hz, z, r, qx;
; 713  :   int ix;
; 714  : 
; 715  :   ix = __HI (x) & 0x7fffffff; /* ix = |x|'s high word */

  00006	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  00009	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  0000e	89 45 fc	 mov	 DWORD PTR _ix$[ebp], eax

; 716  :   if (ix < 0x3e400000) /* if x < 2**27 */

  00011	81 7d fc 00 00
	40 3e		 cmp	 DWORD PTR _ix$[ebp], 1044381696 ; 3e400000H
  00018	7d 13		 jge	 SHORT $LN3@kernel_cos

; 717  :   {
; 718  :     if (((int) x) == 0)

  0001a	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0001d	e8 00 00 00 00	 call	 __ftol2_sse
  00022	85 c0		 test	 eax, eax
  00024	75 07		 jne	 SHORT $LN3@kernel_cos

; 719  :     {
; 720  :       return one; /* generate inexact */

  00026	d9 e8		 fld1
  00028	e9 be 00 00 00	 jmp	 $LN5@kernel_cos
$LN3@kernel_cos:

; 721  :     }
; 722  :   }
; 723  :   z = x * x;

  0002d	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00030	dc 4d 08	 fmul	 QWORD PTR _x$[ebp]
  00033	dd 5d f4	 fstp	 QWORD PTR _z$[ebp]

; 724  :   r = z * (C1 + z * (C2 + z * (C3 + z * (C4 + z * (C5 + z * C6)))));

  00036	dd 45 f4	 fld	 QWORD PTR _z$[ebp]
  00039	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bda8fae9be8838d4
  0003f	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3e21ee9ebdb4b1c4
  00045	dc 4d f4	 fmul	 QWORD PTR _z$[ebp]
  00048	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@be927e4f809c52ad
  0004e	dc 4d f4	 fmul	 QWORD PTR _z$[ebp]
  00051	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3efa01a019cb1590
  00057	dc 4d f4	 fmul	 QWORD PTR _z$[ebp]
  0005a	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@bf56c16c16c15177
  00060	dc 4d f4	 fmul	 QWORD PTR _z$[ebp]
  00063	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fa555555555554c
  00069	dc 4d f4	 fmul	 QWORD PTR _z$[ebp]
  0006c	dd 5d e4	 fstp	 QWORD PTR _r$[ebp]

; 725  :   if (ix < 0x3FD33333) /* if |x| < 0.3 */

  0006f	81 7d fc 33 33
	d3 3f		 cmp	 DWORD PTR _ix$[ebp], 1070805811 ; 3fd33333H
  00076	7d 21		 jge	 SHORT $LN4@kernel_cos

; 726  :   {
; 727  :     return one - (0.5 * z - (z * r - x * y));

  00078	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe0000000000000
  0007e	dc 4d f4	 fmul	 QWORD PTR _z$[ebp]
  00081	dd 45 f4	 fld	 QWORD PTR _z$[ebp]
  00084	dc 4d e4	 fmul	 QWORD PTR _r$[ebp]
  00087	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0008a	dc 4d 10	 fmul	 QWORD PTR _y$[ebp]
  0008d	de e9		 fsubp	 ST(1), ST(0)
  0008f	de e9		 fsubp	 ST(1), ST(0)
  00091	d9 e8		 fld1
  00093	de e1		 fsubrp	 ST(1), ST(0)
  00095	eb 54		 jmp	 SHORT $LN5@kernel_cos

; 728  :   }

  00097	eb 52		 jmp	 SHORT $LN5@kernel_cos
$LN4@kernel_cos:

; 729  :   else
; 730  :   {
; 731  :     if (ix > 0x3fe90000) /* x > 0.78125 */

  00099	81 7d fc 00 00
	e9 3f		 cmp	 DWORD PTR _ix$[ebp], 1072234496 ; 3fe90000H
  000a0	7e 0b		 jle	 SHORT $LN6@kernel_cos

; 732  :     {
; 733  :       qx = 0.28125;

  000a2	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fd2000000000000
  000a8	dd 5d ec	 fstp	 QWORD PTR _qx$[ebp]

; 734  :     }

  000ab	eb 13		 jmp	 SHORT $LN7@kernel_cos
$LN6@kernel_cos:

; 735  :     else
; 736  :     {
; 737  :       __HI (qx) = ix - 0x00200000; /* x / 4 */

  000ad	8b 4d fc	 mov	 ecx, DWORD PTR _ix$[ebp]
  000b0	81 e9 00 00 20
	00		 sub	 ecx, 2097152		; 00200000H
  000b6	89 4d f0	 mov	 DWORD PTR _qx$[ebp+4], ecx

; 738  :       __LO (qx) = 0;

  000b9	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _qx$[ebp], 0
$LN7@kernel_cos:

; 739  :     }
; 740  :     hz = 0.5 * z - qx;

  000c0	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe0000000000000
  000c6	dc 4d f4	 fmul	 QWORD PTR _z$[ebp]
  000c9	dc 65 ec	 fsub	 QWORD PTR _qx$[ebp]
  000cc	dd 5d dc	 fstp	 QWORD PTR _hz$[ebp]

; 741  :     a = one - qx;

  000cf	d9 e8		 fld1
  000d1	dc 65 ec	 fsub	 QWORD PTR _qx$[ebp]
  000d4	dd 5d d4	 fstp	 QWORD PTR _a$[ebp]

; 742  :     return a - (hz - (z * r - x * y));

  000d7	dd 45 f4	 fld	 QWORD PTR _z$[ebp]
  000da	dc 4d e4	 fmul	 QWORD PTR _r$[ebp]
  000dd	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  000e0	dc 4d 10	 fmul	 QWORD PTR _y$[ebp]
  000e3	de e9		 fsubp	 ST(1), ST(0)
  000e5	dc 6d dc	 fsubr	 QWORD PTR _hz$[ebp]
  000e8	dc 6d d4	 fsubr	 QWORD PTR _a$[ebp]
$LN5@kernel_cos:

; 743  :   }
; 744  : } /* __kernel_cos */

  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c3		 ret	 0
___kernel_cos ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\trig.c
;	COMDAT ___kernel_sin
_TEXT	SEGMENT
_r$ = -28						; size = 8
_v$ = -20						; size = 8
_z$ = -12						; size = 8
_ix$ = -4						; size = 4
_x$ = 8							; size = 8
_y$ = 16						; size = 8
_iy$ = 24						; size = 4
___kernel_sin PROC					; COMDAT

; 642  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 643  :   double z, r, v;
; 644  :   int ix;
; 645  : 
; 646  :   ix = __HI (x) & 0x7fffffff; /* high word of x */

  00006	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  00009	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  0000e	89 45 fc	 mov	 DWORD PTR _ix$[ebp], eax

; 647  :   if (ix < 0x3e400000) /* |x| < 2**-27 */

  00011	81 7d fc 00 00
	40 3e		 cmp	 DWORD PTR _ix$[ebp], 1044381696 ; 3e400000H
  00018	7d 14		 jge	 SHORT $LN3@kernel_sin

; 648  :   {
; 649  :     if ((int) x == 0)

  0001a	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0001d	e8 00 00 00 00	 call	 __ftol2_sse
  00022	85 c0		 test	 eax, eax
  00024	75 08		 jne	 SHORT $LN3@kernel_sin

; 650  :     {
; 651  :       return x; /* generate inexact */

  00026	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00029	e9 80 00 00 00	 jmp	 $LN5@kernel_sin
$LN3@kernel_sin:

; 652  :     }
; 653  :   }
; 654  :   z = x * x;

  0002e	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00031	dc 4d 08	 fmul	 QWORD PTR _x$[ebp]
  00034	dd 5d f4	 fstp	 QWORD PTR _z$[ebp]

; 655  :   v = z * x;

  00037	dd 45 f4	 fld	 QWORD PTR _z$[ebp]
  0003a	dc 4d 08	 fmul	 QWORD PTR _x$[ebp]
  0003d	dd 5d ec	 fstp	 QWORD PTR _v$[ebp]

; 656  :   r = S2 + z * (S3 + z * (S4 + z * (S5 + z * S6)));

  00040	dd 45 f4	 fld	 QWORD PTR _z$[ebp]
  00043	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3de5d93a5acfd57c
  00049	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@be5ae5e68a2b9ceb
  0004f	dc 4d f4	 fmul	 QWORD PTR _z$[ebp]
  00052	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3ec71de357b1fe7d
  00058	dc 4d f4	 fmul	 QWORD PTR _z$[ebp]
  0005b	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@bf2a01a019c161d5
  00061	dc 4d f4	 fmul	 QWORD PTR _z$[ebp]
  00064	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3f8111111110f8a6
  0006a	dd 5d e4	 fstp	 QWORD PTR _r$[ebp]

; 657  :   if (iy == 0)

  0006d	83 7d 18 00	 cmp	 DWORD PTR _iy$[ebp], 0
  00071	75 16		 jne	 SHORT $LN4@kernel_sin

; 658  :   {
; 659  :     return x + v * (S1 + z * r);

  00073	dd 45 f4	 fld	 QWORD PTR _z$[ebp]
  00076	dc 4d e4	 fmul	 QWORD PTR _r$[ebp]
  00079	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@bfc5555555555549
  0007f	dc 4d ec	 fmul	 QWORD PTR _v$[ebp]
  00082	dc 45 08	 fadd	 QWORD PTR _x$[ebp]
  00085	eb 27		 jmp	 SHORT $LN5@kernel_sin

; 660  :   }

  00087	eb 25		 jmp	 SHORT $LN5@kernel_sin
$LN4@kernel_sin:

; 661  :   else
; 662  :   {
; 663  :     return x - ((z * (half * y - v * r) - y) - v * S1);

  00089	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe0000000000000
  0008f	dc 4d 10	 fmul	 QWORD PTR _y$[ebp]
  00092	dd 45 ec	 fld	 QWORD PTR _v$[ebp]
  00095	dc 4d e4	 fmul	 QWORD PTR _r$[ebp]
  00098	de e9		 fsubp	 ST(1), ST(0)
  0009a	dc 4d f4	 fmul	 QWORD PTR _z$[ebp]
  0009d	dc 65 10	 fsub	 QWORD PTR _y$[ebp]
  000a0	dd 45 ec	 fld	 QWORD PTR _v$[ebp]
  000a3	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bfc5555555555549
  000a9	de e9		 fsubp	 ST(1), ST(0)
  000ab	dc 6d 08	 fsubr	 QWORD PTR _x$[ebp]
$LN5@kernel_sin:

; 664  :   }
; 665  : } /* __kernel_sin */

  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
___kernel_sin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\trig.c
;	COMDAT ___ieee754_rem_pio2
_TEXT	SEGMENT
_tx$ = -104						; size = 24
tv234 = -80						; size = 8
_fn$ = -72						; size = 8
_t$ = -64						; size = 8
_r$ = -56						; size = 8
_w$ = -48						; size = 8
_z$ = -40						; size = 8
tv413 = -32						; size = 4
_e0$ = -28						; size = 4
_j$ = -24						; size = 4
_hx$ = -20						; size = 4
_nx$ = -16						; size = 4
_n$ = -12						; size = 4
_i$ = -8						; size = 4
_ix$ = -4						; size = 4
_x$ = 8							; size = 8
_y$ = 16						; size = 4
___ieee754_rem_pio2 PROC				; COMDAT

; 478  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H

; 479  :   double z, w, t, r, fn;
; 480  :   double tx[3];
; 481  :   int e0, i, j, nx, n, ix, hx;
; 482  : 
; 483  :   hx = __HI (x); /* high word of x */

  00006	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  00009	89 45 ec	 mov	 DWORD PTR _hx$[ebp], eax

; 484  :   ix = hx & 0x7fffffff;

  0000c	8b 4d ec	 mov	 ecx, DWORD PTR _hx$[ebp]
  0000f	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  00015	89 4d fc	 mov	 DWORD PTR _ix$[ebp], ecx

; 485  :   if (ix <= 0x3fe921fb) /* |x| ~<= pi/4 , no need for reduction */

  00018	81 7d fc fb 21
	e9 3f		 cmp	 DWORD PTR _ix$[ebp], 1072243195 ; 3fe921fbH
  0001f	7f 28		 jg	 SHORT $LN7@ieee754_re

; 486  :   {
; 487  :     y[0] = x;

  00021	ba 08 00 00 00	 mov	 edx, 8
  00026	6b c2 00	 imul	 eax, edx, 0
  00029	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  0002c	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0002f	dd 1c 01	 fstp	 QWORD PTR [ecx+eax]

; 488  :     y[1] = 0;

  00032	ba 08 00 00 00	 mov	 edx, 8
  00037	c1 e2 00	 shl	 edx, 0
  0003a	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0003d	d9 ee		 fldz
  0003f	dd 1c 10	 fstp	 QWORD PTR [eax+edx]

; 489  :     return 0;

  00042	33 c0		 xor	 eax, eax
  00044	e9 96 04 00 00	 jmp	 $LN1@ieee754_re
$LN7@ieee754_re:

; 490  :   }
; 491  :   if (ix < 0x4002d97c) /* |x| < 3pi/4, special case with n = +-1 */

  00049	81 7d fc 7c d9
	02 40		 cmp	 DWORD PTR _ix$[ebp], 1073928572 ; 4002d97cH
  00050	0f 8d 57 01 00
	00		 jge	 $LN10@ieee754_re

; 492  :   {
; 493  :     if (hx > 0)

  00056	83 7d ec 00	 cmp	 DWORD PTR _hx$[ebp], 0
  0005a	0f 8e aa 00 00
	00		 jle	 $LN9@ieee754_re

; 494  :     {
; 495  :       z = x - pio2_1;

  00060	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00063	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff921fb54400000
  00069	dd 5d d8	 fstp	 QWORD PTR _z$[ebp]

; 496  :       if (ix != 0x3ff921fb) /* 33 + 53 bit pi is good enough */

  0006c	81 7d fc fb 21
	f9 3f		 cmp	 DWORD PTR _ix$[ebp], 1073291771 ; 3ff921fbH
  00073	74 3e		 je	 SHORT $LN11@ieee754_re

; 497  :       {
; 498  :         y[0] = z - pio2_1t;

  00075	dd 45 d8	 fld	 QWORD PTR _z$[ebp]
  00078	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3dd0b4611a626331
  0007e	b9 08 00 00 00	 mov	 ecx, 8
  00083	6b d1 00	 imul	 edx, ecx, 0
  00086	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00089	dd 1c 10	 fstp	 QWORD PTR [eax+edx]

; 499  :         y[1] = (z - y[0]) - pio2_1t;

  0008c	b9 08 00 00 00	 mov	 ecx, 8
  00091	6b d1 00	 imul	 edx, ecx, 0
  00094	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00097	dd 45 d8	 fld	 QWORD PTR _z$[ebp]
  0009a	dc 24 10	 fsub	 QWORD PTR [eax+edx]
  0009d	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3dd0b4611a626331
  000a3	b9 08 00 00 00	 mov	 ecx, 8
  000a8	c1 e1 00	 shl	 ecx, 0
  000ab	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  000ae	dd 1c 0a	 fstp	 QWORD PTR [edx+ecx]

; 500  :       }

  000b1	eb 48		 jmp	 SHORT $LN12@ieee754_re
$LN11@ieee754_re:

; 501  :       else /* near pi/2, use 33 + 33 + 53 bit pi */
; 502  :       {
; 503  :         z -= pio2_2;

  000b3	dd 45 d8	 fld	 QWORD PTR _z$[ebp]
  000b6	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3dd0b4611a600000
  000bc	dd 5d d8	 fstp	 QWORD PTR _z$[ebp]

; 504  :         y[0] = z - pio2_2t;

  000bf	dd 45 d8	 fld	 QWORD PTR _z$[ebp]
  000c2	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ba3198a2e037073
  000c8	b8 08 00 00 00	 mov	 eax, 8
  000cd	6b c8 00	 imul	 ecx, eax, 0
  000d0	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  000d3	dd 1c 0a	 fstp	 QWORD PTR [edx+ecx]

; 505  :         y[1] = (z - y[0]) - pio2_2t;

  000d6	b8 08 00 00 00	 mov	 eax, 8
  000db	6b c8 00	 imul	 ecx, eax, 0
  000de	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  000e1	dd 45 d8	 fld	 QWORD PTR _z$[ebp]
  000e4	dc 24 0a	 fsub	 QWORD PTR [edx+ecx]
  000e7	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ba3198a2e037073
  000ed	b8 08 00 00 00	 mov	 eax, 8
  000f2	c1 e0 00	 shl	 eax, 0
  000f5	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  000f8	dd 1c 01	 fstp	 QWORD PTR [ecx+eax]
$LN12@ieee754_re:

; 506  :       }
; 507  :       return 1;

  000fb	b8 01 00 00 00	 mov	 eax, 1
  00100	e9 da 03 00 00	 jmp	 $LN1@ieee754_re

; 508  :     }

  00105	e9 a3 00 00 00	 jmp	 $LN10@ieee754_re
$LN9@ieee754_re:

; 509  :     else /* negative x */
; 510  :     {
; 511  :       z = x + pio2_1;

  0010a	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0010d	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3ff921fb54400000
  00113	dd 5d d8	 fstp	 QWORD PTR _z$[ebp]

; 512  :       if (ix != 0x3ff921fb) /* 33 + 53 bit pi is good enough */

  00116	81 7d fc fb 21
	f9 3f		 cmp	 DWORD PTR _ix$[ebp], 1073291771 ; 3ff921fbH
  0011d	74 3e		 je	 SHORT $LN13@ieee754_re

; 513  :       {
; 514  :         y[0] = z + pio2_1t;

  0011f	dd 45 d8	 fld	 QWORD PTR _z$[ebp]
  00122	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3dd0b4611a626331
  00128	ba 08 00 00 00	 mov	 edx, 8
  0012d	6b c2 00	 imul	 eax, edx, 0
  00130	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  00133	dd 1c 01	 fstp	 QWORD PTR [ecx+eax]

; 515  :         y[1] = (z - y[0]) + pio2_1t;

  00136	ba 08 00 00 00	 mov	 edx, 8
  0013b	6b c2 00	 imul	 eax, edx, 0
  0013e	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  00141	dd 45 d8	 fld	 QWORD PTR _z$[ebp]
  00144	dc 24 01	 fsub	 QWORD PTR [ecx+eax]
  00147	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3dd0b4611a626331
  0014d	ba 08 00 00 00	 mov	 edx, 8
  00152	c1 e2 00	 shl	 edx, 0
  00155	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00158	dd 1c 10	 fstp	 QWORD PTR [eax+edx]

; 516  :       }

  0015b	eb 48		 jmp	 SHORT $LN14@ieee754_re
$LN13@ieee754_re:

; 517  :       else /* near pi/2, use 33 + 33 + 53 bit pi */
; 518  :       {
; 519  :         z += pio2_2;

  0015d	dd 45 d8	 fld	 QWORD PTR _z$[ebp]
  00160	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3dd0b4611a600000
  00166	dd 5d d8	 fstp	 QWORD PTR _z$[ebp]

; 520  :         y[0] = z + pio2_2t;

  00169	dd 45 d8	 fld	 QWORD PTR _z$[ebp]
  0016c	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3ba3198a2e037073
  00172	b9 08 00 00 00	 mov	 ecx, 8
  00177	6b d1 00	 imul	 edx, ecx, 0
  0017a	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0017d	dd 1c 10	 fstp	 QWORD PTR [eax+edx]

; 521  :         y[1] = (z - y[0]) + pio2_2t;

  00180	b9 08 00 00 00	 mov	 ecx, 8
  00185	6b d1 00	 imul	 edx, ecx, 0
  00188	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0018b	dd 45 d8	 fld	 QWORD PTR _z$[ebp]
  0018e	dc 24 10	 fsub	 QWORD PTR [eax+edx]
  00191	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3ba3198a2e037073
  00197	b9 08 00 00 00	 mov	 ecx, 8
  0019c	c1 e1 00	 shl	 ecx, 0
  0019f	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  001a2	dd 1c 0a	 fstp	 QWORD PTR [edx+ecx]
$LN14@ieee754_re:

; 522  :       }
; 523  :       return -1;

  001a5	83 c8 ff	 or	 eax, -1
  001a8	e9 32 03 00 00	 jmp	 $LN1@ieee754_re
$LN10@ieee754_re:

; 524  :     }
; 525  :   }
; 526  :   if (ix <= 0x413921fb) /* |x| ~<= 2^19 * (pi/2), medium size */

  001ad	81 7d fc fb 21
	39 41		 cmp	 DWORD PTR _ix$[ebp], 1094263291 ; 413921fbH
  001b4	0f 8f ea 01 00
	00		 jg	 $LN21@ieee754_re

; 527  :   {
; 528  :     t = fabs (x);

  001ba	83 ec 08	 sub	 esp, 8
  001bd	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  001c0	dd 1c 24	 fstp	 QWORD PTR [esp]
  001c3	e8 00 00 00 00	 call	 _fabs
  001c8	83 c4 08	 add	 esp, 8
  001cb	dd 5d c0	 fstp	 QWORD PTR _t$[ebp]

; 529  :     n = (int) (t * invpio2 + half);

  001ce	dd 45 c0	 fld	 QWORD PTR _t$[ebp]
  001d1	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe45f306dc9c883
  001d7	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  001dd	e8 00 00 00 00	 call	 __ftol2_sse
  001e2	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax

; 530  :     fn = (double) n;

  001e5	db 45 f4	 fild	 DWORD PTR _n$[ebp]
  001e8	dd 5d b8	 fstp	 QWORD PTR _fn$[ebp]

; 531  :     r = t - fn * pio2_1;

  001eb	dd 45 b8	 fld	 QWORD PTR _fn$[ebp]
  001ee	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3ff921fb54400000
  001f4	dc 6d c0	 fsubr	 QWORD PTR _t$[ebp]
  001f7	dd 5d c8	 fstp	 QWORD PTR _r$[ebp]

; 532  :     w = fn * pio2_1t; /* 1st round good to 85 bit */

  001fa	dd 45 b8	 fld	 QWORD PTR _fn$[ebp]
  001fd	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3dd0b4611a626331
  00203	dd 5d d0	 fstp	 QWORD PTR _w$[ebp]

; 533  :     if (n < 32 && ix != npio2_hw[n - 1])

  00206	83 7d f4 20	 cmp	 DWORD PTR _n$[ebp], 32	; 00000020H
  0020a	7d 28		 jge	 SHORT $LN16@ieee754_re
  0020c	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0020f	8b 4d fc	 mov	 ecx, DWORD PTR _ix$[ebp]
  00212	3b 0c 85 fc ff
	ff ff		 cmp	 ecx, DWORD PTR _npio2_hw[eax*4-4]
  00219	74 19		 je	 SHORT $LN16@ieee754_re

; 534  :     {
; 535  :       y[0] = r - w; /* quick check no cancellation */

  0021b	dd 45 c8	 fld	 QWORD PTR _r$[ebp]
  0021e	dc 65 d0	 fsub	 QWORD PTR _w$[ebp]
  00221	ba 08 00 00 00	 mov	 edx, 8
  00226	6b c2 00	 imul	 eax, edx, 0
  00229	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  0022c	dd 1c 01	 fstp	 QWORD PTR [ecx+eax]

; 536  :     }

  0022f	e9 f8 00 00 00	 jmp	 $LN19@ieee754_re
$LN16@ieee754_re:

; 537  :     else
; 538  :     {
; 539  :       j = ix >> 20;

  00234	8b 55 fc	 mov	 edx, DWORD PTR _ix$[ebp]
  00237	c1 fa 14	 sar	 edx, 20			; 00000014H
  0023a	89 55 e8	 mov	 DWORD PTR _j$[ebp], edx

; 540  :       y[0] = r - w;

  0023d	dd 45 c8	 fld	 QWORD PTR _r$[ebp]
  00240	dc 65 d0	 fsub	 QWORD PTR _w$[ebp]
  00243	b8 08 00 00 00	 mov	 eax, 8
  00248	6b c8 00	 imul	 ecx, eax, 0
  0024b	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0024e	dd 1c 0a	 fstp	 QWORD PTR [edx+ecx]

; 541  :       i = j - (((__HI (y[0])) >> 20) & 0x7ff);

  00251	b8 08 00 00 00	 mov	 eax, 8
  00256	6b c8 00	 imul	 ecx, eax, 0
  00259	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0025c	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  00260	c1 f8 14	 sar	 eax, 20			; 00000014H
  00263	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00268	8b 4d e8	 mov	 ecx, DWORD PTR _j$[ebp]
  0026b	2b c8		 sub	 ecx, eax
  0026d	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx

; 542  :       if (i > 16) /* 2nd iteration needed, good to 118 */

  00270	83 7d f8 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  00274	0f 8e b2 00 00
	00		 jle	 $LN19@ieee754_re

; 543  :       {
; 544  :         t = r;

  0027a	dd 45 c8	 fld	 QWORD PTR _r$[ebp]
  0027d	dd 5d c0	 fstp	 QWORD PTR _t$[ebp]

; 545  :         w = fn * pio2_2;

  00280	dd 45 b8	 fld	 QWORD PTR _fn$[ebp]
  00283	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3dd0b4611a600000
  00289	dd 5d d0	 fstp	 QWORD PTR _w$[ebp]

; 546  :         r = t - w;

  0028c	dd 45 c0	 fld	 QWORD PTR _t$[ebp]
  0028f	dc 65 d0	 fsub	 QWORD PTR _w$[ebp]
  00292	dd 5d c8	 fstp	 QWORD PTR _r$[ebp]

; 547  :         w = fn * pio2_2t - ((t - r) - w);

  00295	dd 45 b8	 fld	 QWORD PTR _fn$[ebp]
  00298	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3ba3198a2e037073
  0029e	dd 45 c0	 fld	 QWORD PTR _t$[ebp]
  002a1	dc 65 c8	 fsub	 QWORD PTR _r$[ebp]
  002a4	dc 65 d0	 fsub	 QWORD PTR _w$[ebp]
  002a7	de e9		 fsubp	 ST(1), ST(0)
  002a9	dd 5d d0	 fstp	 QWORD PTR _w$[ebp]

; 548  :         y[0] = r - w;

  002ac	dd 45 c8	 fld	 QWORD PTR _r$[ebp]
  002af	dc 65 d0	 fsub	 QWORD PTR _w$[ebp]
  002b2	ba 08 00 00 00	 mov	 edx, 8
  002b7	6b c2 00	 imul	 eax, edx, 0
  002ba	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  002bd	dd 1c 01	 fstp	 QWORD PTR [ecx+eax]

; 549  :         i = j - (((__HI (y[0])) >> 20) & 0x7ff);

  002c0	ba 08 00 00 00	 mov	 edx, 8
  002c5	6b c2 00	 imul	 eax, edx, 0
  002c8	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  002cb	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  002cf	c1 fa 14	 sar	 edx, 20			; 00000014H
  002d2	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  002d8	8b 45 e8	 mov	 eax, DWORD PTR _j$[ebp]
  002db	2b c2		 sub	 eax, edx
  002dd	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax

; 550  :         if (i > 49) /* 3rd iteration need, 151 bits acc, will cover all possible cases */

  002e0	83 7d f8 31	 cmp	 DWORD PTR _i$[ebp], 49	; 00000031H
  002e4	7e 46		 jle	 SHORT $LN19@ieee754_re

; 551  :         {
; 552  :           t = r;

  002e6	dd 45 c8	 fld	 QWORD PTR _r$[ebp]
  002e9	dd 5d c0	 fstp	 QWORD PTR _t$[ebp]

; 553  :           w = fn * pio2_3;

  002ec	dd 45 b8	 fld	 QWORD PTR _fn$[ebp]
  002ef	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3ba3198a2e000000
  002f5	dd 5d d0	 fstp	 QWORD PTR _w$[ebp]

; 554  :           r = t - w;

  002f8	dd 45 c0	 fld	 QWORD PTR _t$[ebp]
  002fb	dc 65 d0	 fsub	 QWORD PTR _w$[ebp]
  002fe	dd 5d c8	 fstp	 QWORD PTR _r$[ebp]

; 555  :           w = fn * pio2_3t - ((t - r) - w);

  00301	dd 45 b8	 fld	 QWORD PTR _fn$[ebp]
  00304	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@397b839a252049c1
  0030a	dd 45 c0	 fld	 QWORD PTR _t$[ebp]
  0030d	dc 65 c8	 fsub	 QWORD PTR _r$[ebp]
  00310	dc 65 d0	 fsub	 QWORD PTR _w$[ebp]
  00313	de e9		 fsubp	 ST(1), ST(0)
  00315	dd 5d d0	 fstp	 QWORD PTR _w$[ebp]

; 556  :           y[0] = r - w;

  00318	dd 45 c8	 fld	 QWORD PTR _r$[ebp]
  0031b	dc 65 d0	 fsub	 QWORD PTR _w$[ebp]
  0031e	b9 08 00 00 00	 mov	 ecx, 8
  00323	6b d1 00	 imul	 edx, ecx, 0
  00326	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00329	dd 1c 10	 fstp	 QWORD PTR [eax+edx]
$LN19@ieee754_re:

; 557  :         }
; 558  :       }
; 559  :     }
; 560  :     y[1] = (r - y[0]) - w;

  0032c	b9 08 00 00 00	 mov	 ecx, 8
  00331	6b d1 00	 imul	 edx, ecx, 0
  00334	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00337	dd 45 c8	 fld	 QWORD PTR _r$[ebp]
  0033a	dc 24 10	 fsub	 QWORD PTR [eax+edx]
  0033d	dc 65 d0	 fsub	 QWORD PTR _w$[ebp]
  00340	b9 08 00 00 00	 mov	 ecx, 8
  00345	c1 e1 00	 shl	 ecx, 0
  00348	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0034b	dd 1c 0a	 fstp	 QWORD PTR [edx+ecx]

; 561  :     if (hx < 0)

  0034e	83 7d ec 00	 cmp	 DWORD PTR _hx$[ebp], 0
  00352	7d 48		 jge	 SHORT $LN20@ieee754_re

; 562  :     {
; 563  :       y[0] = -y[0];

  00354	b8 08 00 00 00	 mov	 eax, 8
  00359	6b c8 00	 imul	 ecx, eax, 0
  0035c	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0035f	dd 04 0a	 fld	 QWORD PTR [edx+ecx]
  00362	d9 e0		 fchs
  00364	b8 08 00 00 00	 mov	 eax, 8
  00369	6b c8 00	 imul	 ecx, eax, 0
  0036c	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0036f	dd 1c 0a	 fstp	 QWORD PTR [edx+ecx]

; 564  :       y[1] = -y[1];

  00372	b8 08 00 00 00	 mov	 eax, 8
  00377	c1 e0 00	 shl	 eax, 0
  0037a	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  0037d	dd 04 01	 fld	 QWORD PTR [ecx+eax]
  00380	d9 e0		 fchs
  00382	ba 08 00 00 00	 mov	 edx, 8
  00387	c1 e2 00	 shl	 edx, 0
  0038a	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0038d	dd 1c 10	 fstp	 QWORD PTR [eax+edx]

; 565  :       return -n;

  00390	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00393	f7 d8		 neg	 eax
  00395	e9 45 01 00 00	 jmp	 $LN1@ieee754_re

; 566  :     }

  0039a	eb 08		 jmp	 SHORT $LN21@ieee754_re
$LN20@ieee754_re:

; 567  :     else
; 568  :     {
; 569  :       return n;

  0039c	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0039f	e9 3b 01 00 00	 jmp	 $LN1@ieee754_re
$LN21@ieee754_re:

; 570  :     }
; 571  :   }
; 572  :   /*
; 573  :    * all other (large) arguments
; 574  :    */
; 575  :   if (ix >= 0x7ff00000) /* x is inf or NaN */

  003a4	81 7d fc 00 00
	f0 7f		 cmp	 DWORD PTR _ix$[ebp], 2146435072 ; 7ff00000H
  003ab	7c 32		 jl	 SHORT $LN22@ieee754_re

; 576  :   {
; 577  :     y[0] = y[1] = x - x;

  003ad	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  003b0	dc 65 08	 fsub	 QWORD PTR _x$[ebp]
  003b3	dd 5d b0	 fstp	 QWORD PTR tv234[ebp]
  003b6	b9 08 00 00 00	 mov	 ecx, 8
  003bb	c1 e1 00	 shl	 ecx, 0
  003be	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  003c1	dd 45 b0	 fld	 QWORD PTR tv234[ebp]
  003c4	dd 1c 0a	 fstp	 QWORD PTR [edx+ecx]
  003c7	b8 08 00 00 00	 mov	 eax, 8
  003cc	6b c8 00	 imul	 ecx, eax, 0
  003cf	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  003d2	dd 45 b0	 fld	 QWORD PTR tv234[ebp]
  003d5	dd 1c 0a	 fstp	 QWORD PTR [edx+ecx]

; 578  :     return 0;

  003d8	33 c0		 xor	 eax, eax
  003da	e9 00 01 00 00	 jmp	 $LN1@ieee754_re
$LN22@ieee754_re:

; 579  :   }
; 580  :   /* set z = scalbn(|x|, ilogb(x) - 23) */
; 581  :   __LO (z) = __LO (x);

  003df	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  003e2	89 45 d8	 mov	 DWORD PTR _z$[ebp], eax

; 582  :   e0 = (ix >> 20) - 1046; /* e0 = ilogb(z) - 23; */

  003e5	8b 4d fc	 mov	 ecx, DWORD PTR _ix$[ebp]
  003e8	c1 f9 14	 sar	 ecx, 20			; 00000014H
  003eb	81 e9 16 04 00
	00		 sub	 ecx, 1046		; 00000416H
  003f1	89 4d e4	 mov	 DWORD PTR _e0$[ebp], ecx

; 583  :   __HI (z) = ix - (e0 << 20);

  003f4	8b 55 e4	 mov	 edx, DWORD PTR _e0$[ebp]
  003f7	c1 e2 14	 shl	 edx, 20			; 00000014H
  003fa	8b 45 fc	 mov	 eax, DWORD PTR _ix$[ebp]
  003fd	2b c2		 sub	 eax, edx
  003ff	89 45 dc	 mov	 DWORD PTR _z$[ebp+4], eax

; 584  :   for (i = 0; i < 2; i++)

  00402	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00409	eb 09		 jmp	 SHORT $LN4@ieee754_re
$LN2@ieee754_re:
  0040b	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0040e	83 c1 01	 add	 ecx, 1
  00411	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$LN4@ieee754_re:
  00414	83 7d f8 02	 cmp	 DWORD PTR _i$[ebp], 2
  00418	7d 2a		 jge	 SHORT $LN3@ieee754_re

; 585  :   {
; 586  :     tx[i] = (double) ((int) (z));

  0041a	dd 45 d8	 fld	 QWORD PTR _z$[ebp]
  0041d	e8 00 00 00 00	 call	 __ftol2_sse
  00422	89 45 e0	 mov	 DWORD PTR tv413[ebp], eax
  00425	db 45 e0	 fild	 DWORD PTR tv413[ebp]
  00428	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0042b	dd 5c d5 98	 fstp	 QWORD PTR _tx$[ebp+edx*8]

; 587  :     z = (z - tx[i]) * two24;

  0042f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00432	dd 45 d8	 fld	 QWORD PTR _z$[ebp]
  00435	dc 64 c5 98	 fsub	 QWORD PTR _tx$[ebp+eax*8]
  00439	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4170000000000000
  0043f	dd 5d d8	 fstp	 QWORD PTR _z$[ebp]

; 588  :   }

  00442	eb c7		 jmp	 SHORT $LN2@ieee754_re
$LN3@ieee754_re:

; 589  :   tx[2] = z;

  00444	b9 08 00 00 00	 mov	 ecx, 8
  00449	d1 e1		 shl	 ecx, 1
  0044b	dd 45 d8	 fld	 QWORD PTR _z$[ebp]
  0044e	dd 5c 0d 98	 fstp	 QWORD PTR _tx$[ebp+ecx]

; 590  :   nx = 3;

  00452	c7 45 f0 03 00
	00 00		 mov	 DWORD PTR _nx$[ebp], 3
$LN5@ieee754_re:

; 591  :   while (tx[nx - 1] == zero) /* skip zero term */

  00459	8b 55 f0	 mov	 edx, DWORD PTR _nx$[ebp]
  0045c	dd 44 d5 90	 fld	 QWORD PTR _tx$[ebp+edx*8-8]
  00460	d9 ee		 fldz
  00462	da e9		 fucompp
  00464	df e0		 fnstsw	 ax
  00466	f6 c4 44	 test	 ah, 68			; 00000044H
  00469	7a 0b		 jp	 SHORT $LN6@ieee754_re

; 592  :   {
; 593  :     nx--;

  0046b	8b 45 f0	 mov	 eax, DWORD PTR _nx$[ebp]
  0046e	83 e8 01	 sub	 eax, 1
  00471	89 45 f0	 mov	 DWORD PTR _nx$[ebp], eax

; 594  :   }

  00474	eb e3		 jmp	 SHORT $LN5@ieee754_re
$LN6@ieee754_re:

; 595  :   n = __kernel_rem_pio2 (tx, y, e0, nx, 2);

  00476	6a 02		 push	 2
  00478	8b 4d f0	 mov	 ecx, DWORD PTR _nx$[ebp]
  0047b	51		 push	 ecx
  0047c	8b 55 e4	 mov	 edx, DWORD PTR _e0$[ebp]
  0047f	52		 push	 edx
  00480	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00483	50		 push	 eax
  00484	8d 4d 98	 lea	 ecx, DWORD PTR _tx$[ebp]
  00487	51		 push	 ecx
  00488	e8 00 00 00 00	 call	 ___kernel_rem_pio2
  0048d	83 c4 14	 add	 esp, 20			; 00000014H
  00490	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax

; 596  :   if (hx < 0)

  00493	83 7d ec 00	 cmp	 DWORD PTR _hx$[ebp], 0
  00497	7d 43		 jge	 SHORT $LN23@ieee754_re

; 597  :   {
; 598  :     y[0] = -y[0];

  00499	ba 08 00 00 00	 mov	 edx, 8
  0049e	6b c2 00	 imul	 eax, edx, 0
  004a1	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  004a4	dd 04 01	 fld	 QWORD PTR [ecx+eax]
  004a7	d9 e0		 fchs
  004a9	ba 08 00 00 00	 mov	 edx, 8
  004ae	6b c2 00	 imul	 eax, edx, 0
  004b1	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  004b4	dd 1c 01	 fstp	 QWORD PTR [ecx+eax]

; 599  :     y[1] = -y[1];

  004b7	ba 08 00 00 00	 mov	 edx, 8
  004bc	c1 e2 00	 shl	 edx, 0
  004bf	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  004c2	dd 04 10	 fld	 QWORD PTR [eax+edx]
  004c5	d9 e0		 fchs
  004c7	b9 08 00 00 00	 mov	 ecx, 8
  004cc	c1 e1 00	 shl	 ecx, 0
  004cf	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  004d2	dd 1c 0a	 fstp	 QWORD PTR [edx+ecx]

; 600  :     return -n;

  004d5	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  004d8	f7 d8		 neg	 eax
  004da	eb 03		 jmp	 SHORT $LN1@ieee754_re
$LN23@ieee754_re:

; 601  :   }
; 602  :   return n;

  004dc	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
$LN1@ieee754_re:

; 603  : } /* __ieee754_rem_pio2 */

  004df	8b e5		 mov	 esp, ebp
  004e1	5d		 pop	 ebp
  004e2	c3		 ret	 0
___ieee754_rem_pio2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\trig.c
;	COMDAT ___kernel_rem_pio2
_TEXT	SEGMENT
_f$ = -692						; size = 160
_q$ = -532						; size = 160
_fq$ = -372						; size = 160
_iq$ = -212						; size = 80
tv625 = -132						; size = 8
tv496 = -124						; size = 8
tv356 = -116						; size = 8
tv343 = -108						; size = 8
tv333 = -100						; size = 8
tv84 = -92						; size = 8
_jp$ = -84						; size = 4
tv598 = -80						; size = 4
tv471 = -76						; size = 4
_m$ = -72						; size = 4
tv323 = -68						; size = 4
tv203 = -64						; size = 4
_carry$ = -60						; size = 4
_jv$ = -56						; size = 4
_n$ = -52						; size = 4
_jk$ = -48						; size = 4
_jx$ = -44						; size = 4
_ih$ = -40						; size = 4
_z$ = -36						; size = 8
_k$ = -28						; size = 4
_q0$ = -24						; size = 4
_fw$ = -20						; size = 8
_j$ = -12						; size = 4
_jz$ = -8						; size = 4
_i$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_e0$ = 16						; size = 4
_nx$ = 20						; size = 4
_prec$ = 24						; size = 4
___kernel_rem_pio2 PROC					; COMDAT

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b4 02 00
	00		 sub	 esp, 692		; 000002b4H

; 193  :   int jz, jx, jv, jp, jk, carry, n, iq[20], i, j, k, m, q0, ih;
; 194  :   double z, fw, f[20], fq[20], q[20];
; 195  : 
; 196  :   /* initialize jk */
; 197  :   jk = init_jk[prec];

  00009	8b 45 18	 mov	 eax, DWORD PTR _prec$[ebp]
  0000c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _init_jk[eax*4]
  00013	89 4d d0	 mov	 DWORD PTR _jk$[ebp], ecx

; 198  :   jp = jk;

  00016	8b 55 d0	 mov	 edx, DWORD PTR _jk$[ebp]
  00019	89 55 ac	 mov	 DWORD PTR _jp$[ebp], edx

; 199  : 
; 200  :   /* determine jx, jv, q0, note that 3 > q0 */
; 201  :   jx = nx - 1;

  0001c	8b 45 14	 mov	 eax, DWORD PTR _nx$[ebp]
  0001f	83 e8 01	 sub	 eax, 1
  00022	89 45 d4	 mov	 DWORD PTR _jx$[ebp], eax

; 202  :   jv = (e0 - 3) / 24;

  00025	8b 45 10	 mov	 eax, DWORD PTR _e0$[ebp]
  00028	83 e8 03	 sub	 eax, 3
  0002b	99		 cdq
  0002c	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00031	f7 f9		 idiv	 ecx
  00033	89 45 c8	 mov	 DWORD PTR _jv$[ebp], eax

; 203  :   if (jv < 0)

  00036	83 7d c8 00	 cmp	 DWORD PTR _jv$[ebp], 0
  0003a	7d 07		 jge	 SHORT $LN62@kernel_rem

; 204  :   {
; 205  :     jv = 0;

  0003c	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _jv$[ebp], 0
$LN62@kernel_rem:

; 206  :   }
; 207  :   q0 = e0 - 24 * (jv + 1);

  00043	8b 55 c8	 mov	 edx, DWORD PTR _jv$[ebp]
  00046	83 c2 01	 add	 edx, 1
  00049	6b c2 18	 imul	 eax, edx, 24
  0004c	8b 4d 10	 mov	 ecx, DWORD PTR _e0$[ebp]
  0004f	2b c8		 sub	 ecx, eax
  00051	89 4d e8	 mov	 DWORD PTR _q0$[ebp], ecx

; 208  : 
; 209  :   /* set up f[0] to f[jx + jk] where f[jx + jk] = ipio2[jv + jk] */
; 210  :   j = jv - jx;

  00054	8b 55 c8	 mov	 edx, DWORD PTR _jv$[ebp]
  00057	2b 55 d4	 sub	 edx, DWORD PTR _jx$[ebp]
  0005a	89 55 f4	 mov	 DWORD PTR _j$[ebp], edx

; 211  :   m = jx + jk;

  0005d	8b 45 d4	 mov	 eax, DWORD PTR _jx$[ebp]
  00060	03 45 d0	 add	 eax, DWORD PTR _jk$[ebp]
  00063	89 45 b8	 mov	 DWORD PTR _m$[ebp], eax

; 212  :   for (i = 0; i <= m; i++, j++)

  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0006d	eb 12		 jmp	 SHORT $LN4@kernel_rem
$LN2@kernel_rem:
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00072	83 c1 01	 add	 ecx, 1
  00075	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
  00078	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  0007b	83 c2 01	 add	 edx, 1
  0007e	89 55 f4	 mov	 DWORD PTR _j$[ebp], edx
$LN4@kernel_rem:
  00081	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00084	3b 45 b8	 cmp	 eax, DWORD PTR _m$[ebp]
  00087	7f 29		 jg	 SHORT $LN3@kernel_rem

; 213  :   {
; 214  :     f[i] = (j < 0) ? zero : (double) ipio2[j];

  00089	83 7d f4 00	 cmp	 DWORD PTR _j$[ebp], 0
  0008d	7d 07		 jge	 SHORT $LN89@kernel_rem
  0008f	d9 ee		 fldz
  00091	dd 5d a4	 fstp	 QWORD PTR tv84[ebp]
  00094	eb 0d		 jmp	 SHORT $LN90@kernel_rem
$LN89@kernel_rem:
  00096	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  00099	db 04 8d 00 00
	00 00		 fild	 DWORD PTR _ipio2[ecx*4]
  000a0	dd 5d a4	 fstp	 QWORD PTR tv84[ebp]
$LN90@kernel_rem:
  000a3	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000a6	dd 45 a4	 fld	 QWORD PTR tv84[ebp]
  000a9	dd 9c d5 4c fd
	ff ff		 fstp	 QWORD PTR _f$[ebp+edx*8]

; 215  :   }

  000b0	eb bd		 jmp	 SHORT $LN2@kernel_rem
$LN3@kernel_rem:

; 216  : 
; 217  :   /* compute q[0], q[1], ... q[jk] */
; 218  :   for (i = 0; i <= jk; i++)

  000b2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000b9	eb 09		 jmp	 SHORT $LN7@kernel_rem
$LN5@kernel_rem:
  000bb	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000be	83 c0 01	 add	 eax, 1
  000c1	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@kernel_rem:
  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000c7	3b 4d d0	 cmp	 ecx, DWORD PTR _jk$[ebp]
  000ca	7f 4f		 jg	 SHORT $LN6@kernel_rem

; 219  :   {
; 220  :     for (j = 0, fw = 0.0; j <= jx; j++)

  000cc	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  000d3	d9 ee		 fldz
  000d5	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]
  000d8	eb 09		 jmp	 SHORT $LN10@kernel_rem
$LN8@kernel_rem:
  000da	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  000dd	83 c2 01	 add	 edx, 1
  000e0	89 55 f4	 mov	 DWORD PTR _j$[ebp], edx
$LN10@kernel_rem:
  000e3	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  000e6	3b 45 d4	 cmp	 eax, DWORD PTR _jx$[ebp]
  000e9	7f 21		 jg	 SHORT $LN9@kernel_rem

; 221  :     {
; 222  :       fw += x[j] * f[jx + i - j];

  000eb	8b 4d d4	 mov	 ecx, DWORD PTR _jx$[ebp]
  000ee	03 4d fc	 add	 ecx, DWORD PTR _i$[ebp]
  000f1	2b 4d f4	 sub	 ecx, DWORD PTR _j$[ebp]
  000f4	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  000f7	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000fa	dd 04 d0	 fld	 QWORD PTR [eax+edx*8]
  000fd	dc 8c cd 4c fd
	ff ff		 fmul	 QWORD PTR _f$[ebp+ecx*8]
  00104	dc 45 ec	 fadd	 QWORD PTR _fw$[ebp]
  00107	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]

; 223  :     }

  0010a	eb ce		 jmp	 SHORT $LN8@kernel_rem
$LN9@kernel_rem:

; 224  :     q[i] = fw;

  0010c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0010f	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  00112	dd 9c cd ec fd
	ff ff		 fstp	 QWORD PTR _q$[ebp+ecx*8]

; 225  :   }

  00119	eb a0		 jmp	 SHORT $LN5@kernel_rem
$LN6@kernel_rem:

; 226  : 
; 227  :   jz = jk;

  0011b	8b 55 d0	 mov	 edx, DWORD PTR _jk$[ebp]
  0011e	89 55 f8	 mov	 DWORD PTR _jz$[ebp], edx
$recompute$98:

; 228  : recompute:
; 229  :   /* distill q[] into iq[] reversingly */
; 230  :   for (i = 0, j = jz, z = q[jz]; j > 0; i++, j--)

  00121	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00128	8b 45 f8	 mov	 eax, DWORD PTR _jz$[ebp]
  0012b	89 45 f4	 mov	 DWORD PTR _j$[ebp], eax
  0012e	8b 4d f8	 mov	 ecx, DWORD PTR _jz$[ebp]
  00131	dd 84 cd ec fd
	ff ff		 fld	 QWORD PTR _q$[ebp+ecx*8]
  00138	dd 5d dc	 fstp	 QWORD PTR _z$[ebp]
  0013b	eb 12		 jmp	 SHORT $LN13@kernel_rem
$LN11@kernel_rem:
  0013d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00140	83 c2 01	 add	 edx, 1
  00143	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
  00146	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  00149	83 e8 01	 sub	 eax, 1
  0014c	89 45 f4	 mov	 DWORD PTR _j$[ebp], eax
$LN13@kernel_rem:
  0014f	83 7d f4 00	 cmp	 DWORD PTR _j$[ebp], 0
  00153	7e 44		 jle	 SHORT $LN12@kernel_rem

; 231  :   {
; 232  :     fw = (double) ((int) (twon24 * z));

  00155	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3e70000000000000
  0015b	dc 4d dc	 fmul	 QWORD PTR _z$[ebp]
  0015e	e8 00 00 00 00	 call	 __ftol2_sse
  00163	89 45 b4	 mov	 DWORD PTR tv471[ebp], eax
  00166	db 45 b4	 fild	 DWORD PTR tv471[ebp]
  00169	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]

; 233  :     iq[i] = (int) (z - two24 * fw);

  0016c	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4170000000000000
  00172	dc 4d ec	 fmul	 QWORD PTR _fw$[ebp]
  00175	dc 6d dc	 fsubr	 QWORD PTR _z$[ebp]
  00178	e8 00 00 00 00	 call	 __ftol2_sse
  0017d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00180	89 84 8d 2c ff
	ff ff		 mov	 DWORD PTR _iq$[ebp+ecx*4], eax

; 234  :     z = q[j - 1] + fw;

  00187	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  0018a	dd 84 d5 e4 fd
	ff ff		 fld	 QWORD PTR _q$[ebp+edx*8-8]
  00191	dc 45 ec	 fadd	 QWORD PTR _fw$[ebp]
  00194	dd 5d dc	 fstp	 QWORD PTR _z$[ebp]

; 235  :   }

  00197	eb a4		 jmp	 SHORT $LN11@kernel_rem
$LN12@kernel_rem:

; 236  : 
; 237  :   /* compute n */
; 238  :   z = scalbn (z, q0); /* actual value of z */

  00199	8b 45 e8	 mov	 eax, DWORD PTR _q0$[ebp]
  0019c	50		 push	 eax
  0019d	83 ec 08	 sub	 esp, 8
  001a0	dd 45 dc	 fld	 QWORD PTR _z$[ebp]
  001a3	dd 1c 24	 fstp	 QWORD PTR [esp]
  001a6	e8 00 00 00 00	 call	 _scalbn
  001ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ae	dd 5d dc	 fstp	 QWORD PTR _z$[ebp]

; 239  :   z -= 8.0 * floor (z * 0.125); /* trim off integer >= 8 */

  001b1	dd 45 dc	 fld	 QWORD PTR _z$[ebp]
  001b4	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fc0000000000000
  001ba	83 ec 08	 sub	 esp, 8
  001bd	dd 1c 24	 fstp	 QWORD PTR [esp]
  001c0	e8 00 00 00 00	 call	 _floor
  001c5	83 c4 08	 add	 esp, 8
  001c8	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4020000000000000
  001ce	dc 6d dc	 fsubr	 QWORD PTR _z$[ebp]
  001d1	dd 5d dc	 fstp	 QWORD PTR _z$[ebp]

; 240  :   n = (int) z;

  001d4	dd 45 dc	 fld	 QWORD PTR _z$[ebp]
  001d7	e8 00 00 00 00	 call	 __ftol2_sse
  001dc	89 45 cc	 mov	 DWORD PTR _n$[ebp], eax

; 241  :   z -= (double) n;

  001df	db 45 cc	 fild	 DWORD PTR _n$[ebp]
  001e2	dd 5d 84	 fstp	 QWORD PTR tv496[ebp]
  001e5	dd 45 84	 fld	 QWORD PTR tv496[ebp]
  001e8	dc 6d dc	 fsubr	 QWORD PTR _z$[ebp]
  001eb	dd 5d dc	 fstp	 QWORD PTR _z$[ebp]

; 242  :   ih = 0;

  001ee	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _ih$[ebp], 0

; 243  :   if (q0 > 0) /* need iq[jz - 1] to determine n */

  001f5	83 7d e8 00	 cmp	 DWORD PTR _q0$[ebp], 0
  001f9	7e 5c		 jle	 SHORT $LN63@kernel_rem

; 244  :   {
; 245  :     i = (iq[jz - 1] >> (24 - q0));

  001fb	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00200	2b 4d e8	 sub	 ecx, DWORD PTR _q0$[ebp]
  00203	8b 55 f8	 mov	 edx, DWORD PTR _jz$[ebp]
  00206	8b 84 95 28 ff
	ff ff		 mov	 eax, DWORD PTR _iq$[ebp+edx*4-4]
  0020d	d3 f8		 sar	 eax, cl
  0020f	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 246  :     n += i;

  00212	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  00215	03 4d fc	 add	 ecx, DWORD PTR _i$[ebp]
  00218	89 4d cc	 mov	 DWORD PTR _n$[ebp], ecx

; 247  :     iq[jz - 1] -= i << (24 - q0);

  0021b	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00220	2b 4d e8	 sub	 ecx, DWORD PTR _q0$[ebp]
  00223	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00226	d3 e2		 shl	 edx, cl
  00228	8b 45 f8	 mov	 eax, DWORD PTR _jz$[ebp]
  0022b	8b 8c 85 28 ff
	ff ff		 mov	 ecx, DWORD PTR _iq$[ebp+eax*4-4]
  00232	2b ca		 sub	 ecx, edx
  00234	8b 55 f8	 mov	 edx, DWORD PTR _jz$[ebp]
  00237	89 8c 95 28 ff
	ff ff		 mov	 DWORD PTR _iq$[ebp+edx*4-4], ecx

; 248  :     ih = iq[jz - 1] >> (23 - q0);

  0023e	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00243	2b 4d e8	 sub	 ecx, DWORD PTR _q0$[ebp]
  00246	8b 45 f8	 mov	 eax, DWORD PTR _jz$[ebp]
  00249	8b 94 85 28 ff
	ff ff		 mov	 edx, DWORD PTR _iq$[ebp+eax*4-4]
  00250	d3 fa		 sar	 edx, cl
  00252	89 55 d8	 mov	 DWORD PTR _ih$[ebp], edx

; 249  :   }

  00255	eb 2f		 jmp	 SHORT $LN67@kernel_rem
$LN63@kernel_rem:

; 250  :   else if (q0 == 0)

  00257	83 7d e8 00	 cmp	 DWORD PTR _q0$[ebp], 0
  0025b	75 12		 jne	 SHORT $LN65@kernel_rem

; 251  :   {
; 252  :     ih = iq[jz - 1] >> 23;

  0025d	8b 45 f8	 mov	 eax, DWORD PTR _jz$[ebp]
  00260	8b 8c 85 28 ff
	ff ff		 mov	 ecx, DWORD PTR _iq$[ebp+eax*4-4]
  00267	c1 f9 17	 sar	 ecx, 23			; 00000017H
  0026a	89 4d d8	 mov	 DWORD PTR _ih$[ebp], ecx

; 253  :   }

  0026d	eb 17		 jmp	 SHORT $LN67@kernel_rem
$LN65@kernel_rem:

; 254  :   else if (z >= 0.5)

  0026f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe0000000000000
  00275	dc 5d dc	 fcomp	 QWORD PTR _z$[ebp]
  00278	df e0		 fnstsw	 ax
  0027a	f6 c4 41	 test	 ah, 65			; 00000041H
  0027d	7a 07		 jp	 SHORT $LN67@kernel_rem

; 255  :   {
; 256  :     ih = 2;

  0027f	c7 45 d8 02 00
	00 00		 mov	 DWORD PTR _ih$[ebp], 2
$LN67@kernel_rem:

; 257  :   }
; 258  : 
; 259  :   if (ih > 0) /* q > 0.5 */

  00286	83 7d d8 00	 cmp	 DWORD PTR _ih$[ebp], 0
  0028a	0f 8e f0 00 00
	00		 jle	 $LN76@kernel_rem

; 260  :   {
; 261  :     n += 1;

  00290	8b 55 cc	 mov	 edx, DWORD PTR _n$[ebp]
  00293	83 c2 01	 add	 edx, 1
  00296	89 55 cc	 mov	 DWORD PTR _n$[ebp], edx

; 262  :     carry = 0;

  00299	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _carry$[ebp], 0

; 263  :     for (i = 0; i < jz; i++) /* compute 1 - q */

  002a0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  002a7	eb 09		 jmp	 SHORT $LN16@kernel_rem
$LN14@kernel_rem:
  002a9	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  002ac	83 c0 01	 add	 eax, 1
  002af	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN16@kernel_rem:
  002b2	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  002b5	3b 4d f8	 cmp	 ecx, DWORD PTR _jz$[ebp]
  002b8	7d 48		 jge	 SHORT $LN15@kernel_rem

; 264  :     {
; 265  :       j = iq[i];

  002ba	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  002bd	8b 84 95 2c ff
	ff ff		 mov	 eax, DWORD PTR _iq$[ebp+edx*4]
  002c4	89 45 f4	 mov	 DWORD PTR _j$[ebp], eax

; 266  :       if (carry == 0)

  002c7	83 7d c4 00	 cmp	 DWORD PTR _carry$[ebp], 0
  002cb	75 21		 jne	 SHORT $LN69@kernel_rem

; 267  :       {
; 268  :         if (j != 0)

  002cd	83 7d f4 00	 cmp	 DWORD PTR _j$[ebp], 0
  002d1	74 19		 je	 SHORT $LN71@kernel_rem

; 269  :         {
; 270  :           carry = 1;

  002d3	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _carry$[ebp], 1

; 271  :           iq[i] = 0x1000000 - j;

  002da	b9 00 00 00 01	 mov	 ecx, 16777216		; 01000000H
  002df	2b 4d f4	 sub	 ecx, DWORD PTR _j$[ebp]
  002e2	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  002e5	89 8c 95 2c ff
	ff ff		 mov	 DWORD PTR _iq$[ebp+edx*4], ecx
$LN71@kernel_rem:

; 272  :         }
; 273  :       }

  002ec	eb 12		 jmp	 SHORT $LN70@kernel_rem
$LN69@kernel_rem:

; 274  :       else
; 275  :       {
; 276  :         iq[i] = 0xffffff - j;

  002ee	b8 ff ff ff 00	 mov	 eax, 16777215		; 00ffffffH
  002f3	2b 45 f4	 sub	 eax, DWORD PTR _j$[ebp]
  002f6	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  002f9	89 84 8d 2c ff
	ff ff		 mov	 DWORD PTR _iq$[ebp+ecx*4], eax
$LN70@kernel_rem:

; 277  :       }
; 278  :     }

  00300	eb a7		 jmp	 SHORT $LN14@kernel_rem
$LN15@kernel_rem:

; 279  :     if (q0 > 0) /* rare case: chance is 1 in 12 */

  00302	83 7d e8 00	 cmp	 DWORD PTR _q0$[ebp], 0
  00306	7e 4a		 jle	 SHORT $LN17@kernel_rem

; 280  :     {
; 281  :       switch (q0)

  00308	8b 55 e8	 mov	 edx, DWORD PTR _q0$[ebp]
  0030b	89 55 c0	 mov	 DWORD PTR tv203[ebp], edx
  0030e	83 7d c0 01	 cmp	 DWORD PTR tv203[ebp], 1
  00312	74 08		 je	 SHORT $LN73@kernel_rem
  00314	83 7d c0 02	 cmp	 DWORD PTR tv203[ebp], 2
  00318	74 1e		 je	 SHORT $LN74@kernel_rem
  0031a	eb 36		 jmp	 SHORT $LN17@kernel_rem
$LN73@kernel_rem:

; 282  :       {
; 283  :         case 1:
; 284  :         {
; 285  :           iq[jz - 1] &= 0x7fffff;

  0031c	8b 45 f8	 mov	 eax, DWORD PTR _jz$[ebp]
  0031f	8b 8c 85 28 ff
	ff ff		 mov	 ecx, DWORD PTR _iq$[ebp+eax*4-4]
  00326	81 e1 ff ff 7f
	00		 and	 ecx, 8388607		; 007fffffH
  0032c	8b 55 f8	 mov	 edx, DWORD PTR _jz$[ebp]
  0032f	89 8c 95 28 ff
	ff ff		 mov	 DWORD PTR _iq$[ebp+edx*4-4], ecx

; 286  :           break;

  00336	eb 1a		 jmp	 SHORT $LN17@kernel_rem
$LN74@kernel_rem:

; 287  :         }
; 288  :         case 2:
; 289  :         {
; 290  :           iq[jz - 1] &= 0x3fffff;

  00338	8b 45 f8	 mov	 eax, DWORD PTR _jz$[ebp]
  0033b	8b 8c 85 28 ff
	ff ff		 mov	 ecx, DWORD PTR _iq$[ebp+eax*4-4]
  00342	81 e1 ff ff 3f
	00		 and	 ecx, 4194303		; 003fffffH
  00348	8b 55 f8	 mov	 edx, DWORD PTR _jz$[ebp]
  0034b	89 8c 95 28 ff
	ff ff		 mov	 DWORD PTR _iq$[ebp+edx*4-4], ecx
$LN17@kernel_rem:

; 291  :           break;
; 292  :         }
; 293  :       }
; 294  :     }
; 295  :     if (ih == 2)

  00352	83 7d d8 02	 cmp	 DWORD PTR _ih$[ebp], 2
  00356	75 28		 jne	 SHORT $LN76@kernel_rem

; 296  :     {
; 297  :       z = one - z;

  00358	d9 e8		 fld1
  0035a	dc 65 dc	 fsub	 QWORD PTR _z$[ebp]
  0035d	dd 5d dc	 fstp	 QWORD PTR _z$[ebp]

; 298  :       if (carry != 0)

  00360	83 7d c4 00	 cmp	 DWORD PTR _carry$[ebp], 0
  00364	74 1a		 je	 SHORT $LN76@kernel_rem

; 299  :       {
; 300  :         z -= scalbn (one, q0);

  00366	8b 45 e8	 mov	 eax, DWORD PTR _q0$[ebp]
  00369	50		 push	 eax
  0036a	83 ec 08	 sub	 esp, 8
  0036d	d9 e8		 fld1
  0036f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00372	e8 00 00 00 00	 call	 _scalbn
  00377	83 c4 0c	 add	 esp, 12			; 0000000cH
  0037a	dc 6d dc	 fsubr	 QWORD PTR _z$[ebp]
  0037d	dd 5d dc	 fstp	 QWORD PTR _z$[ebp]
$LN76@kernel_rem:

; 301  :       }
; 302  :     }
; 303  :   }
; 304  : 
; 305  :   /* check if recomputation is needed */
; 306  :   if (z == zero)

  00380	dd 45 dc	 fld	 QWORD PTR _z$[ebp]
  00383	d9 ee		 fldz
  00385	da e9		 fucompp
  00387	df e0		 fnstsw	 ax
  00389	f6 c4 44	 test	 ah, 68			; 00000044H
  0038c	0f 8a f9 00 00
	00		 jp	 $LN78@kernel_rem

; 307  :   {
; 308  :     j = 0;

  00392	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 309  :     for (i = jz - 1; i >= jk; i--)

  00399	8b 4d f8	 mov	 ecx, DWORD PTR _jz$[ebp]
  0039c	83 e9 01	 sub	 ecx, 1
  0039f	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
  003a2	eb 09		 jmp	 SHORT $LN21@kernel_rem
$LN19@kernel_rem:
  003a4	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  003a7	83 ea 01	 sub	 edx, 1
  003aa	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$LN21@kernel_rem:
  003ad	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  003b0	3b 45 d0	 cmp	 eax, DWORD PTR _jk$[ebp]
  003b3	7c 12		 jl	 SHORT $LN20@kernel_rem

; 310  :     {
; 311  :       j |= iq[i];

  003b5	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  003b8	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  003bb	0b 94 8d 2c ff
	ff ff		 or	 edx, DWORD PTR _iq$[ebp+ecx*4]
  003c2	89 55 f4	 mov	 DWORD PTR _j$[ebp], edx

; 312  :     }

  003c5	eb dd		 jmp	 SHORT $LN19@kernel_rem
$LN20@kernel_rem:

; 313  :     if (j == 0) /* need recomputation */

  003c7	83 7d f4 00	 cmp	 DWORD PTR _j$[ebp], 0
  003cb	0f 85 ba 00 00
	00		 jne	 $LN78@kernel_rem

; 314  :     {
; 315  :       for (k = 1; iq[jk - k] == 0; k++) /* k = no. of terms needed */

  003d1	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _k$[ebp], 1
  003d8	eb 09		 jmp	 SHORT $LN24@kernel_rem
$LN22@kernel_rem:
  003da	8b 45 e4	 mov	 eax, DWORD PTR _k$[ebp]
  003dd	83 c0 01	 add	 eax, 1
  003e0	89 45 e4	 mov	 DWORD PTR _k$[ebp], eax
$LN24@kernel_rem:
  003e3	8b 4d d0	 mov	 ecx, DWORD PTR _jk$[ebp]
  003e6	2b 4d e4	 sub	 ecx, DWORD PTR _k$[ebp]
  003e9	83 bc 8d 2c ff
	ff ff 00	 cmp	 DWORD PTR _iq$[ebp+ecx*4], 0
  003f1	75 02		 jne	 SHORT $LN23@kernel_rem

; 316  :       {
; 317  :       }

  003f3	eb e5		 jmp	 SHORT $LN22@kernel_rem
$LN23@kernel_rem:

; 318  : 
; 319  :       for (i = jz + 1; i <= jz + k; i++) /* add q[jz + 1] to q[jz + k] */

  003f5	8b 55 f8	 mov	 edx, DWORD PTR _jz$[ebp]
  003f8	83 c2 01	 add	 edx, 1
  003fb	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
  003fe	eb 09		 jmp	 SHORT $LN27@kernel_rem
$LN25@kernel_rem:
  00400	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00403	83 c0 01	 add	 eax, 1
  00406	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN27@kernel_rem:
  00409	8b 4d f8	 mov	 ecx, DWORD PTR _jz$[ebp]
  0040c	03 4d e4	 add	 ecx, DWORD PTR _k$[ebp]
  0040f	39 4d fc	 cmp	 DWORD PTR _i$[ebp], ecx
  00412	7f 69		 jg	 SHORT $LN26@kernel_rem

; 320  :       {
; 321  :         f[jx + i] = (double) ipio2[jv + i];

  00414	8b 55 c8	 mov	 edx, DWORD PTR _jv$[ebp]
  00417	03 55 fc	 add	 edx, DWORD PTR _i$[ebp]
  0041a	db 04 95 00 00
	00 00		 fild	 DWORD PTR _ipio2[edx*4]
  00421	8b 45 d4	 mov	 eax, DWORD PTR _jx$[ebp]
  00424	03 45 fc	 add	 eax, DWORD PTR _i$[ebp]
  00427	dd 9c c5 4c fd
	ff ff		 fstp	 QWORD PTR _f$[ebp+eax*8]

; 322  :         for (j = 0, fw = 0.0; j <= jx; j++)

  0042e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00435	d9 ee		 fldz
  00437	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]
  0043a	eb 09		 jmp	 SHORT $LN30@kernel_rem
$LN28@kernel_rem:
  0043c	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  0043f	83 c1 01	 add	 ecx, 1
  00442	89 4d f4	 mov	 DWORD PTR _j$[ebp], ecx
$LN30@kernel_rem:
  00445	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  00448	3b 55 d4	 cmp	 edx, DWORD PTR _jx$[ebp]
  0044b	7f 21		 jg	 SHORT $LN29@kernel_rem

; 323  :         {
; 324  :           fw += x[j] * f[jx + i - j];

  0044d	8b 45 d4	 mov	 eax, DWORD PTR _jx$[ebp]
  00450	03 45 fc	 add	 eax, DWORD PTR _i$[ebp]
  00453	2b 45 f4	 sub	 eax, DWORD PTR _j$[ebp]
  00456	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  00459	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0045c	dd 04 ca	 fld	 QWORD PTR [edx+ecx*8]
  0045f	dc 8c c5 4c fd
	ff ff		 fmul	 QWORD PTR _f$[ebp+eax*8]
  00466	dc 45 ec	 fadd	 QWORD PTR _fw$[ebp]
  00469	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]

; 325  :         }

  0046c	eb ce		 jmp	 SHORT $LN28@kernel_rem
$LN29@kernel_rem:

; 326  :         q[i] = fw;

  0046e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00471	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  00474	dd 9c c5 ec fd
	ff ff		 fstp	 QWORD PTR _q$[ebp+eax*8]

; 327  :       }

  0047b	eb 83		 jmp	 SHORT $LN25@kernel_rem
$LN26@kernel_rem:

; 328  :       jz += k;

  0047d	8b 4d f8	 mov	 ecx, DWORD PTR _jz$[ebp]
  00480	03 4d e4	 add	 ecx, DWORD PTR _k$[ebp]
  00483	89 4d f8	 mov	 DWORD PTR _jz$[ebp], ecx

; 329  :       goto recompute;

  00486	e9 96 fc ff ff	 jmp	 $recompute$98
$LN78@kernel_rem:

; 330  :     }
; 331  :   }
; 332  : 
; 333  :   /* chop off zero terms */
; 334  :   if (z == 0.0)

  0048b	dd 45 dc	 fld	 QWORD PTR _z$[ebp]
  0048e	d9 ee		 fldz
  00490	da e9		 fucompp
  00492	df e0		 fnstsw	 ax
  00494	f6 c4 44	 test	 ah, 68			; 00000044H
  00497	7a 38		 jp	 SHORT $LN79@kernel_rem

; 335  :   {
; 336  :     jz -= 1;

  00499	8b 55 f8	 mov	 edx, DWORD PTR _jz$[ebp]
  0049c	83 ea 01	 sub	 edx, 1
  0049f	89 55 f8	 mov	 DWORD PTR _jz$[ebp], edx

; 337  :     q0 -= 24;

  004a2	8b 45 e8	 mov	 eax, DWORD PTR _q0$[ebp]
  004a5	83 e8 18	 sub	 eax, 24			; 00000018H
  004a8	89 45 e8	 mov	 DWORD PTR _q0$[ebp], eax
$LN31@kernel_rem:

; 338  :     while (iq[jz] == 0)

  004ab	8b 4d f8	 mov	 ecx, DWORD PTR _jz$[ebp]
  004ae	83 bc 8d 2c ff
	ff ff 00	 cmp	 DWORD PTR _iq$[ebp+ecx*4], 0
  004b6	75 14		 jne	 SHORT $LN32@kernel_rem

; 339  :     {
; 340  :       jz--;

  004b8	8b 55 f8	 mov	 edx, DWORD PTR _jz$[ebp]
  004bb	83 ea 01	 sub	 edx, 1
  004be	89 55 f8	 mov	 DWORD PTR _jz$[ebp], edx

; 341  :       q0 -= 24;

  004c1	8b 45 e8	 mov	 eax, DWORD PTR _q0$[ebp]
  004c4	83 e8 18	 sub	 eax, 24			; 00000018H
  004c7	89 45 e8	 mov	 DWORD PTR _q0$[ebp], eax

; 342  :     }

  004ca	eb df		 jmp	 SHORT $LN31@kernel_rem
$LN32@kernel_rem:

; 343  :   }

  004cc	e9 94 00 00 00	 jmp	 $LN82@kernel_rem
$LN79@kernel_rem:

; 344  :   else
; 345  :   { /* break z into 24-bit if necessary */
; 346  :     z = scalbn (z, -q0);

  004d1	8b 4d e8	 mov	 ecx, DWORD PTR _q0$[ebp]
  004d4	f7 d9		 neg	 ecx
  004d6	51		 push	 ecx
  004d7	83 ec 08	 sub	 esp, 8
  004da	dd 45 dc	 fld	 QWORD PTR _z$[ebp]
  004dd	dd 1c 24	 fstp	 QWORD PTR [esp]
  004e0	e8 00 00 00 00	 call	 _scalbn
  004e5	83 c4 0c	 add	 esp, 12			; 0000000cH
  004e8	dd 5d dc	 fstp	 QWORD PTR _z$[ebp]

; 347  :     if (z >= two24)

  004eb	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4170000000000000
  004f1	dc 5d dc	 fcomp	 QWORD PTR _z$[ebp]
  004f4	df e0		 fnstsw	 ax
  004f6	f6 c4 41	 test	 ah, 65			; 00000041H
  004f9	7a 58		 jp	 SHORT $LN81@kernel_rem

; 348  :     {
; 349  :       fw = (double) ((int) (twon24 * z));

  004fb	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3e70000000000000
  00501	dc 4d dc	 fmul	 QWORD PTR _z$[ebp]
  00504	e8 00 00 00 00	 call	 __ftol2_sse
  00509	89 45 b0	 mov	 DWORD PTR tv598[ebp], eax
  0050c	db 45 b0	 fild	 DWORD PTR tv598[ebp]
  0050f	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]

; 350  :       iq[jz] = (int) (z - two24 * fw);

  00512	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4170000000000000
  00518	dc 4d ec	 fmul	 QWORD PTR _fw$[ebp]
  0051b	dc 6d dc	 fsubr	 QWORD PTR _z$[ebp]
  0051e	e8 00 00 00 00	 call	 __ftol2_sse
  00523	8b 55 f8	 mov	 edx, DWORD PTR _jz$[ebp]
  00526	89 84 95 2c ff
	ff ff		 mov	 DWORD PTR _iq$[ebp+edx*4], eax

; 351  :       jz += 1;

  0052d	8b 45 f8	 mov	 eax, DWORD PTR _jz$[ebp]
  00530	83 c0 01	 add	 eax, 1
  00533	89 45 f8	 mov	 DWORD PTR _jz$[ebp], eax

; 352  :       q0 += 24;

  00536	8b 4d e8	 mov	 ecx, DWORD PTR _q0$[ebp]
  00539	83 c1 18	 add	 ecx, 24			; 00000018H
  0053c	89 4d e8	 mov	 DWORD PTR _q0$[ebp], ecx

; 353  :       iq[jz] = (int) fw;

  0053f	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  00542	e8 00 00 00 00	 call	 __ftol2_sse
  00547	8b 55 f8	 mov	 edx, DWORD PTR _jz$[ebp]
  0054a	89 84 95 2c ff
	ff ff		 mov	 DWORD PTR _iq$[ebp+edx*4], eax

; 354  :     }

  00551	eb 12		 jmp	 SHORT $LN82@kernel_rem
$LN81@kernel_rem:

; 355  :     else
; 356  :     {
; 357  :       iq[jz] = (int) z;

  00553	dd 45 dc	 fld	 QWORD PTR _z$[ebp]
  00556	e8 00 00 00 00	 call	 __ftol2_sse
  0055b	8b 4d f8	 mov	 ecx, DWORD PTR _jz$[ebp]
  0055e	89 84 8d 2c ff
	ff ff		 mov	 DWORD PTR _iq$[ebp+ecx*4], eax
$LN82@kernel_rem:

; 358  :     }
; 359  :   }
; 360  : 
; 361  :   /* convert integer "bit" chunk to floating-point value */
; 362  :   fw = scalbn (one, q0);

  00565	8b 55 e8	 mov	 edx, DWORD PTR _q0$[ebp]
  00568	52		 push	 edx
  00569	83 ec 08	 sub	 esp, 8
  0056c	d9 e8		 fld1
  0056e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00571	e8 00 00 00 00	 call	 _scalbn
  00576	83 c4 0c	 add	 esp, 12			; 0000000cH
  00579	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]

; 363  :   for (i = jz; i >= 0; i--)

  0057c	8b 45 f8	 mov	 eax, DWORD PTR _jz$[ebp]
  0057f	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
  00582	eb 09		 jmp	 SHORT $LN35@kernel_rem
$LN33@kernel_rem:
  00584	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00587	83 e9 01	 sub	 ecx, 1
  0058a	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN35@kernel_rem:
  0058d	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  00591	7c 31		 jl	 SHORT $LN34@kernel_rem

; 364  :   {
; 365  :     q[i] = fw * (double) iq[i];

  00593	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00596	db 84 95 2c ff
	ff ff		 fild	 DWORD PTR _iq$[ebp+edx*4]
  0059d	dd 9d 7c ff ff
	ff		 fstp	 QWORD PTR tv625[ebp]
  005a3	dd 85 7c ff ff
	ff		 fld	 QWORD PTR tv625[ebp]
  005a9	dc 4d ec	 fmul	 QWORD PTR _fw$[ebp]
  005ac	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  005af	dd 9c c5 ec fd
	ff ff		 fstp	 QWORD PTR _q$[ebp+eax*8]

; 366  :     fw *= twon24;

  005b6	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  005b9	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3e70000000000000
  005bf	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]

; 367  :   }

  005c2	eb c0		 jmp	 SHORT $LN33@kernel_rem
$LN34@kernel_rem:

; 368  : 
; 369  :   /* compute PIo2[0, ..., jp] * q[jz, ..., 0] */
; 370  :   for (i = jz; i >= 0; i--)

  005c4	8b 4d f8	 mov	 ecx, DWORD PTR _jz$[ebp]
  005c7	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
  005ca	eb 09		 jmp	 SHORT $LN38@kernel_rem
$LN36@kernel_rem:
  005cc	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  005cf	83 ea 01	 sub	 edx, 1
  005d2	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$LN38@kernel_rem:
  005d5	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  005d9	7c 5b		 jl	 SHORT $LN37@kernel_rem

; 371  :   {
; 372  :     for (fw = 0.0, k = 0; k <= jp && k <= jz - i; k++)

  005db	d9 ee		 fldz
  005dd	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]
  005e0	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _k$[ebp], 0
  005e7	eb 09		 jmp	 SHORT $LN41@kernel_rem
$LN39@kernel_rem:
  005e9	8b 45 e4	 mov	 eax, DWORD PTR _k$[ebp]
  005ec	83 c0 01	 add	 eax, 1
  005ef	89 45 e4	 mov	 DWORD PTR _k$[ebp], eax
$LN41@kernel_rem:
  005f2	8b 4d e4	 mov	 ecx, DWORD PTR _k$[ebp]
  005f5	3b 4d ac	 cmp	 ecx, DWORD PTR _jp$[ebp]
  005f8	7f 2a		 jg	 SHORT $LN40@kernel_rem
  005fa	8b 55 f8	 mov	 edx, DWORD PTR _jz$[ebp]
  005fd	2b 55 fc	 sub	 edx, DWORD PTR _i$[ebp]
  00600	39 55 e4	 cmp	 DWORD PTR _k$[ebp], edx
  00603	7f 1f		 jg	 SHORT $LN40@kernel_rem

; 373  :     {
; 374  :       fw += PIo2[k] * q[i + k];

  00605	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00608	03 45 e4	 add	 eax, DWORD PTR _k$[ebp]
  0060b	8b 4d e4	 mov	 ecx, DWORD PTR _k$[ebp]
  0060e	dd 04 cd 00 00
	00 00		 fld	 QWORD PTR _PIo2[ecx*8]
  00615	dc 8c c5 ec fd
	ff ff		 fmul	 QWORD PTR _q$[ebp+eax*8]
  0061c	dc 45 ec	 fadd	 QWORD PTR _fw$[ebp]
  0061f	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]

; 375  :     }

  00622	eb c5		 jmp	 SHORT $LN39@kernel_rem
$LN40@kernel_rem:

; 376  :     fq[jz - i] = fw;

  00624	8b 55 f8	 mov	 edx, DWORD PTR _jz$[ebp]
  00627	2b 55 fc	 sub	 edx, DWORD PTR _i$[ebp]
  0062a	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  0062d	dd 9c d5 8c fe
	ff ff		 fstp	 QWORD PTR _fq$[ebp+edx*8]

; 377  :   }

  00634	eb 96		 jmp	 SHORT $LN36@kernel_rem
$LN37@kernel_rem:

; 378  : 
; 379  :   /* compress fq[] into y[] */
; 380  :   switch (prec)

  00636	8b 45 18	 mov	 eax, DWORD PTR _prec$[ebp]
  00639	89 45 bc	 mov	 DWORD PTR tv323[ebp], eax
  0063c	83 7d bc 03	 cmp	 DWORD PTR tv323[ebp], 3
  00640	0f 87 b2 02 00
	00		 ja	 $LN42@kernel_rem
  00646	8b 4d bc	 mov	 ecx, DWORD PTR tv323[ebp]
  00649	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN97@kernel_rem[ecx*4]
$LN83@kernel_rem:

; 381  :   {
; 382  :     case 0:
; 383  :     {
; 384  :       fw = 0.0;

  00650	d9 ee		 fldz
  00652	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]

; 385  :       for (i = jz; i >= 0; i--)

  00655	8b 55 f8	 mov	 edx, DWORD PTR _jz$[ebp]
  00658	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
  0065b	eb 09		 jmp	 SHORT $LN46@kernel_rem
$LN44@kernel_rem:
  0065d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00660	83 e8 01	 sub	 eax, 1
  00663	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN46@kernel_rem:
  00666	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  0066a	7c 12		 jl	 SHORT $LN45@kernel_rem

; 386  :       {
; 387  :         fw += fq[i];

  0066c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0066f	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  00672	dc 84 cd 8c fe
	ff ff		 fadd	 QWORD PTR _fq$[ebp+ecx*8]
  00679	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]

; 388  :       }

  0067c	eb df		 jmp	 SHORT $LN44@kernel_rem
$LN45@kernel_rem:

; 389  :       y[0] = (ih == 0) ? fw : -fw;

  0067e	83 7d d8 00	 cmp	 DWORD PTR _ih$[ebp], 0
  00682	75 08		 jne	 SHORT $LN91@kernel_rem
  00684	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  00687	dd 5d 9c	 fstp	 QWORD PTR tv333[ebp]
  0068a	eb 08		 jmp	 SHORT $LN92@kernel_rem
$LN91@kernel_rem:
  0068c	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  0068f	d9 e0		 fchs
  00691	dd 5d 9c	 fstp	 QWORD PTR tv333[ebp]
$LN92@kernel_rem:
  00694	ba 08 00 00 00	 mov	 edx, 8
  00699	6b c2 00	 imul	 eax, edx, 0
  0069c	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0069f	dd 45 9c	 fld	 QWORD PTR tv333[ebp]
  006a2	dd 1c 01	 fstp	 QWORD PTR [ecx+eax]

; 390  :       break;

  006a5	e9 4e 02 00 00	 jmp	 $LN42@kernel_rem
$LN84@kernel_rem:

; 391  :     }
; 392  :     case 1:
; 393  :     case 2:
; 394  :     {
; 395  :       fw = 0.0;

  006aa	d9 ee		 fldz
  006ac	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]

; 396  :       for (i = jz; i >= 0; i--)

  006af	8b 55 f8	 mov	 edx, DWORD PTR _jz$[ebp]
  006b2	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
  006b5	eb 09		 jmp	 SHORT $LN49@kernel_rem
$LN47@kernel_rem:
  006b7	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  006ba	83 e8 01	 sub	 eax, 1
  006bd	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN49@kernel_rem:
  006c0	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  006c4	7c 12		 jl	 SHORT $LN48@kernel_rem

; 397  :       {
; 398  :         fw += fq[i];

  006c6	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  006c9	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  006cc	dc 84 cd 8c fe
	ff ff		 fadd	 QWORD PTR _fq$[ebp+ecx*8]
  006d3	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]

; 399  :       }

  006d6	eb df		 jmp	 SHORT $LN47@kernel_rem
$LN48@kernel_rem:

; 400  :       y[0] = (ih == 0) ? fw : -fw;

  006d8	83 7d d8 00	 cmp	 DWORD PTR _ih$[ebp], 0
  006dc	75 08		 jne	 SHORT $LN93@kernel_rem
  006de	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  006e1	dd 5d 94	 fstp	 QWORD PTR tv343[ebp]
  006e4	eb 08		 jmp	 SHORT $LN94@kernel_rem
$LN93@kernel_rem:
  006e6	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  006e9	d9 e0		 fchs
  006eb	dd 5d 94	 fstp	 QWORD PTR tv343[ebp]
$LN94@kernel_rem:
  006ee	ba 08 00 00 00	 mov	 edx, 8
  006f3	6b c2 00	 imul	 eax, edx, 0
  006f6	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  006f9	dd 45 94	 fld	 QWORD PTR tv343[ebp]
  006fc	dd 1c 01	 fstp	 QWORD PTR [ecx+eax]

; 401  :       fw = fq[0] - fw;

  006ff	ba 08 00 00 00	 mov	 edx, 8
  00704	6b c2 00	 imul	 eax, edx, 0
  00707	dd 84 05 8c fe
	ff ff		 fld	 QWORD PTR _fq$[ebp+eax]
  0070e	dc 65 ec	 fsub	 QWORD PTR _fw$[ebp]
  00711	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]

; 402  :       for (i = 1; i <= jz; i++)

  00714	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  0071b	eb 09		 jmp	 SHORT $LN52@kernel_rem
$LN50@kernel_rem:
  0071d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00720	83 c1 01	 add	 ecx, 1
  00723	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN52@kernel_rem:
  00726	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00729	3b 55 f8	 cmp	 edx, DWORD PTR _jz$[ebp]
  0072c	7f 12		 jg	 SHORT $LN51@kernel_rem

; 403  :       {
; 404  :         fw += fq[i];

  0072e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00731	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  00734	dc 84 c5 8c fe
	ff ff		 fadd	 QWORD PTR _fq$[ebp+eax*8]
  0073b	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]

; 405  :       }

  0073e	eb dd		 jmp	 SHORT $LN50@kernel_rem
$LN51@kernel_rem:

; 406  :       y[1] = (ih == 0) ? fw : -fw;

  00740	83 7d d8 00	 cmp	 DWORD PTR _ih$[ebp], 0
  00744	75 08		 jne	 SHORT $LN95@kernel_rem
  00746	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  00749	dd 5d 8c	 fstp	 QWORD PTR tv356[ebp]
  0074c	eb 08		 jmp	 SHORT $LN96@kernel_rem
$LN95@kernel_rem:
  0074e	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  00751	d9 e0		 fchs
  00753	dd 5d 8c	 fstp	 QWORD PTR tv356[ebp]
$LN96@kernel_rem:
  00756	b9 08 00 00 00	 mov	 ecx, 8
  0075b	c1 e1 00	 shl	 ecx, 0
  0075e	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00761	dd 45 8c	 fld	 QWORD PTR tv356[ebp]
  00764	dd 1c 0a	 fstp	 QWORD PTR [edx+ecx]

; 407  :       break;

  00767	e9 8c 01 00 00	 jmp	 $LN42@kernel_rem
$LN85@kernel_rem:

; 408  :     }
; 409  :     case 3: /* painful */
; 410  :     {
; 411  :       for (i = jz; i > 0; i--)

  0076c	8b 45 f8	 mov	 eax, DWORD PTR _jz$[ebp]
  0076f	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
  00772	eb 09		 jmp	 SHORT $LN55@kernel_rem
$LN53@kernel_rem:
  00774	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00777	83 e9 01	 sub	 ecx, 1
  0077a	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN55@kernel_rem:
  0077d	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  00781	7e 47		 jle	 SHORT $LN54@kernel_rem

; 412  :       {
; 413  :         fw = fq[i - 1] + fq[i];

  00783	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00786	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00789	dd 84 d5 84 fe
	ff ff		 fld	 QWORD PTR _fq$[ebp+edx*8-8]
  00790	dc 84 c5 8c fe
	ff ff		 fadd	 QWORD PTR _fq$[ebp+eax*8]
  00797	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]

; 414  :         fq[i] += fq[i - 1] - fw;

  0079a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0079d	dd 84 cd 84 fe
	ff ff		 fld	 QWORD PTR _fq$[ebp+ecx*8-8]
  007a4	dc 65 ec	 fsub	 QWORD PTR _fw$[ebp]
  007a7	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  007aa	dc 84 d5 8c fe
	ff ff		 fadd	 QWORD PTR _fq$[ebp+edx*8]
  007b1	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  007b4	dd 9c c5 8c fe
	ff ff		 fstp	 QWORD PTR _fq$[ebp+eax*8]

; 415  :         fq[i - 1] = fw;

  007bb	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  007be	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  007c1	dd 9c cd 84 fe
	ff ff		 fstp	 QWORD PTR _fq$[ebp+ecx*8-8]

; 416  :       }

  007c8	eb aa		 jmp	 SHORT $LN53@kernel_rem
$LN54@kernel_rem:

; 417  :       for (i = jz; i > 1; i--)

  007ca	8b 55 f8	 mov	 edx, DWORD PTR _jz$[ebp]
  007cd	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
  007d0	eb 09		 jmp	 SHORT $LN58@kernel_rem
$LN56@kernel_rem:
  007d2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  007d5	83 e8 01	 sub	 eax, 1
  007d8	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN58@kernel_rem:
  007db	83 7d fc 01	 cmp	 DWORD PTR _i$[ebp], 1
  007df	7e 47		 jle	 SHORT $LN57@kernel_rem

; 418  :       {
; 419  :         fw = fq[i - 1] + fq[i];

  007e1	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  007e4	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  007e7	dd 84 cd 84 fe
	ff ff		 fld	 QWORD PTR _fq$[ebp+ecx*8-8]
  007ee	dc 84 d5 8c fe
	ff ff		 fadd	 QWORD PTR _fq$[ebp+edx*8]
  007f5	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]

; 420  :         fq[i] += fq[i - 1] - fw;

  007f8	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  007fb	dd 84 c5 84 fe
	ff ff		 fld	 QWORD PTR _fq$[ebp+eax*8-8]
  00802	dc 65 ec	 fsub	 QWORD PTR _fw$[ebp]
  00805	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00808	dc 84 cd 8c fe
	ff ff		 fadd	 QWORD PTR _fq$[ebp+ecx*8]
  0080f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00812	dd 9c d5 8c fe
	ff ff		 fstp	 QWORD PTR _fq$[ebp+edx*8]

; 421  :         fq[i - 1] = fw;

  00819	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0081c	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  0081f	dd 9c c5 84 fe
	ff ff		 fstp	 QWORD PTR _fq$[ebp+eax*8-8]

; 422  :       }

  00826	eb aa		 jmp	 SHORT $LN56@kernel_rem
$LN57@kernel_rem:

; 423  :       for (fw = 0.0, i = jz; i >= 2; i--)

  00828	d9 ee		 fldz
  0082a	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]
  0082d	8b 4d f8	 mov	 ecx, DWORD PTR _jz$[ebp]
  00830	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
  00833	eb 09		 jmp	 SHORT $LN61@kernel_rem
$LN59@kernel_rem:
  00835	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00838	83 ea 01	 sub	 edx, 1
  0083b	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$LN61@kernel_rem:
  0083e	83 7d fc 02	 cmp	 DWORD PTR _i$[ebp], 2
  00842	7c 12		 jl	 SHORT $LN60@kernel_rem

; 424  :       {
; 425  :         fw += fq[i];

  00844	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00847	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  0084a	dc 84 c5 8c fe
	ff ff		 fadd	 QWORD PTR _fq$[ebp+eax*8]
  00851	dd 5d ec	 fstp	 QWORD PTR _fw$[ebp]

; 426  :       }

  00854	eb df		 jmp	 SHORT $LN59@kernel_rem
$LN60@kernel_rem:

; 427  :       if (ih == 0)

  00856	83 7d d8 00	 cmp	 DWORD PTR _ih$[ebp], 0
  0085a	75 4c		 jne	 SHORT $LN86@kernel_rem

; 428  :       {
; 429  :         y[0] = fq[0];

  0085c	b9 08 00 00 00	 mov	 ecx, 8
  00861	6b d1 00	 imul	 edx, ecx, 0
  00864	b8 08 00 00 00	 mov	 eax, 8
  00869	6b c8 00	 imul	 ecx, eax, 0
  0086c	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0086f	dd 84 15 8c fe
	ff ff		 fld	 QWORD PTR _fq$[ebp+edx]
  00876	dd 1c 08	 fstp	 QWORD PTR [eax+ecx]

; 430  :         y[1] = fq[1];

  00879	b9 08 00 00 00	 mov	 ecx, 8
  0087e	c1 e1 00	 shl	 ecx, 0
  00881	ba 08 00 00 00	 mov	 edx, 8
  00886	c1 e2 00	 shl	 edx, 0
  00889	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0088c	dd 84 0d 8c fe
	ff ff		 fld	 QWORD PTR _fq$[ebp+ecx]
  00893	dd 1c 10	 fstp	 QWORD PTR [eax+edx]

; 431  :         y[2] = fw;

  00896	b9 08 00 00 00	 mov	 ecx, 8
  0089b	d1 e1		 shl	 ecx, 1
  0089d	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  008a0	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  008a3	dd 1c 0a	 fstp	 QWORD PTR [edx+ecx]

; 432  :       }

  008a6	eb 50		 jmp	 SHORT $LN87@kernel_rem
$LN86@kernel_rem:

; 433  :       else
; 434  :       {
; 435  :         y[0] = -fq[0];

  008a8	b8 08 00 00 00	 mov	 eax, 8
  008ad	6b c8 00	 imul	 ecx, eax, 0
  008b0	dd 84 0d 8c fe
	ff ff		 fld	 QWORD PTR _fq$[ebp+ecx]
  008b7	d9 e0		 fchs
  008b9	ba 08 00 00 00	 mov	 edx, 8
  008be	6b c2 00	 imul	 eax, edx, 0
  008c1	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  008c4	dd 1c 01	 fstp	 QWORD PTR [ecx+eax]

; 436  :         y[1] = -fq[1];

  008c7	ba 08 00 00 00	 mov	 edx, 8
  008cc	c1 e2 00	 shl	 edx, 0
  008cf	dd 84 15 8c fe
	ff ff		 fld	 QWORD PTR _fq$[ebp+edx]
  008d6	d9 e0		 fchs
  008d8	b8 08 00 00 00	 mov	 eax, 8
  008dd	c1 e0 00	 shl	 eax, 0
  008e0	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  008e3	dd 1c 01	 fstp	 QWORD PTR [ecx+eax]

; 437  :         y[2] = -fw;

  008e6	dd 45 ec	 fld	 QWORD PTR _fw$[ebp]
  008e9	d9 e0		 fchs
  008eb	ba 08 00 00 00	 mov	 edx, 8
  008f0	d1 e2		 shl	 edx, 1
  008f2	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  008f5	dd 1c 10	 fstp	 QWORD PTR [eax+edx]
$LN87@kernel_rem:
$LN42@kernel_rem:

; 438  :       }
; 439  :     }
; 440  :   }
; 441  :   return n & 7;

  008f8	8b 45 cc	 mov	 eax, DWORD PTR _n$[ebp]
  008fb	83 e0 07	 and	 eax, 7

; 442  : } /* __kernel_rem_pio2 */

  008fe	8b e5		 mov	 esp, ebp
  00900	5d		 pop	 ebp
  00901	c3		 ret	 0
  00902	8b ff		 npad	 2
$LN97@kernel_rem:
  00904	00 00 00 00	 DD	 $LN83@kernel_rem
  00908	00 00 00 00	 DD	 $LN84@kernel_rem
  0090c	00 00 00 00	 DD	 $LN84@kernel_rem
  00910	00 00 00 00	 DD	 $LN85@kernel_rem
___kernel_rem_pio2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\trig.c
;	COMDAT _tan
_TEXT	SEGMENT
_y$ = -32						; size = 16
_z$ = -16						; size = 8
_n$ = -8						; size = 4
_ix$ = -4						; size = 4
_x$ = 8							; size = 8
_tan	PROC						; COMDAT

; 1031 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 1032 :   double y[2], z = 0.0;

  00006	d9 ee		 fldz
  00008	dd 5d f0	 fstp	 QWORD PTR _z$[ebp]

; 1033 :   int n, ix;
; 1034 : 
; 1035 :   /* High word of x. */
; 1036 :   ix = __HI (x);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  0000e	89 45 fc	 mov	 DWORD PTR _ix$[ebp], eax

; 1037 : 
; 1038 :   /* |x| ~< pi/4 */
; 1039 :   ix &= 0x7fffffff;

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _ix$[ebp]
  00014	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  0001a	89 4d fc	 mov	 DWORD PTR _ix$[ebp], ecx

; 1040 :   if (ix <= 0x3fe921fb)

  0001d	81 7d fc fb 21
	e9 3f		 cmp	 DWORD PTR _ix$[ebp], 1072243195 ; 3fe921fbH
  00024	7f 20		 jg	 SHORT $LN2@tan

; 1041 :   {
; 1042 :     return __kernel_tan (x, z, 1);

  00026	6a 01		 push	 1
  00028	83 ec 08	 sub	 esp, 8
  0002b	dd 45 f0	 fld	 QWORD PTR _z$[ebp]
  0002e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00031	83 ec 08	 sub	 esp, 8
  00034	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00037	dd 1c 24	 fstp	 QWORD PTR [esp]
  0003a	e8 00 00 00 00	 call	 ___kernel_tan
  0003f	83 c4 14	 add	 esp, 20			; 00000014H
  00042	eb 69		 jmp	 SHORT $LN5@tan

; 1043 :   }

  00044	eb 67		 jmp	 SHORT $LN5@tan
$LN2@tan:

; 1044 : 
; 1045 :   /* tan(Inf or NaN) is NaN */
; 1046 :   else if (ix >= 0x7ff00000)

  00046	81 7d fc 00 00
	f0 7f		 cmp	 DWORD PTR _ix$[ebp], 2146435072 ; 7ff00000H
  0004d	7c 0a		 jl	 SHORT $LN4@tan

; 1047 :   {
; 1048 :     return x - x; /* NaN */

  0004f	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00052	dc 65 08	 fsub	 QWORD PTR _x$[ebp]
  00055	eb 56		 jmp	 SHORT $LN5@tan

; 1049 :   }

  00057	eb 54		 jmp	 SHORT $LN5@tan
$LN4@tan:

; 1050 : 
; 1051 :   /* argument reduction needed */
; 1052 :   else
; 1053 :   {
; 1054 :     n = __ieee754_rem_pio2 (x, y);

  00059	8d 55 e0	 lea	 edx, DWORD PTR _y$[ebp]
  0005c	52		 push	 edx
  0005d	83 ec 08	 sub	 esp, 8
  00060	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00063	dd 1c 24	 fstp	 QWORD PTR [esp]
  00066	e8 00 00 00 00	 call	 ___ieee754_rem_pio2
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006e	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax

; 1055 :     return __kernel_tan (y[0], y[1], 1 - ((n & 1) << 1)); /*   1 -- n even, -1 -- n odd */

  00071	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00074	83 e0 01	 and	 eax, 1
  00077	d1 e0		 shl	 eax, 1
  00079	b9 01 00 00 00	 mov	 ecx, 1
  0007e	2b c8		 sub	 ecx, eax
  00080	51		 push	 ecx
  00081	ba 08 00 00 00	 mov	 edx, 8
  00086	c1 e2 00	 shl	 edx, 0
  00089	83 ec 08	 sub	 esp, 8
  0008c	dd 44 15 e0	 fld	 QWORD PTR _y$[ebp+edx]
  00090	dd 1c 24	 fstp	 QWORD PTR [esp]
  00093	b8 08 00 00 00	 mov	 eax, 8
  00098	6b c8 00	 imul	 ecx, eax, 0
  0009b	83 ec 08	 sub	 esp, 8
  0009e	dd 44 0d e0	 fld	 QWORD PTR _y$[ebp+ecx]
  000a2	dd 1c 24	 fstp	 QWORD PTR [esp]
  000a5	e8 00 00 00 00	 call	 ___kernel_tan
  000aa	83 c4 14	 add	 esp, 20			; 00000014H
$LN5@tan:

; 1056 :   }
; 1057 : } /* tan */

  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
_tan	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\trig.c
;	COMDAT _sin
_TEXT	SEGMENT
_y$ = -36						; size = 16
_z$ = -20						; size = 8
_n$ = -12						; size = 4
tv77 = -8						; size = 4
_ix$ = -4						; size = 4
_x$ = 8							; size = 8
_sin	PROC						; COMDAT

; 918  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 919  :   double y[2], z = 0.0;

  00006	d9 ee		 fldz
  00008	dd 5d ec	 fstp	 QWORD PTR _z$[ebp]

; 920  :   int n, ix;
; 921  : 
; 922  :   /* High word of x. */
; 923  :   ix = __HI (x);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  0000e	89 45 fc	 mov	 DWORD PTR _ix$[ebp], eax

; 924  : 
; 925  :   /* |x| ~< pi/4 */
; 926  :   ix &= 0x7fffffff;

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _ix$[ebp]
  00014	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  0001a	89 4d fc	 mov	 DWORD PTR _ix$[ebp], ecx

; 927  :   if (ix <= 0x3fe921fb)

  0001d	81 7d fc fb 21
	e9 3f		 cmp	 DWORD PTR _ix$[ebp], 1072243195 ; 3fe921fbH
  00024	7f 26		 jg	 SHORT $LN4@sin

; 928  :   {
; 929  :     return __kernel_sin (x, z, 0);

  00026	6a 00		 push	 0
  00028	83 ec 08	 sub	 esp, 8
  0002b	dd 45 ec	 fld	 QWORD PTR _z$[ebp]
  0002e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00031	83 ec 08	 sub	 esp, 8
  00034	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00037	dd 1c 24	 fstp	 QWORD PTR [esp]
  0003a	e8 00 00 00 00	 call	 ___kernel_sin
  0003f	83 c4 14	 add	 esp, 20			; 00000014H
  00042	e9 13 01 00 00	 jmp	 $LN2@sin

; 930  :   }

  00047	e9 0e 01 00 00	 jmp	 $LN2@sin
$LN4@sin:

; 931  : 
; 932  :   /* sin(Inf or NaN) is NaN */
; 933  :   else if (ix >= 0x7ff00000)

  0004c	81 7d fc 00 00
	f0 7f		 cmp	 DWORD PTR _ix$[ebp], 2146435072 ; 7ff00000H
  00053	7c 10		 jl	 SHORT $LN6@sin

; 934  :   {
; 935  :     return x - x;

  00055	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00058	dc 65 08	 fsub	 QWORD PTR _x$[ebp]
  0005b	e9 fa 00 00 00	 jmp	 $LN2@sin

; 936  :   }

  00060	e9 f5 00 00 00	 jmp	 $LN2@sin
$LN6@sin:

; 937  : 
; 938  :   /* argument reduction needed */
; 939  :   else
; 940  :   {
; 941  :     n = __ieee754_rem_pio2 (x, y);

  00065	8d 55 dc	 lea	 edx, DWORD PTR _y$[ebp]
  00068	52		 push	 edx
  00069	83 ec 08	 sub	 esp, 8
  0006c	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0006f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00072	e8 00 00 00 00	 call	 ___ieee754_rem_pio2
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007a	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax

; 942  :     switch (n & 3)

  0007d	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  00080	83 e0 03	 and	 eax, 3
  00083	89 45 f8	 mov	 DWORD PTR tv77[ebp], eax
  00086	74 11		 je	 SHORT $LN8@sin
  00088	83 7d f8 01	 cmp	 DWORD PTR tv77[ebp], 1
  0008c	74 3e		 je	 SHORT $LN9@sin
  0008e	83 7d f8 02	 cmp	 DWORD PTR tv77[ebp], 2
  00092	74 66		 je	 SHORT $LN10@sin
  00094	e9 93 00 00 00	 jmp	 $LN11@sin
$LN8@sin:

; 943  :     {
; 944  :       case 0:
; 945  :       {
; 946  :         return __kernel_sin (y[0], y[1], 1);

  00099	6a 01		 push	 1
  0009b	b9 08 00 00 00	 mov	 ecx, 8
  000a0	c1 e1 00	 shl	 ecx, 0
  000a3	83 ec 08	 sub	 esp, 8
  000a6	dd 44 0d dc	 fld	 QWORD PTR _y$[ebp+ecx]
  000aa	dd 1c 24	 fstp	 QWORD PTR [esp]
  000ad	ba 08 00 00 00	 mov	 edx, 8
  000b2	6b c2 00	 imul	 eax, edx, 0
  000b5	83 ec 08	 sub	 esp, 8
  000b8	dd 44 05 dc	 fld	 QWORD PTR _y$[ebp+eax]
  000bc	dd 1c 24	 fstp	 QWORD PTR [esp]
  000bf	e8 00 00 00 00	 call	 ___kernel_sin
  000c4	83 c4 14	 add	 esp, 20			; 00000014H
  000c7	e9 8e 00 00 00	 jmp	 $LN2@sin
$LN9@sin:

; 947  :       }
; 948  :       case 1:
; 949  :       {
; 950  :         return __kernel_cos (y[0], y[1]);

  000cc	b9 08 00 00 00	 mov	 ecx, 8
  000d1	c1 e1 00	 shl	 ecx, 0
  000d4	83 ec 08	 sub	 esp, 8
  000d7	dd 44 0d dc	 fld	 QWORD PTR _y$[ebp+ecx]
  000db	dd 1c 24	 fstp	 QWORD PTR [esp]
  000de	ba 08 00 00 00	 mov	 edx, 8
  000e3	6b c2 00	 imul	 eax, edx, 0
  000e6	83 ec 08	 sub	 esp, 8
  000e9	dd 44 05 dc	 fld	 QWORD PTR _y$[ebp+eax]
  000ed	dd 1c 24	 fstp	 QWORD PTR [esp]
  000f0	e8 00 00 00 00	 call	 ___kernel_cos
  000f5	83 c4 10	 add	 esp, 16			; 00000010H
  000f8	eb 60		 jmp	 SHORT $LN2@sin
$LN10@sin:

; 951  :       }
; 952  :       case 2:
; 953  :       {
; 954  :         return -__kernel_sin (y[0], y[1], 1);

  000fa	6a 01		 push	 1
  000fc	b9 08 00 00 00	 mov	 ecx, 8
  00101	c1 e1 00	 shl	 ecx, 0
  00104	83 ec 08	 sub	 esp, 8
  00107	dd 44 0d dc	 fld	 QWORD PTR _y$[ebp+ecx]
  0010b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0010e	ba 08 00 00 00	 mov	 edx, 8
  00113	6b c2 00	 imul	 eax, edx, 0
  00116	83 ec 08	 sub	 esp, 8
  00119	dd 44 05 dc	 fld	 QWORD PTR _y$[ebp+eax]
  0011d	dd 1c 24	 fstp	 QWORD PTR [esp]
  00120	e8 00 00 00 00	 call	 ___kernel_sin
  00125	83 c4 14	 add	 esp, 20			; 00000014H
  00128	d9 e0		 fchs
  0012a	eb 2e		 jmp	 SHORT $LN2@sin
$LN11@sin:

; 955  :       }
; 956  :       default:
; 957  :       {
; 958  :         return -__kernel_cos (y[0], y[1]);

  0012c	b9 08 00 00 00	 mov	 ecx, 8
  00131	c1 e1 00	 shl	 ecx, 0
  00134	83 ec 08	 sub	 esp, 8
  00137	dd 44 0d dc	 fld	 QWORD PTR _y$[ebp+ecx]
  0013b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0013e	ba 08 00 00 00	 mov	 edx, 8
  00143	6b c2 00	 imul	 eax, edx, 0
  00146	83 ec 08	 sub	 esp, 8
  00149	dd 44 05 dc	 fld	 QWORD PTR _y$[ebp+eax]
  0014d	dd 1c 24	 fstp	 QWORD PTR [esp]
  00150	e8 00 00 00 00	 call	 ___kernel_cos
  00155	83 c4 10	 add	 esp, 16			; 00000010H
  00158	d9 e0		 fchs
$LN2@sin:

; 959  :       }
; 960  :     }
; 961  :   }
; 962  : } /* sin */

  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
_sin	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hellox\personal\hellox_os\app\yeelight\hxlib\trig.c
;	COMDAT _cos
_TEXT	SEGMENT
_y$ = -36						; size = 16
_z$ = -20						; size = 8
_n$ = -12						; size = 4
tv76 = -8						; size = 4
_ix$ = -4						; size = 4
_x$ = 8							; size = 8
_cos	PROC						; COMDAT

; 975  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 976  :   double y[2], z = 0.0;

  00006	d9 ee		 fldz
  00008	dd 5d ec	 fstp	 QWORD PTR _z$[ebp]

; 977  :   int n, ix;
; 978  : 
; 979  :   /* High word of x. */
; 980  :   ix = __HI (x);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  0000e	89 45 fc	 mov	 DWORD PTR _ix$[ebp], eax

; 981  : 
; 982  :   /* |x| ~< pi/4 */
; 983  :   ix &= 0x7fffffff;

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _ix$[ebp]
  00014	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  0001a	89 4d fc	 mov	 DWORD PTR _ix$[ebp], ecx

; 984  :   if (ix <= 0x3fe921fb)

  0001d	81 7d fc fb 21
	e9 3f		 cmp	 DWORD PTR _ix$[ebp], 1072243195 ; 3fe921fbH
  00024	7f 24		 jg	 SHORT $LN4@cos

; 985  :   {
; 986  :     return __kernel_cos (x, z);

  00026	83 ec 08	 sub	 esp, 8
  00029	dd 45 ec	 fld	 QWORD PTR _z$[ebp]
  0002c	dd 1c 24	 fstp	 QWORD PTR [esp]
  0002f	83 ec 08	 sub	 esp, 8
  00032	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00035	dd 1c 24	 fstp	 QWORD PTR [esp]
  00038	e8 00 00 00 00	 call	 ___kernel_cos
  0003d	83 c4 10	 add	 esp, 16			; 00000010H
  00040	e9 13 01 00 00	 jmp	 $LN2@cos

; 987  :   }

  00045	e9 0e 01 00 00	 jmp	 $LN2@cos
$LN4@cos:

; 988  : 
; 989  :   /* cos(Inf or NaN) is NaN */
; 990  :   else if (ix >= 0x7ff00000)

  0004a	81 7d fc 00 00
	f0 7f		 cmp	 DWORD PTR _ix$[ebp], 2146435072 ; 7ff00000H
  00051	7c 10		 jl	 SHORT $LN6@cos

; 991  :   {
; 992  :     return x - x;

  00053	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00056	dc 65 08	 fsub	 QWORD PTR _x$[ebp]
  00059	e9 fa 00 00 00	 jmp	 $LN2@cos

; 993  :   }

  0005e	e9 f5 00 00 00	 jmp	 $LN2@cos
$LN6@cos:

; 994  : 
; 995  :   /* argument reduction needed */
; 996  :   else
; 997  :   {
; 998  :     n = __ieee754_rem_pio2 (x, y);

  00063	8d 55 dc	 lea	 edx, DWORD PTR _y$[ebp]
  00066	52		 push	 edx
  00067	83 ec 08	 sub	 esp, 8
  0006a	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0006d	dd 1c 24	 fstp	 QWORD PTR [esp]
  00070	e8 00 00 00 00	 call	 ___ieee754_rem_pio2
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH
  00078	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax

; 999  :     switch (n & 3)

  0007b	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0007e	83 e0 03	 and	 eax, 3
  00081	89 45 f8	 mov	 DWORD PTR tv76[ebp], eax
  00084	74 11		 je	 SHORT $LN8@cos
  00086	83 7d f8 01	 cmp	 DWORD PTR tv76[ebp], 1
  0008a	74 3c		 je	 SHORT $LN9@cos
  0008c	83 7d f8 02	 cmp	 DWORD PTR tv76[ebp], 2
  00090	74 68		 je	 SHORT $LN10@cos
  00092	e9 93 00 00 00	 jmp	 $LN11@cos
$LN8@cos:

; 1000 :     {
; 1001 :       case 0:
; 1002 :       {
; 1003 :         return __kernel_cos (y[0], y[1]);

  00097	b9 08 00 00 00	 mov	 ecx, 8
  0009c	c1 e1 00	 shl	 ecx, 0
  0009f	83 ec 08	 sub	 esp, 8
  000a2	dd 44 0d dc	 fld	 QWORD PTR _y$[ebp+ecx]
  000a6	dd 1c 24	 fstp	 QWORD PTR [esp]
  000a9	ba 08 00 00 00	 mov	 edx, 8
  000ae	6b c2 00	 imul	 eax, edx, 0
  000b1	83 ec 08	 sub	 esp, 8
  000b4	dd 44 05 dc	 fld	 QWORD PTR _y$[ebp+eax]
  000b8	dd 1c 24	 fstp	 QWORD PTR [esp]
  000bb	e8 00 00 00 00	 call	 ___kernel_cos
  000c0	83 c4 10	 add	 esp, 16			; 00000010H
  000c3	e9 90 00 00 00	 jmp	 $LN2@cos
$LN9@cos:

; 1004 :       }
; 1005 :       case 1:
; 1006 :       {
; 1007 :         return -__kernel_sin (y[0], y[1], 1);

  000c8	6a 01		 push	 1
  000ca	b9 08 00 00 00	 mov	 ecx, 8
  000cf	c1 e1 00	 shl	 ecx, 0
  000d2	83 ec 08	 sub	 esp, 8
  000d5	dd 44 0d dc	 fld	 QWORD PTR _y$[ebp+ecx]
  000d9	dd 1c 24	 fstp	 QWORD PTR [esp]
  000dc	ba 08 00 00 00	 mov	 edx, 8
  000e1	6b c2 00	 imul	 eax, edx, 0
  000e4	83 ec 08	 sub	 esp, 8
  000e7	dd 44 05 dc	 fld	 QWORD PTR _y$[ebp+eax]
  000eb	dd 1c 24	 fstp	 QWORD PTR [esp]
  000ee	e8 00 00 00 00	 call	 ___kernel_sin
  000f3	83 c4 14	 add	 esp, 20			; 00000014H
  000f6	d9 e0		 fchs
  000f8	eb 5e		 jmp	 SHORT $LN2@cos
$LN10@cos:

; 1008 :       }
; 1009 :       case 2:
; 1010 :       {
; 1011 :         return -__kernel_cos (y[0], y[1]);

  000fa	b9 08 00 00 00	 mov	 ecx, 8
  000ff	c1 e1 00	 shl	 ecx, 0
  00102	83 ec 08	 sub	 esp, 8
  00105	dd 44 0d dc	 fld	 QWORD PTR _y$[ebp+ecx]
  00109	dd 1c 24	 fstp	 QWORD PTR [esp]
  0010c	ba 08 00 00 00	 mov	 edx, 8
  00111	6b c2 00	 imul	 eax, edx, 0
  00114	83 ec 08	 sub	 esp, 8
  00117	dd 44 05 dc	 fld	 QWORD PTR _y$[ebp+eax]
  0011b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0011e	e8 00 00 00 00	 call	 ___kernel_cos
  00123	83 c4 10	 add	 esp, 16			; 00000010H
  00126	d9 e0		 fchs
  00128	eb 2e		 jmp	 SHORT $LN2@cos
$LN11@cos:

; 1012 :       }
; 1013 :       default:
; 1014 :       {
; 1015 :         return __kernel_sin (y[0], y[1], 1);

  0012a	6a 01		 push	 1
  0012c	b9 08 00 00 00	 mov	 ecx, 8
  00131	c1 e1 00	 shl	 ecx, 0
  00134	83 ec 08	 sub	 esp, 8
  00137	dd 44 0d dc	 fld	 QWORD PTR _y$[ebp+ecx]
  0013b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0013e	ba 08 00 00 00	 mov	 edx, 8
  00143	6b c2 00	 imul	 eax, edx, 0
  00146	83 ec 08	 sub	 esp, 8
  00149	dd 44 05 dc	 fld	 QWORD PTR _y$[ebp+eax]
  0014d	dd 1c 24	 fstp	 QWORD PTR [esp]
  00150	e8 00 00 00 00	 call	 ___kernel_sin
  00155	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@cos:

; 1016 :       }
; 1017 :     }
; 1018 :   }
; 1019 : } /* cos */

  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c3		 ret	 0
_cos	ENDP
_TEXT	ENDS
END
