//***********************************************************************/
//    Author                    : Garry
//    Original Date             : Jan 13, 2023
//    Module Name               : hhtt.h
//    Module Funciton           : 
//    Description               : 
//                                HelloX High Throughput Tunnel(HHTT), is a new
//                                defined tunnel protocol under HelloX OS, used to
//                                xfer network packet in a security and high
//                                throughput tunnel between client and server.
//                                This tunnel protocol is open and could be implemented
//                                in any OS.
//                                HHTT will be simplified to HT2 in coding.
//    Last modified Author      :
//    Last modified Date        : 
//    Last modified Content     :
//                                1.
//                                2.
//    Lines number              :
//    Extra comment             : 
//***********************************************************************/

#ifndef __HHTT_H__
#define __HHTT_H__

#include "lwip/ip_addr.h"
#include "genif.h"
#include "ipsec/aes.h"

/* 
 * Default UDP port of server side. 
 * This value is the last 5 digits of my
 * car's ID.:-)
 */
#define HT2_PORT_SERVER 56893

/* Default qos and ttl value of ht2 IP packet. */
#define HT2_DEFAULT_QOS 0
#define HT2_DEFAULT_TTL 255

/* 
 * Default port for client side. 
 * It's the combination of the sequence number 
 * of buying and lenting car parking space, the
 * sequence number is generated by property
 * management company.
 * The 2 numbers, 344 and 990, all are almost
 * lowest end, that's make me no chance to buy
 * the parking space and almost no chance to 
 * lent a good parking.
 * I don't know who to fuck...
 */
#define HT2_PORT_CLIENT 34499

/* Default server host, just for debugging. */
#define HT2_SERVER_HOST "0.0.0.0"

/* Cipher key length, use 256 bits. */
#define HT2_CIPHER_KEY_LENGTH 32

/* Default key file's directory. */
#define IPSEC_KEY_FILEDIR "C:\\KEY\\"

/*
 * A struct used to management one ht2
 * tunnel, the parameters related to the
 * tunnel are saved in this structure.
 */
typedef struct tag__HT2_TUNNEL_OBJECT {
	unsigned long tunnel_id;      /* id of the tunnel. */
	ip_addr_t src_addr;           /* source ip address. */
	ip_addr_t dest_addr;          /* dest ip address. */
	unsigned short src_port;      /* source udp port. */
	unsigned short dest_port;     /* dest udp port. */
	uint8_t qos;                  /* qos value of ht2 packet. */
	uint8_t ttl;                  /* ttl value of ht2 packet. */

	/* associated genif object. */
	__GENERIC_NETIF* pGenif;

	/* Cipher context of this tunnel. */
	void* cipher_ctx;
	/* Cipher key for enc/dec. */
	unsigned char cipher_key[HT2_CIPHER_KEY_LENGTH];
	/* Initial vector for AES. */
	unsigned char iv[AES_IV_LENGTH];

	/* Session ID. */
	uint16_t session_id;
	/* seq no for tx and rx. */
	uint32_t seqno_rx;
	uint32_t seqno_tx;

	/* Statistics counter of the tunnel. */
	unsigned long pkt_send;       /* how many pkt are sent out. */
	unsigned long pkt_recv;       /* received pkt number. */
	unsigned long drop_toolong;   /* pkt drop numbers because of too long. */
	unsigned long for_me_match;   /* packet_for_me matches number. */
}__HT2_TUNNEL_OBJECT;

/* Header of HHTT tunnel, 32 bits. */
#pragma pack(push, 1)
typedef struct tag__HHTT_HEADER {
	uint8_t ver;
	uint8_t pad;
	uint16_t session_id;
	uint32_t seq_no;
	uint8_t iv[AES_IV_LENGTH];
}__HT2_HEADER;
#pragma pack(pop)

/* 
 * Transmit queue element of ht2 kernel thread. 
 * Each packet, no matter incoming or out going, will
 * be sent to the ht2 background thread to process,
 * using this element as wrapper.
 */
typedef struct tag__XMIT_QUEUE_ELEMENT {
	struct pbuf* p;
	/*
	 * Original packet's total length.
	 * In order to carry out ciphering,
	 * a new pbuf with length align to
	 * cipher's alignment maybe created
	 * to hold the original pbuf, and the
	 * new buff's length is aligned length,
	 * so use this variable to convey the
	 * old pbuf's total length.
	 */
	uint16_t original_sz;
	__HT2_TUNNEL_OBJECT* ht2_tunnel;
	__GENERIC_NETIF* pGenif;
	struct tag__XMIT_QUEUE_ELEMENT* pNext;
}__XMIT_QUEUE_ELEMENT;

/* Message ID of ht2 background thread. */
#define HT2_MESSAGE_SEND 101
#define HT2_MESSAGE_RECV 102

/* back thread's priority level. */
#define HT2_BACKTHREAD_PRIO PRIORITY_LEVEL_HIGH

/* 
 * HT2 total header's length, it's includes 
 * the upd header, the ht2 tunnel's header,
 * and the underlay IP header. 
 * Incase of ciphering, pading bytes maybe
 * appended in rear of packet to align 16
 * bytes(most ciphering algorithm), so 
 * at most 16 bytes should be deducted.
 * This value is used to calculate ht2 
 * interface's MTU.
 */
#define HT2_TOTAL_HEADER_LENGTH \
	(sizeof(struct ip_hdr) +    \
	sizeof(struct udp_hdr) +    \
	sizeof(__HT2_HEADER)   +    \
	16)

/* Add one HHTT VTI into system. */
BOOL ht2tun_add(const char* if_name,
	const char* parent_name,
	const char* address);

/* Change HHTT VTI's attributes. */
BOOL ht2tun_set(const char* if_name,
	const char* att_name,
	const char* att_value);

/* Remove one ht2 vti from system. */
BOOL ht2tun_del(const char* if_name);

#endif //__HHTT_H__
